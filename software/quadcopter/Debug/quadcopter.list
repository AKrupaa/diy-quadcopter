
quadcopter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd78  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800cf58  0800cf58  0001cf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d384  0800d384  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800d384  0800d384  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d384  0800d384  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d384  0800d384  0001d384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d388  0800d388  0001d388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003584  200001ec  0800d578  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20003770  0800d578  00023770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028ded  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000062e7  00000000  00000000  00049009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002128  00000000  00000000  0004f2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e60  00000000  00000000  00051418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e03e  00000000  00000000  00053278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000305bd  00000000  00000000  000812b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d03d  00000000  00000000  000b1873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001be8b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089f0  00000000  00000000  001be900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cf40 	.word	0x0800cf40

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f0 	.word	0x200001f0
 800021c:	0800cf40 	.word	0x0800cf40

08000220 <MX_AES_Init>:
__ALIGN_BEGIN static const uint32_t pKeyAES[4] __ALIGN_END = {
                            0x00000000,0x00000000,0x00000000,0x00000000};

/* AES init function */
void MX_AES_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8000224:	4b10      	ldr	r3, [pc, #64]	; (8000268 <MX_AES_Init+0x48>)
 8000226:	4a11      	ldr	r2, [pc, #68]	; (800026c <MX_AES_Init+0x4c>)
 8000228:	601a      	str	r2, [r3, #0]
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 800022a:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <MX_AES_Init+0x48>)
 800022c:	2200      	movs	r2, #0
 800022e:	605a      	str	r2, [r3, #4]
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <MX_AES_Init+0x48>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
  hcryp.Init.pKey = (uint32_t *)pKeyAES;
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <MX_AES_Init+0x48>)
 8000238:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <MX_AES_Init+0x50>)
 800023a:	60da      	str	r2, [r3, #12]
  hcryp.Init.Algorithm = CRYP_AES_ECB;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <MX_AES_Init+0x48>)
 800023e:	2200      	movs	r2, #0
 8000240:	615a      	str	r2, [r3, #20]
  hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_WORD;
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <MX_AES_Init+0x48>)
 8000244:	2200      	movs	r2, #0
 8000246:	625a      	str	r2, [r3, #36]	; 0x24
  hcryp.Init.HeaderWidthUnit = CRYP_HEADERWIDTHUNIT_WORD;
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <MX_AES_Init+0x48>)
 800024a:	2200      	movs	r2, #0
 800024c:	629a      	str	r2, [r3, #40]	; 0x28
  hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ALWAYS;
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <MX_AES_Init+0x48>)
 8000250:	2200      	movs	r2, #0
 8000252:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <MX_AES_Init+0x48>)
 8000256:	f000 feed 	bl	8001034 <HAL_CRYP_Init>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_AES_Init+0x44>
  {
    Error_Handler();
 8000260:	f000 f9ca 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000208 	.word	0x20000208
 800026c:	50060000 	.word	0x50060000
 8000270:	0800d2d8 	.word	0x0800d2d8

08000274 <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]

  if(crypHandle->Instance==AES)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <HAL_CRYP_MspInit+0x38>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d10b      	bne.n	800029e <HAL_CRYP_MspInit+0x2a>
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <HAL_CRYP_MspInit+0x3c>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028a:	4a09      	ldr	r2, [pc, #36]	; (80002b0 <HAL_CRYP_MspInit+0x3c>)
 800028c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000292:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <HAL_CRYP_MspInit+0x3c>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800029a:	60fb      	str	r3, [r7, #12]
 800029c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	50060000 	.word	0x50060000
 80002b0:	40021000 	.word	0x40021000

080002b4 <configureTimerForRunTimeStats>:
void vApplicationDaemonTaskStartupHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80002c2:	b480      	push	{r7}
 80002c4:	af00      	add	r7, sp, #0
return 0;
 80002c6:	2300      	movs	r3, #0
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <vApplicationIdleHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80002d2:	b480      	push	{r7}
 80002d4:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <vApplicationTickHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 80002e4:	bf00      	nop
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr

080002ee <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(TaskHandle_t xTask, signed char *pcTaskName)
{
 80002ee:	b480      	push	{r7}
 80002f0:	b083      	sub	sp, #12
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
 80002f6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr

08000312 <vApplicationDaemonTaskStartupHook>:
/* USER CODE END 5 */

/* USER CODE BEGIN DAEMON_TASK_STARTUP_HOOK */
void vApplicationDaemonTaskStartupHook(void)
{
 8000312:	b480      	push	{r7}
 8000314:	af00      	add	r7, sp, #0
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <MX_FREERTOS_Init+0x18>)
 8000326:	2100      	movs	r1, #0
 8000328:	4804      	ldr	r0, [pc, #16]	; (800033c <MX_FREERTOS_Init+0x1c>)
 800032a:	f009 fad9 	bl	80098e0 <osThreadNew>
 800032e:	4603      	mov	r3, r0
 8000330:	4a03      	ldr	r2, [pc, #12]	; (8000340 <MX_FREERTOS_Init+0x20>)
 8000332:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000334:	bf00      	nop
 8000336:	bd80      	pop	{r7, pc}
 8000338:	0800d2e8 	.word	0x0800d2e8
 800033c:	08000345 	.word	0x08000345
 8000340:	20000268 	.word	0x20000268

08000344 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
//  for(;;)
//  {
//    osDelay(1);
//  }
  /* USER CODE END StartDefaultTask */
}
 800034c:	bf00      	nop
 800034e:	370c      	adds	r7, #12
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <MX_CRC_Init+0x3c>)
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <MX_CRC_Init+0x40>)
 8000360:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_CRC_Init+0x3c>)
 8000364:	2200      	movs	r2, #0
 8000366:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <MX_CRC_Init+0x3c>)
 800036a:	2200      	movs	r2, #0
 800036c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800036e:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_CRC_Init+0x3c>)
 8000370:	2200      	movs	r2, #0
 8000372:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <MX_CRC_Init+0x3c>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_CRC_Init+0x3c>)
 800037c:	2201      	movs	r2, #1
 800037e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000380:	4804      	ldr	r0, [pc, #16]	; (8000394 <MX_CRC_Init+0x3c>)
 8000382:	f000 fd07 	bl	8000d94 <HAL_CRC_Init>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800038c:	f000 f934 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}
 8000394:	2000026c 	.word	0x2000026c
 8000398:	40023000 	.word	0x40023000

0800039c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <HAL_CRC_MspInit+0x38>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d10b      	bne.n	80003c6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <HAL_CRC_MspInit+0x3c>)
 80003b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003b2:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <HAL_CRC_MspInit+0x3c>)
 80003b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003b8:	6493      	str	r3, [r2, #72]	; 0x48
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <HAL_CRC_MspInit+0x3c>)
 80003bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40023000 	.word	0x40023000
 80003d8:	40021000 	.word	0x40021000

080003dc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b08a      	sub	sp, #40	; 0x28
 80003e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e2:	f107 0314 	add.w	r3, r7, #20
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]
 80003ec:	609a      	str	r2, [r3, #8]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f2:	4b40      	ldr	r3, [pc, #256]	; (80004f4 <MX_GPIO_Init+0x118>)
 80003f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003f6:	4a3f      	ldr	r2, [pc, #252]	; (80004f4 <MX_GPIO_Init+0x118>)
 80003f8:	f043 0304 	orr.w	r3, r3, #4
 80003fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003fe:	4b3d      	ldr	r3, [pc, #244]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	f003 0304 	and.w	r3, r3, #4
 8000406:	613b      	str	r3, [r7, #16]
 8000408:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800040a:	4b3a      	ldr	r3, [pc, #232]	; (80004f4 <MX_GPIO_Init+0x118>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	4a39      	ldr	r2, [pc, #228]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000410:	f043 0320 	orr.w	r3, r3, #32
 8000414:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000416:	4b37      	ldr	r3, [pc, #220]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	f003 0320 	and.w	r3, r3, #32
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000422:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	4a33      	ldr	r2, [pc, #204]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800042c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800042e:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000436:	60bb      	str	r3, [r7, #8]
 8000438:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043a:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <MX_GPIO_Init+0x118>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	4a2d      	ldr	r2, [pc, #180]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000446:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000452:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a27      	ldr	r2, [pc, #156]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000458:	f043 0302 	orr.w	r3, r3, #2
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <MX_GPIO_Init+0x118>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0302 	and.w	r3, r3, #2
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 PC14 PC15 PC4
                           PC6 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
 800046a:	f64e 4350 	movw	r3, #60496	; 0xec50
 800046e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000470:	2303      	movs	r3, #3
 8000472:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	4619      	mov	r1, r3
 800047e:	481e      	ldr	r0, [pc, #120]	; (80004f8 <MX_GPIO_Init+0x11c>)
 8000480:	f000 fec8 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000484:	2303      	movs	r3, #3
 8000486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000488:	2303      	movs	r3, #3
 800048a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4619      	mov	r1, r3
 8000496:	4819      	ldr	r0, [pc, #100]	; (80004fc <MX_GPIO_Init+0x120>)
 8000498:	f000 febc 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800049c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a2:	2303      	movs	r3, #3
 80004a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	4619      	mov	r1, r3
 80004b0:	4813      	ldr	r0, [pc, #76]	; (8000500 <MX_GPIO_Init+0x124>)
 80004b2:	f000 feaf 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004b6:	f248 731f 	movw	r3, #34591	; 0x871f
 80004ba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004bc:	2303      	movs	r3, #3
 80004be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	4619      	mov	r1, r3
 80004ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ce:	f000 fea1 	bl	8001214 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80004d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d8:	2303      	movs	r3, #3
 80004da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004dc:	2300      	movs	r3, #0
 80004de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e0:	f107 0314 	add.w	r3, r7, #20
 80004e4:	4619      	mov	r1, r3
 80004e6:	4807      	ldr	r0, [pc, #28]	; (8000504 <MX_GPIO_Init+0x128>)
 80004e8:	f000 fe94 	bl	8001214 <HAL_GPIO_Init>

}
 80004ec:	bf00      	nop
 80004ee:	3728      	adds	r7, #40	; 0x28
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000
 80004f8:	48000800 	.word	0x48000800
 80004fc:	48001400 	.word	0x48001400
 8000500:	48001800 	.word	0x48001800
 8000504:	48000400 	.word	0x48000400

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fafb 	bl	8000b06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f813 	bl	800053a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f7ff ff62 	bl	80003dc <MX_GPIO_Init>
  MX_AES_Init();
 8000518:	f7ff fe82 	bl	8000220 <MX_AES_Init>
  MX_CRC_Init();
 800051c:	f7ff ff1c 	bl	8000358 <MX_CRC_Init>
  MX_SPI1_Init();
 8000520:	f000 f87c 	bl	800061c <MX_SPI1_Init>
  MX_WWDG_Init();
 8000524:	f000 f9fe 	bl	8000924 <MX_WWDG_Init>
  MX_USB_Device_Init();
 8000528:	f00b ff14 	bl	800c354 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800052c:	f009 f98e 	bl	800984c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000530:	f7ff fef6 	bl	8000320 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000534:	f009 f9ae 	bl	8009894 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000538:	e7fe      	b.n	8000538 <main+0x30>

0800053a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b094      	sub	sp, #80	; 0x50
 800053e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	2238      	movs	r2, #56	; 0x38
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f00c fc2f 	bl	800cdac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000560:	f002 fdee 	bl	8003140 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000564:	2302      	movs	r3, #2
 8000566:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000568:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2340      	movs	r3, #64	; 0x40
 8000570:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800057a:	2306      	movs	r3, #6
 800057c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 800057e:	236c      	movs	r3, #108	; 0x6c
 8000580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000586:	2306      	movs	r3, #6
 8000588:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058a:	2302      	movs	r3, #2
 800058c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fe98 	bl	80032c8 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800059e:	f000 f82b 	bl	80005f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a6:	2303      	movs	r3, #3
 80005a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b6:	1d3b      	adds	r3, r7, #4
 80005b8:	2104      	movs	r1, #4
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fa96 	bl	8003aec <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x90>
  {
    Error_Handler();
 80005c6:	f000 f817 	bl	80005f8 <Error_Handler>
  }
}
 80005ca:	bf00      	nop
 80005cc:	3750      	adds	r7, #80	; 0x50
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d101      	bne.n	80005ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005e6:	f000 faa7 	bl	8000b38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40012c00 	.word	0x40012c00

080005f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005fc:	bf00      	nop
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000620:	4b1b      	ldr	r3, [pc, #108]	; (8000690 <MX_SPI1_Init+0x74>)
 8000622:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <MX_SPI1_Init+0x78>)
 8000624:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_SPI1_Init+0x74>)
 8000628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800062c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800062e:	4b18      	ldr	r3, [pc, #96]	; (8000690 <MX_SPI1_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_SPI1_Init+0x74>)
 8000636:	f44f 7240 	mov.w	r2, #768	; 0x300
 800063a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_SPI1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_SPI1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_SPI1_Init+0x74>)
 800064a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800064e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_SPI1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_SPI1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_SPI1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <MX_SPI1_Init+0x74>)
 8000664:	2200      	movs	r2, #0
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_SPI1_Init+0x74>)
 800066a:	2207      	movs	r2, #7
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800066e:	4b08      	ldr	r3, [pc, #32]	; (8000690 <MX_SPI1_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_SPI1_Init+0x74>)
 8000676:	2208      	movs	r2, #8
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <MX_SPI1_Init+0x74>)
 800067c:	f004 f9a8 	bl	80049d0 <HAL_SPI_Init>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000686:	f7ff ffb7 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000290 	.word	0x20000290
 8000694:	40013000 	.word	0x40013000

08000698 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <HAL_SPI_MspInit+0x8c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d130      	bne.n	800071c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80006ba:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006be:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006c4:	6613      	str	r3, [r2, #96]	; 0x60
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_SPI_MspInit+0x90>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006ea:	23e0      	movs	r3, #224	; 0xe0
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ee:	2302      	movs	r3, #2
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006fa:	2305      	movs	r3, #5
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	4619      	mov	r1, r3
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f000 fd84 	bl	8001214 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2105      	movs	r1, #5
 8000710:	2023      	movs	r0, #35	; 0x23
 8000712:	f000 fafd 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000716:	2023      	movs	r0, #35	; 0x23
 8000718:	f000 fb24 	bl	8000d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	; 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40013000 	.word	0x40013000
 8000728:	40021000 	.word	0x40021000

0800072c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_MspInit+0x50>)
 8000734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <HAL_MspInit+0x50>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6613      	str	r3, [r2, #96]	; 0x60
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x50>)
 8000740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <HAL_MspInit+0x50>)
 800074c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074e:	4a0b      	ldr	r2, [pc, #44]	; (800077c <HAL_MspInit+0x50>)
 8000750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000754:	6593      	str	r3, [r2, #88]	; 0x58
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_MspInit+0x50>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800075a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	210f      	movs	r1, #15
 8000766:	f06f 0001 	mvn.w	r0, #1
 800076a:	f000 fad1 	bl	8000d10 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800076e:	f002 fd9b 	bl	80032a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08c      	sub	sp, #48	; 0x30
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000790:	2300      	movs	r3, #0
 8000792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <HAL_InitTick+0xcc>)
 8000798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800079a:	4a2c      	ldr	r2, [pc, #176]	; (800084c <HAL_InitTick+0xcc>)
 800079c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007a0:	6613      	str	r3, [r2, #96]	; 0x60
 80007a2:	4b2a      	ldr	r3, [pc, #168]	; (800084c <HAL_InitTick+0xcc>)
 80007a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ae:	f107 020c 	add.w	r2, r7, #12
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fc1b 	bl	8003ff4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80007be:	f003 fc03 	bl	8003fc8 <HAL_RCC_GetPCLK2Freq>
 80007c2:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c6:	4a22      	ldr	r2, [pc, #136]	; (8000850 <HAL_InitTick+0xd0>)
 80007c8:	fba2 2303 	umull	r2, r3, r2, r3
 80007cc:	0c9b      	lsrs	r3, r3, #18
 80007ce:	3b01      	subs	r3, #1
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <HAL_InitTick+0xd4>)
 80007d4:	4a20      	ldr	r2, [pc, #128]	; (8000858 <HAL_InitTick+0xd8>)
 80007d6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <HAL_InitTick+0xd4>)
 80007da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007de:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007e0:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <HAL_InitTick+0xd4>)
 80007e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <HAL_InitTick+0xd4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_InitTick+0xd4>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80007f2:	4818      	ldr	r0, [pc, #96]	; (8000854 <HAL_InitTick+0xd4>)
 80007f4:	f004 fc0a 	bl	800500c <HAL_TIM_Base_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000802:	2b00      	cmp	r3, #0
 8000804:	d11b      	bne.n	800083e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000806:	4813      	ldr	r0, [pc, #76]	; (8000854 <HAL_InitTick+0xd4>)
 8000808:	f004 fcf4 	bl	80051f4 <HAL_TIM_Base_Start_IT>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000816:	2b00      	cmp	r3, #0
 8000818:	d111      	bne.n	800083e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800081a:	2019      	movs	r0, #25
 800081c:	f000 faa2 	bl	8000d64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b0f      	cmp	r3, #15
 8000824:	d808      	bhi.n	8000838 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000826:	2200      	movs	r2, #0
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	2019      	movs	r0, #25
 800082c:	f000 fa70 	bl	8000d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_InitTick+0xdc>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	e002      	b.n	800083e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800083e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000842:	4618      	mov	r0, r3
 8000844:	3730      	adds	r7, #48	; 0x30
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	431bde83 	.word	0x431bde83
 8000854:	200002f4 	.word	0x200002f4
 8000858:	40012c00 	.word	0x40012c00
 800085c:	20000004 	.word	0x20000004

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <WWDG_IRQHandler+0x10>)
 800089a:	f005 f883 	bl	80059a4 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000340 	.word	0x20000340

080008a8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USB_LP_IRQHandler+0x10>)
 80008ae:	f001 f81b 	bl	80018e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20003258 	.word	0x20003258

080008bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80008c2:	f004 fd57 	bl	8005374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200002f4 	.word	0x200002f4

080008d0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80008d4:	4802      	ldr	r0, [pc, #8]	; (80008e0 <SPI1_IRQHandler+0x10>)
 80008d6:	f004 fa79 	bl	8004dcc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000290 	.word	0x20000290

080008e4 <USBWakeUp_IRQHandler>:

/**
  * @brief This function handles USB wake-up interrupt through EXTI line 18.
  */
void USBWakeUp_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USBWakeUp_IRQn 0 */

  /* USER CODE END USBWakeUp_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <USBWakeUp_IRQHandler+0x10>)
 80008ea:	f000 fffd 	bl	80018e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USBWakeUp_IRQn 1 */

  /* USER CODE END USBWakeUp_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20003258 	.word	0x20003258

080008f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <SystemInit+0x28>)
 80008fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <SystemInit+0x28>)
 8000904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <SystemInit+0x28>)
 800090e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000912:	609a      	str	r2, [r3, #8]
#endif
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_WWDG_Init+0x38>)
 800092a:	4a0d      	ldr	r2, [pc, #52]	; (8000960 <MX_WWDG_Init+0x3c>)
 800092c:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_WWDG_Init+0x38>)
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_WWDG_Init+0x38>)
 8000936:	2240      	movs	r2, #64	; 0x40
 8000938:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_WWDG_Init+0x38>)
 800093c:	2240      	movs	r2, #64	; 0x40
 800093e:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_WWDG_Init+0x38>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_WWDG_Init+0x38>)
 8000948:	f004 ffaa 	bl	80058a0 <HAL_WWDG_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 8000952:	f7ff fe51 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000340 	.word	0x20000340
 8000960:	40002c00 	.word	0x40002c00

08000964 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <HAL_WWDG_MspInit+0x44>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d113      	bne.n	800099e <HAL_WWDG_MspInit+0x3a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <HAL_WWDG_MspInit+0x48>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097a:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <HAL_WWDG_MspInit+0x48>)
 800097c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000980:	6593      	str	r3, [r2, #88]	; 0x58
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_WWDG_MspInit+0x48>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]

    /* WWDG interrupt Init */
    HAL_NVIC_SetPriority(WWDG_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	2000      	movs	r0, #0
 8000994:	f000 f9bc 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WWDG_IRQn);
 8000998:	2000      	movs	r0, #0
 800099a:	f000 f9e3 	bl	8000d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 800099e:	bf00      	nop
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40002c00 	.word	0x40002c00
 80009ac:	40021000 	.word	0x40021000

080009b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <LoopForever+0x6>)
  ldr r1, =_edata
 80009b6:	490e      	ldr	r1, [pc, #56]	; (80009f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b8:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <LoopForever+0xe>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009bc:	e002      	b.n	80009c4 <LoopCopyDataInit>

080009be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c2:	3304      	adds	r3, #4

080009c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c8:	d3f9      	bcc.n	80009be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ca:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009cc:	4c0b      	ldr	r4, [pc, #44]	; (80009fc <LoopForever+0x16>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d0:	e001      	b.n	80009d6 <LoopFillZerobss>

080009d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d4:	3204      	adds	r2, #4

080009d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d8:	d3fb      	bcc.n	80009d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009da:	f7ff ff8d 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009de:	f00c f9b3 	bl	800cd48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009e2:	f7ff fd91 	bl	8000508 <main>

080009e6 <LoopForever>:

LoopForever:
    b LoopForever
 80009e6:	e7fe      	b.n	80009e6 <LoopForever>
  ldr   r0, =_estack
 80009e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80009f4:	0800d38c 	.word	0x0800d38c
  ldr r2, =_sbss
 80009f8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80009fc:	20003770 	.word	0x20003770

08000a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_2_IRQHandler>

08000a02 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b084      	sub	sp, #16
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d104      	bne.n	8000a1a <stm32_lock_acquire+0x18>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
 8000a14:	f7ff fdf0 	bl	80005f8 <Error_Handler>
 8000a18:	e7fe      	b.n	8000a18 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7a1b      	ldrb	r3, [r3, #8]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d904      	bls.n	8000a2c <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a22:	b672      	cpsid	i
}
 8000a24:	bf00      	nop
 8000a26:	f7ff fde7 	bl	80005f8 <Error_Handler>
 8000a2a:	e7fe      	b.n	8000a2a <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7a1b      	ldrb	r3, [r3, #8]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	b2d1      	uxtb	r1, r2
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	7211      	strb	r1, [r2, #8]
 8000a38:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8000a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a42:	f383 8811 	msr	BASEPRI, r3
 8000a46:	f3bf 8f6f 	isb	sy
 8000a4a:	f3bf 8f4f 	dsb	sy
 8000a4e:	60fa      	str	r2, [r7, #12]
 8000a50:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b084      	sub	sp, #16
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d104      	bne.n	8000a7a <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a70:	b672      	cpsid	i
}
 8000a72:	bf00      	nop
 8000a74:	f7ff fdc0 	bl	80005f8 <Error_Handler>
 8000a78:	e7fe      	b.n	8000a78 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	7a1b      	ldrb	r3, [r3, #8]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7a1b      	ldrb	r3, [r3, #8]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d904      	bls.n	8000a98 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
}
 8000a90:	bf00      	nop
 8000a92:	f7ff fdb1 	bl	80005f8 <Error_Handler>
 8000a96:	e7fe      	b.n	8000a96 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	7a1b      	ldrb	r3, [r3, #8]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aa4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000aac:	bf00      	nop
}
 8000aae:	bf00      	nop
 8000ab0:	3710      	adds	r7, #16
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d104      	bne.n	8000ace <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
 8000ac8:	f7ff fd96 	bl	80005f8 <Error_Handler>
 8000acc:	e7fe      	b.n	8000acc <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff96 	bl	8000a02 <stm32_lock_acquire>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d104      	bne.n	8000af6 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000aec:	b672      	cpsid	i
}
 8000aee:	bf00      	nop
 8000af0:	f7ff fd82 	bl	80005f8 <Error_Handler>
 8000af4:	e7fe      	b.n	8000af4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ffb2 	bl	8000a62 <stm32_lock_release>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f8dd 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b16:	200f      	movs	r0, #15
 8000b18:	f7ff fe32 	bl	8000780 <HAL_InitTick>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d002      	beq.n	8000b28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	e001      	b.n	8000b2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b28:	f7ff fe00 	bl	800072c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]

}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x20>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4413      	add	r3, r2
 8000b46:	4a03      	ldr	r2, [pc, #12]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b48:	6013      	str	r3, [r2, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	20000360 	.word	0x20000360
 8000b58:	20000008 	.word	0x20000008

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	20000360 	.word	0x20000360

08000b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b8a:	68ba      	ldr	r2, [r7, #8]
 8000b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b90:	4013      	ands	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ba6:	4a04      	ldr	r2, [pc, #16]	; (8000bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	60d3      	str	r3, [r2, #12]
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc0:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	f003 0307 	and.w	r3, r3, #7
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	e000ed00 	.word	0xe000ed00

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db0b      	blt.n	8000c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	f003 021f 	and.w	r2, r3, #31
 8000bf0:	4907      	ldr	r1, [pc, #28]	; (8000c10 <__NVIC_EnableIRQ+0x38>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	e000e100 	.word	0xe000e100

08000c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	6039      	str	r1, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	db0a      	blt.n	8000c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	490c      	ldr	r1, [pc, #48]	; (8000c60 <__NVIC_SetPriority+0x4c>)
 8000c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c32:	0112      	lsls	r2, r2, #4
 8000c34:	b2d2      	uxtb	r2, r2
 8000c36:	440b      	add	r3, r1
 8000c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c3c:	e00a      	b.n	8000c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4908      	ldr	r1, [pc, #32]	; (8000c64 <__NVIC_SetPriority+0x50>)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	f003 030f 	and.w	r3, r3, #15
 8000c4a:	3b04      	subs	r3, #4
 8000c4c:	0112      	lsls	r2, r2, #4
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	440b      	add	r3, r1
 8000c52:	761a      	strb	r2, [r3, #24]
}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b089      	sub	sp, #36	; 0x24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	f1c3 0307 	rsb	r3, r3, #7
 8000c82:	2b04      	cmp	r3, #4
 8000c84:	bf28      	it	cs
 8000c86:	2304      	movcs	r3, #4
 8000c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d902      	bls.n	8000c98 <NVIC_EncodePriority+0x30>
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3b03      	subs	r3, #3
 8000c96:	e000      	b.n	8000c9a <NVIC_EncodePriority+0x32>
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	401a      	ands	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cba:	43d9      	mvns	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc0:	4313      	orrs	r3, r2
         );
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3724      	adds	r7, #36	; 0x24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b07      	cmp	r3, #7
 8000cdc:	d00f      	beq.n	8000cfe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d00c      	beq.n	8000cfe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b05      	cmp	r3, #5
 8000ce8:	d009      	beq.n	8000cfe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d006      	beq.n	8000cfe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d003      	beq.n	8000cfe <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000cf6:	21a6      	movs	r1, #166	; 0xa6
 8000cf8:	4804      	ldr	r0, [pc, #16]	; (8000d0c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000cfa:	f7ff fc84 	bl	8000606 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ff38 	bl	8000b74 <__NVIC_SetPriorityGrouping>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	0800cf64 	.word	0x0800cf64

08000d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d903      	bls.n	8000d2c <HAL_NVIC_SetPriority+0x1c>
 8000d24:	21be      	movs	r1, #190	; 0xbe
 8000d26:	480e      	ldr	r0, [pc, #56]	; (8000d60 <HAL_NVIC_SetPriority+0x50>)
 8000d28:	f7ff fc6d 	bl	8000606 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d903      	bls.n	8000d3a <HAL_NVIC_SetPriority+0x2a>
 8000d32:	21bf      	movs	r1, #191	; 0xbf
 8000d34:	480a      	ldr	r0, [pc, #40]	; (8000d60 <HAL_NVIC_SetPriority+0x50>)
 8000d36:	f7ff fc66 	bl	8000606 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d3a:	f7ff ff3f 	bl	8000bbc <__NVIC_GetPriorityGrouping>
 8000d3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	6978      	ldr	r0, [r7, #20]
 8000d46:	f7ff ff8f 	bl	8000c68 <NVIC_EncodePriority>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d50:	4611      	mov	r1, r2
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff5e 	bl	8000c14 <__NVIC_SetPriority>
}
 8000d58:	bf00      	nop
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800cf64 	.word	0x0800cf64

08000d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	da03      	bge.n	8000d7e <HAL_NVIC_EnableIRQ+0x1a>
 8000d76:	21d2      	movs	r1, #210	; 0xd2
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <HAL_NVIC_EnableIRQ+0x2c>)
 8000d7a:	f7ff fc44 	bl	8000606 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff28 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	0800cf64 	.word	0x0800cf64

08000d94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e0a5      	b.n	8000ef2 <HAL_CRC_Init+0x15e>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a54      	ldr	r2, [pc, #336]	; (8000efc <HAL_CRC_Init+0x168>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d003      	beq.n	8000db8 <HAL_CRC_Init+0x24>
 8000db0:	2170      	movs	r1, #112	; 0x70
 8000db2:	4853      	ldr	r0, [pc, #332]	; (8000f00 <HAL_CRC_Init+0x16c>)
 8000db4:	f7ff fc27 	bl	8000606 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7f5b      	ldrb	r3, [r3, #29]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d105      	bne.n	8000dce <HAL_CRC_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fae7 	bl	800039c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	791b      	ldrb	r3, [r3, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d007      	beq.n	8000dec <HAL_CRC_Init+0x58>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	791b      	ldrb	r3, [r3, #4]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d003      	beq.n	8000dec <HAL_CRC_Init+0x58>
 8000de4:	217e      	movs	r1, #126	; 0x7e
 8000de6:	4846      	ldr	r0, [pc, #280]	; (8000f00 <HAL_CRC_Init+0x16c>)
 8000de8:	f7ff fc0d 	bl	8000606 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	791b      	ldrb	r3, [r3, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10c      	bne.n	8000e0e <HAL_CRC_Init+0x7a>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a42      	ldr	r2, [pc, #264]	; (8000f04 <HAL_CRC_Init+0x170>)
 8000dfa:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0218 	bic.w	r2, r2, #24
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	e00c      	b.n	8000e28 <HAL_CRC_Init+0x94>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6899      	ldr	r1, [r3, #8]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	461a      	mov	r2, r3
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f875 	bl	8000f08 <HAL_CRCEx_Polynomial_Set>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_CRC_Init+0x94>
    {
      return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e064      	b.n	8000ef2 <HAL_CRC_Init+0x15e>
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	795b      	ldrb	r3, [r3, #5]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d007      	beq.n	8000e40 <HAL_CRC_Init+0xac>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	795b      	ldrb	r3, [r3, #5]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d003      	beq.n	8000e40 <HAL_CRC_Init+0xac>
 8000e38:	2190      	movs	r1, #144	; 0x90
 8000e3a:	4831      	ldr	r0, [pc, #196]	; (8000f00 <HAL_CRC_Init+0x16c>)
 8000e3c:	f7ff fbe3 	bl	8000606 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	795b      	ldrb	r3, [r3, #5]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d105      	bne.n	8000e54 <HAL_CRC_Init+0xc0>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e50:	611a      	str	r2, [r3, #16]
 8000e52:	e004      	b.n	8000e5e <HAL_CRC_Init+0xca>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	6912      	ldr	r2, [r2, #16]
 8000e5c:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d00f      	beq.n	8000e86 <HAL_CRC_Init+0xf2>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	2b20      	cmp	r3, #32
 8000e6c:	d00b      	beq.n	8000e86 <HAL_CRC_Init+0xf2>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	2b40      	cmp	r3, #64	; 0x40
 8000e74:	d007      	beq.n	8000e86 <HAL_CRC_Init+0xf2>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	2b60      	cmp	r3, #96	; 0x60
 8000e7c:	d003      	beq.n	8000e86 <HAL_CRC_Init+0xf2>
 8000e7e:	219c      	movs	r1, #156	; 0x9c
 8000e80:	481f      	ldr	r0, [pc, #124]	; (8000f00 <HAL_CRC_Init+0x16c>)
 8000e82:	f7ff fbc0 	bl	8000606 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	695a      	ldr	r2, [r3, #20]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d007      	beq.n	8000eb4 <HAL_CRC_Init+0x120>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	2b80      	cmp	r3, #128	; 0x80
 8000eaa:	d003      	beq.n	8000eb4 <HAL_CRC_Init+0x120>
 8000eac:	21a0      	movs	r1, #160	; 0xa0
 8000eae:	4814      	ldr	r0, [pc, #80]	; (8000f00 <HAL_CRC_Init+0x16c>)
 8000eb0:	f7ff fba9 	bl	8000606 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	609a      	str	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d00b      	beq.n	8000eea <HAL_CRC_Init+0x156>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6a1b      	ldr	r3, [r3, #32]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d007      	beq.n	8000eea <HAL_CRC_Init+0x156>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d003      	beq.n	8000eea <HAL_CRC_Init+0x156>
 8000ee2:	21a5      	movs	r1, #165	; 0xa5
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <HAL_CRC_Init+0x16c>)
 8000ee6:	f7ff fb8e 	bl	8000606 <assert_failed>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2201      	movs	r2, #1
 8000eee:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023000 	.word	0x40023000
 8000f00:	0800cfa0 	.word	0x0800cfa0
 8000f04:	04c11db7 	.word	0x04c11db7

08000f08 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000f18:	231f      	movs	r3, #31
 8000f1a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00c      	beq.n	8000f3c <HAL_CRCEx_Polynomial_Set+0x34>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d009      	beq.n	8000f3c <HAL_CRCEx_Polynomial_Set+0x34>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b10      	cmp	r3, #16
 8000f2c:	d006      	beq.n	8000f3c <HAL_CRCEx_Polynomial_Set+0x34>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b18      	cmp	r3, #24
 8000f32:	d003      	beq.n	8000f3c <HAL_CRCEx_Polynomial_Set+0x34>
 8000f34:	215f      	movs	r1, #95	; 0x5f
 8000f36:	483e      	ldr	r0, [pc, #248]	; (8001030 <HAL_CRCEx_Polynomial_Set+0x128>)
 8000f38:	f7ff fb65 	bl	8000606 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000f3c:	bf00      	nop
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1e5a      	subs	r2, r3, #1
 8000f42:	613a      	str	r2, [r7, #16]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d009      	beq.n	8000f5c <HAL_CRCEx_Polynomial_Set+0x54>
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	f003 031f 	and.w	r3, r3, #31
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	fa22 f303 	lsr.w	r3, r2, r3
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_CRCEx_Polynomial_Set+0x36>
  {
  }

  switch (PolyLength)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b18      	cmp	r3, #24
 8000f60:	d846      	bhi.n	8000ff0 <HAL_CRCEx_Polynomial_Set+0xe8>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <HAL_CRCEx_Polynomial_Set+0x60>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000ff7 	.word	0x08000ff7
 8000f6c:	08000ff1 	.word	0x08000ff1
 8000f70:	08000ff1 	.word	0x08000ff1
 8000f74:	08000ff1 	.word	0x08000ff1
 8000f78:	08000ff1 	.word	0x08000ff1
 8000f7c:	08000ff1 	.word	0x08000ff1
 8000f80:	08000ff1 	.word	0x08000ff1
 8000f84:	08000ff1 	.word	0x08000ff1
 8000f88:	08000fe5 	.word	0x08000fe5
 8000f8c:	08000ff1 	.word	0x08000ff1
 8000f90:	08000ff1 	.word	0x08000ff1
 8000f94:	08000ff1 	.word	0x08000ff1
 8000f98:	08000ff1 	.word	0x08000ff1
 8000f9c:	08000ff1 	.word	0x08000ff1
 8000fa0:	08000ff1 	.word	0x08000ff1
 8000fa4:	08000ff1 	.word	0x08000ff1
 8000fa8:	08000fd9 	.word	0x08000fd9
 8000fac:	08000ff1 	.word	0x08000ff1
 8000fb0:	08000ff1 	.word	0x08000ff1
 8000fb4:	08000ff1 	.word	0x08000ff1
 8000fb8:	08000ff1 	.word	0x08000ff1
 8000fbc:	08000ff1 	.word	0x08000ff1
 8000fc0:	08000ff1 	.word	0x08000ff1
 8000fc4:	08000ff1 	.word	0x08000ff1
 8000fc8:	08000fcd 	.word	0x08000fcd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d913      	bls.n	8000ffa <HAL_CRCEx_Polynomial_Set+0xf2>
      {
        status =   HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000fd6:	e010      	b.n	8000ffa <HAL_CRCEx_Polynomial_Set+0xf2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	2b07      	cmp	r3, #7
 8000fdc:	d90f      	bls.n	8000ffe <HAL_CRCEx_Polynomial_Set+0xf6>
      {
        status =   HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000fe2:	e00c      	b.n	8000ffe <HAL_CRCEx_Polynomial_Set+0xf6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	2b0f      	cmp	r3, #15
 8000fe8:	d90b      	bls.n	8001002 <HAL_CRCEx_Polynomial_Set+0xfa>
      {
        status =   HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000fee:	e008      	b.n	8001002 <HAL_CRCEx_Polynomial_Set+0xfa>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8000ff4:	e006      	b.n	8001004 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8000ff6:	bf00      	nop
 8000ff8:	e004      	b.n	8001004 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8000ffa:	bf00      	nop
 8000ffc:	e002      	b.n	8001004 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8000ffe:	bf00      	nop
 8001000:	e000      	b.n	8001004 <HAL_CRCEx_Polynomial_Set+0xfc>
      break;
 8001002:	bf00      	nop
  }
  if (status == HAL_OK)
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10d      	bne.n	8001026 <HAL_CRCEx_Polynomial_Set+0x11e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f023 0118 	bic.w	r1, r3, #24
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	430a      	orrs	r2, r1
 8001024:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001026:	7dfb      	ldrb	r3, [r7, #23]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	0800cfd8 	.word	0x0800cfd8

08001034 <HAL_CRYP_Init>:
  * @param  hcryp pointer to a CRYP_HandleTypeDef structure that contains
  *         the configuration information for CRYP module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYP_Init(CRYP_HandleTypeDef *hcryp)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the CRYP handle allocation */
  if (hcryp == NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d101      	bne.n	8001046 <HAL_CRYP_Init+0x12>
  {
    return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e077      	b.n	8001136 <HAL_CRYP_Init+0x102>
  }

  /* Check parameters */
  assert_param(IS_CRYP_KEYSIZE(hcryp->Init.KeySize));
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d009      	beq.n	8001062 <HAL_CRYP_Init+0x2e>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001056:	d004      	beq.n	8001062 <HAL_CRYP_Init+0x2e>
 8001058:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800105c:	4838      	ldr	r0, [pc, #224]	; (8001140 <HAL_CRYP_Init+0x10c>)
 800105e:	f7ff fad2 	bl	8000606 <assert_failed>
  assert_param(IS_CRYP_DATATYPE(hcryp->Init.DataType));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d010      	beq.n	800108c <HAL_CRYP_Init+0x58>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d00c      	beq.n	800108c <HAL_CRYP_Init+0x58>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b04      	cmp	r3, #4
 8001078:	d008      	beq.n	800108c <HAL_CRYP_Init+0x58>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b06      	cmp	r3, #6
 8001080:	d004      	beq.n	800108c <HAL_CRYP_Init+0x58>
 8001082:	f240 11c9 	movw	r1, #457	; 0x1c9
 8001086:	482e      	ldr	r0, [pc, #184]	; (8001140 <HAL_CRYP_Init+0x10c>)
 8001088:	f7ff fabd 	bl	8000606 <assert_failed>
  assert_param(IS_CRYP_ALGORITHM(hcryp->Init.Algorithm));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d015      	beq.n	80010c0 <HAL_CRYP_Init+0x8c>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	2b20      	cmp	r3, #32
 800109a:	d011      	beq.n	80010c0 <HAL_CRYP_Init+0x8c>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	2b40      	cmp	r3, #64	; 0x40
 80010a2:	d00d      	beq.n	80010c0 <HAL_CRYP_Init+0x8c>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	695b      	ldr	r3, [r3, #20]
 80010a8:	2b60      	cmp	r3, #96	; 0x60
 80010aa:	d009      	beq.n	80010c0 <HAL_CRYP_Init+0x8c>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b4:	d004      	beq.n	80010c0 <HAL_CRYP_Init+0x8c>
 80010b6:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
 80010ba:	4821      	ldr	r0, [pc, #132]	; (8001140 <HAL_CRYP_Init+0x10c>)
 80010bc:	f7ff faa3 	bl	8000606 <assert_failed>
  assert_param(IS_CRYP_INIT(hcryp->Init.KeyIVConfigSkip));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <HAL_CRYP_Init+0xa6>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d004      	beq.n	80010da <HAL_CRYP_Init+0xa6>
 80010d0:	f240 11cb 	movw	r1, #459	; 0x1cb
 80010d4:	481a      	ldr	r0, [pc, #104]	; (8001140 <HAL_CRYP_Init+0x10c>)
 80010d6:	f7ff fa96 	bl	8000606 <assert_failed>

    /* Init the low level hardware */
    hcryp->MspInitCallback(hcryp);
  }
#else
  if (hcryp->State == HAL_CRYP_STATE_RESET)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d106      	bne.n	80010f4 <HAL_CRYP_Init+0xc0>
  {
    /* Allocate lock resource and initialize it */
    hcryp->Lock = HAL_UNLOCKED;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    HAL_CRYP_MspInit(hcryp);
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff f8c0 	bl	8000274 <HAL_CRYP_MspInit>
  }
#endif /* (USE_HAL_CRYP_REGISTER_CALLBACKS) */

  /* Set the key size (This bit field is do not care in the DES or TDES modes), data type and Algorithm */
  MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE | AES_CR_KEYSIZE | AES_CR_CHMOD, hcryp->Init.DataType | hcryp->Init.KeySize | hcryp->Init.Algorithm);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 80010fe:	f023 0366 	bic.w	r3, r3, #102	; 0x66
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6851      	ldr	r1, [r2, #4]
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	6892      	ldr	r2, [r2, #8]
 800110a:	4311      	orrs	r1, r2
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6952      	ldr	r2, [r2, #20]
 8001110:	4311      	orrs	r1, r2
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	430b      	orrs	r3, r1
 8001118:	6013      	str	r3, [r2, #0]

  /* Reset Error Code field */
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset peripheral Key and IV configuration flag */
  hcryp->KeyIVConfig = 0U;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	659a      	str	r2, [r3, #88]	; 0x58

  /* Change the CRYP state */
  hcryp->State = HAL_CRYP_STATE_READY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Set the default CRYP phase */
  hcryp->Phase = CRYP_PHASE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	0800d014 	.word	0x0800d014

08001144 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d00d      	beq.n	8001178 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2204      	movs	r2, #4
 8001160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e047      	b.n	8001208 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f022 020e 	bic.w	r2, r2, #14
 8001186:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0201 	bic.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011c4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00c      	beq.n	80011e8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011dc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011e6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	4798      	blx	r3
    }
  }
  return status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001228:	d01b      	beq.n	8001262 <HAL_GPIO_Init+0x4e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a38      	ldr	r2, [pc, #224]	; (8001310 <HAL_GPIO_Init+0xfc>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d017      	beq.n	8001262 <HAL_GPIO_Init+0x4e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a37      	ldr	r2, [pc, #220]	; (8001314 <HAL_GPIO_Init+0x100>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x4e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a36      	ldr	r2, [pc, #216]	; (8001318 <HAL_GPIO_Init+0x104>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00f      	beq.n	8001262 <HAL_GPIO_Init+0x4e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a35      	ldr	r2, [pc, #212]	; (800131c <HAL_GPIO_Init+0x108>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d00b      	beq.n	8001262 <HAL_GPIO_Init+0x4e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a34      	ldr	r2, [pc, #208]	; (8001320 <HAL_GPIO_Init+0x10c>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d007      	beq.n	8001262 <HAL_GPIO_Init+0x4e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a33      	ldr	r2, [pc, #204]	; (8001324 <HAL_GPIO_Init+0x110>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x4e>
 800125a:	21a9      	movs	r1, #169	; 0xa9
 800125c:	4832      	ldr	r0, [pc, #200]	; (8001328 <HAL_GPIO_Init+0x114>)
 800125e:	f7ff f9d2 	bl	8000606 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <HAL_GPIO_Init+0x64>
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	041b      	lsls	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x6c>
 8001278:	21aa      	movs	r1, #170	; 0xaa
 800127a:	482b      	ldr	r0, [pc, #172]	; (8001328 <HAL_GPIO_Init+0x114>)
 800127c:	f7ff f9c3 	bl	8000606 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	f000 820a 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	f000 8205 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b11      	cmp	r3, #17
 800129a:	f000 8200 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	f000 81fb 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b12      	cmp	r3, #18
 80012ae:	f000 81f6 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80012ba:	f000 81f0 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80012c6:	f000 81ea 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80012d2:	f000 81e4 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80012de:	f000 81de 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80012ea:	f000 81d8 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80012f6:	f000 81d2 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	2b03      	cmp	r3, #3
 8001300:	f000 81cd 	beq.w	800169e <HAL_GPIO_Init+0x48a>
 8001304:	21ab      	movs	r1, #171	; 0xab
 8001306:	4808      	ldr	r0, [pc, #32]	; (8001328 <HAL_GPIO_Init+0x114>)
 8001308:	f7ff f97d 	bl	8000606 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800130c:	e1c7      	b.n	800169e <HAL_GPIO_Init+0x48a>
 800130e:	bf00      	nop
 8001310:	48000400 	.word	0x48000400
 8001314:	48000800 	.word	0x48000800
 8001318:	48000c00 	.word	0x48000c00
 800131c:	48001000 	.word	0x48001000
 8001320:	48001400 	.word	0x48001400
 8001324:	48001800 	.word	0x48001800
 8001328:	0800d080 	.word	0x0800d080
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2101      	movs	r1, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 81aa 	beq.w	8001698 <HAL_GPIO_Init+0x484>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d005      	beq.n	800135c <HAL_GPIO_Init+0x148>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001358:	2b02      	cmp	r3, #2
 800135a:	d144      	bne.n	80013e6 <HAL_GPIO_Init+0x1d2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00f      	beq.n	8001384 <HAL_GPIO_Init+0x170>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d00b      	beq.n	8001384 <HAL_GPIO_Init+0x170>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d007      	beq.n	8001384 <HAL_GPIO_Init+0x170>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d003      	beq.n	8001384 <HAL_GPIO_Init+0x170>
 800137c:	21bb      	movs	r1, #187	; 0xbb
 800137e:	488b      	ldr	r0, [pc, #556]	; (80015ac <HAL_GPIO_Init+0x398>)
 8001380:	f7ff f941 	bl	8000606 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013ba:	2201      	movs	r2, #1
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f003 0201 	and.w	r2, r3, #1
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d027      	beq.n	8001442 <HAL_GPIO_Init+0x22e>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00b      	beq.n	8001412 <HAL_GPIO_Init+0x1fe>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x1fe>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x1fe>
 800140a:	21cc      	movs	r1, #204	; 0xcc
 800140c:	4867      	ldr	r0, [pc, #412]	; (80015ac <HAL_GPIO_Init+0x398>)
 800140e:	f7ff f8fa 	bl	8000606 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d14b      	bne.n	80014e6 <HAL_GPIO_Init+0x2d2>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001454:	d01b      	beq.n	800148e <HAL_GPIO_Init+0x27a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a55      	ldr	r2, [pc, #340]	; (80015b0 <HAL_GPIO_Init+0x39c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d017      	beq.n	800148e <HAL_GPIO_Init+0x27a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a54      	ldr	r2, [pc, #336]	; (80015b4 <HAL_GPIO_Init+0x3a0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d013      	beq.n	800148e <HAL_GPIO_Init+0x27a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a53      	ldr	r2, [pc, #332]	; (80015b8 <HAL_GPIO_Init+0x3a4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d00f      	beq.n	800148e <HAL_GPIO_Init+0x27a>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a52      	ldr	r2, [pc, #328]	; (80015bc <HAL_GPIO_Init+0x3a8>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d00b      	beq.n	800148e <HAL_GPIO_Init+0x27a>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a51      	ldr	r2, [pc, #324]	; (80015c0 <HAL_GPIO_Init+0x3ac>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d007      	beq.n	800148e <HAL_GPIO_Init+0x27a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a50      	ldr	r2, [pc, #320]	; (80015c4 <HAL_GPIO_Init+0x3b0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x27a>
 8001486:	21d9      	movs	r1, #217	; 0xd9
 8001488:	4848      	ldr	r0, [pc, #288]	; (80015ac <HAL_GPIO_Init+0x398>)
 800148a:	f7ff f8bc 	bl	8000606 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b0f      	cmp	r3, #15
 8001494:	d903      	bls.n	800149e <HAL_GPIO_Init+0x28a>
 8001496:	21da      	movs	r1, #218	; 0xda
 8001498:	4844      	ldr	r0, [pc, #272]	; (80015ac <HAL_GPIO_Init+0x398>)
 800149a:	f7ff f8b4 	bl	8000606 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	f003 0307 	and.w	r3, r3, #7
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	6939      	ldr	r1, [r7, #16]
 80014e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0203 	and.w	r2, r3, #3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 80b8 	beq.w	8001698 <HAL_GPIO_Init+0x484>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001528:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_GPIO_Init+0x3b4>)
 800152a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800152c:	4a26      	ldr	r2, [pc, #152]	; (80015c8 <HAL_GPIO_Init+0x3b4>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6613      	str	r3, [r2, #96]	; 0x60
 8001534:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <HAL_GPIO_Init+0x3b4>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <HAL_GPIO_Init+0x3b8>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	220f      	movs	r2, #15
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800156a:	d031      	beq.n	80015d0 <HAL_GPIO_Init+0x3bc>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_GPIO_Init+0x39c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d019      	beq.n	80015a8 <HAL_GPIO_Init+0x394>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a0f      	ldr	r2, [pc, #60]	; (80015b4 <HAL_GPIO_Init+0x3a0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d013      	beq.n	80015a4 <HAL_GPIO_Init+0x390>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_GPIO_Init+0x3a4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d00d      	beq.n	80015a0 <HAL_GPIO_Init+0x38c>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <HAL_GPIO_Init+0x3a8>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d007      	beq.n	800159c <HAL_GPIO_Init+0x388>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <HAL_GPIO_Init+0x3ac>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d101      	bne.n	8001598 <HAL_GPIO_Init+0x384>
 8001594:	2305      	movs	r3, #5
 8001596:	e01c      	b.n	80015d2 <HAL_GPIO_Init+0x3be>
 8001598:	2306      	movs	r3, #6
 800159a:	e01a      	b.n	80015d2 <HAL_GPIO_Init+0x3be>
 800159c:	2304      	movs	r3, #4
 800159e:	e018      	b.n	80015d2 <HAL_GPIO_Init+0x3be>
 80015a0:	2303      	movs	r3, #3
 80015a2:	e016      	b.n	80015d2 <HAL_GPIO_Init+0x3be>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e014      	b.n	80015d2 <HAL_GPIO_Init+0x3be>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e012      	b.n	80015d2 <HAL_GPIO_Init+0x3be>
 80015ac:	0800d080 	.word	0x0800d080
 80015b0:	48000400 	.word	0x48000400
 80015b4:	48000800 	.word	0x48000800
 80015b8:	48000c00 	.word	0x48000c00
 80015bc:	48001000 	.word	0x48001000
 80015c0:	48001400 	.word	0x48001400
 80015c4:	48001800 	.word	0x48001800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40010000 	.word	0x40010000
 80015d0:	2300      	movs	r3, #0
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	f002 0203 	and.w	r2, r2, #3
 80015d8:	0092      	lsls	r2, r2, #2
 80015da:	4093      	lsls	r3, r2
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e2:	4935      	ldr	r1, [pc, #212]	; (80016b8 <HAL_GPIO_Init+0x4a4>)
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3302      	adds	r3, #2
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f0:	4b32      	ldr	r3, [pc, #200]	; (80016bc <HAL_GPIO_Init+0x4a8>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x400>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001614:	4a29      	ldr	r2, [pc, #164]	; (80016bc <HAL_GPIO_Init+0x4a8>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800161a:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_GPIO_Init+0x4a8>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x42a>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800163e:	4a1f      	ldr	r2, [pc, #124]	; (80016bc <HAL_GPIO_Init+0x4a8>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <HAL_GPIO_Init+0x4a8>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x454>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <HAL_GPIO_Init+0x4a8>)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_GPIO_Init+0x4a8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43db      	mvns	r3, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x47e>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001692:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_GPIO_Init+0x4a8>)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	3301      	adds	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	fa22 f303 	lsr.w	r3, r2, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f47f ae3f 	bne.w	800132c <HAL_GPIO_Init+0x118>
  }
}
 80016ae:	bf00      	nop
 80016b0:	bf00      	nop
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016c2:	b08b      	sub	sp, #44	; 0x2c
 80016c4:	af06      	add	r7, sp, #24
 80016c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0e0      	b.n	8001894 <HAL_PCD_Init+0x1d4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a71      	ldr	r2, [pc, #452]	; (800189c <HAL_PCD_Init+0x1dc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d003      	beq.n	80016e4 <HAL_PCD_Init+0x24>
 80016dc:	2187      	movs	r1, #135	; 0x87
 80016de:	4870      	ldr	r0, [pc, #448]	; (80018a0 <HAL_PCD_Init+0x1e0>)
 80016e0:	f7fe ff91 	bl	8000606 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d106      	bne.n	80016fe <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f00b f80b 	bl	800c714 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2203      	movs	r2, #3
 8001702:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f004 f98a 	bl	8005a24 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e04c      	b.n	80017b0 <HAL_PCD_Init+0xf0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	440b      	add	r3, r1
 8001726:	3301      	adds	r3, #1
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001740:	7bfa      	ldrb	r2, [r7, #15]
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	b298      	uxth	r0, r3
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	440b      	add	r3, r1
 8001752:	3336      	adds	r3, #54	; 0x36
 8001754:	4602      	mov	r2, r0
 8001756:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	440b      	add	r3, r1
 8001768:	3303      	adds	r3, #3
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	3338      	adds	r3, #56	; 0x38
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	440b      	add	r3, r1
 8001790:	333c      	adds	r3, #60	; 0x3c
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	440b      	add	r3, r1
 80017a4:	3340      	adds	r3, #64	; 0x40
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	3301      	adds	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d3ad      	bcc.n	8001716 <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]
 80017be:	e044      	b.n	800184a <HAL_PCD_Init+0x18a>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017c0:	7bfa      	ldrb	r2, [r7, #15]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	f203 1369 	addw	r3, r3, #361	; 0x169
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017d6:	7bfa      	ldrb	r2, [r7, #15]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	440b      	add	r3, r1
 80017e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	440b      	add	r3, r1
 80017fa:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	4413      	add	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	440b      	add	r3, r1
 8001810:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001818:	7bfa      	ldrb	r2, [r7, #15]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	440b      	add	r3, r1
 8001826:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	6879      	ldr	r1, [r7, #4]
 8001832:	4613      	mov	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	3301      	adds	r3, #1
 8001848:	73fb      	strb	r3, [r7, #15]
 800184a:	7bfa      	ldrb	r2, [r7, #15]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	d3b5      	bcc.n	80017c0 <HAL_PCD_Init+0x100>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	687e      	ldr	r6, [r7, #4]
 800185c:	466d      	mov	r5, sp
 800185e:	f106 0410 	add.w	r4, r6, #16
 8001862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001866:	6823      	ldr	r3, [r4, #0]
 8001868:	602b      	str	r3, [r5, #0]
 800186a:	1d33      	adds	r3, r6, #4
 800186c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800186e:	6838      	ldr	r0, [r7, #0]
 8001870:	f004 f8f3 	bl	8005a5a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d102      	bne.n	8001892 <HAL_PCD_Init+0x1d2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f001 fc2d 	bl	80030ec <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800189c:	40005c00 	.word	0x40005c00
 80018a0:	0800d0bc 	.word	0x0800d0bc

080018a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_PCD_Start+0x16>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e012      	b.n	80018e0 <HAL_PCD_Start+0x3c>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f004 f895 	bl	80059f6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f006 faad 	bl	8007e30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f006 fab2 	bl	8007e5e <USB_ReadInterrupts>
 80018fa:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fb26 	bl	8001f58 <PCD_EP_ISR_Handler>

    return;
 800190c:	e110      	b.n	8001b30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001920:	b29a      	uxth	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800192a:	b292      	uxth	r2, r2
 800192c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f00a ff94 	bl	800c85e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001936:	2100      	movs	r1, #0
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f8fc 	bl	8001b36 <HAL_PCD_SetAddress>

    return;
 800193e:	e0f7      	b.n	8001b30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00c      	beq.n	8001964 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800195c:	b292      	uxth	r2, r2
 800195e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001962:	e0e5      	b.n	8001b30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00c      	beq.n	8001988 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001976:	b29a      	uxth	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001980:	b292      	uxth	r2, r2
 8001982:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001986:	e0d3      	b.n	8001b30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d034      	beq.n	80019fc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800199a:	b29a      	uxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0204 	bic.w	r2, r2, #4
 80019a4:	b292      	uxth	r2, r2
 80019a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0208 	bic.w	r2, r2, #8
 80019bc:	b292      	uxth	r2, r2
 80019be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d107      	bne.n	80019dc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019d4:	2100      	movs	r1, #0
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f00b f936 	bl	800cc48 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f00a ff77 	bl	800c8d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019f4:	b292      	uxth	r2, r2
 80019f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80019fa:	e099      	b.n	8001b30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d027      	beq.n	8001a56 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0208 	orr.w	r2, r2, #8
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a30:	b292      	uxth	r2, r2
 8001a32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f042 0204 	orr.w	r2, r2, #4
 8001a48:	b292      	uxth	r2, r2
 8001a4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f00a ff24 	bl	800c89c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a54:	e06c      	b.n	8001b30 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d040      	beq.n	8001ae2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a72:	b292      	uxth	r2, r2
 8001a74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d12b      	bne.n	8001ada <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 0204 	orr.w	r2, r2, #4
 8001a94:	b292      	uxth	r2, r2
 8001a96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0208 	orr.w	r2, r2, #8
 8001aac:	b292      	uxth	r2, r2
 8001aae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f00b f8b8 	bl	800cc48 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001ad8:	e02a      	b.n	8001b30 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f00a fede 	bl	800c89c <HAL_PCD_SuspendCallback>
    return;
 8001ae0:	e026      	b.n	8001b30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d00f      	beq.n	8001b0c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001afe:	b292      	uxth	r2, r2
 8001b00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f00a fe9c 	bl	800c842 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b0a:	e011      	b.n	8001b30 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d00c      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b28:	b292      	uxth	r2, r2
 8001b2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001b2e:	bf00      	nop
  }
}
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_PCD_SetAddress+0x1a>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e013      	b.n	8001b78 <HAL_PCD_SetAddress+0x42>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f006 f94d 	bl	8007e08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	4608      	mov	r0, r1
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4603      	mov	r3, r0
 8001b90:	70fb      	strb	r3, [r7, #3]
 8001b92:	460b      	mov	r3, r1
 8001b94:	803b      	strh	r3, [r7, #0]
 8001b96:	4613      	mov	r3, r2
 8001b98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	da0e      	bge.n	8001bc4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	4613      	mov	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	705a      	strb	r2, [r3, #1]
 8001bc2:	e00e      	b.n	8001be2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001be2:	78fb      	ldrb	r3, [r7, #3]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bee:	883a      	ldrh	r2, [r7, #0]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	78ba      	ldrb	r2, [r7, #2]
 8001bf8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c0c:	78bb      	ldrb	r3, [r7, #2]
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d102      	bne.n	8001c18 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_PCD_EP_Open+0xa6>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e00e      	b.n	8001c44 <HAL_PCD_EP_Open+0xc4>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f003 ff31 	bl	8005a9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001c42:	7afb      	ldrb	r3, [r7, #11]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	da0e      	bge.n	8001c7e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	705a      	strb	r2, [r3, #1]
 8001c7c:	e00e      	b.n	8001c9c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	f003 0207 	and.w	r2, r3, #7
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_PCD_EP_Close+0x6a>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e00e      	b.n	8001cd4 <HAL_PCD_EP_Close+0x88>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68f9      	ldr	r1, [r7, #12]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 fa7d 	bl	80061c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	f003 0207 	and.w	r2, r3, #7
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	2200      	movs	r2, #0
 8001d14:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d1c:	7afb      	ldrb	r3, [r7, #11]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d28:	7afb      	ldrb	r3, [r7, #11]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6979      	ldr	r1, [r7, #20]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f004 fc30 	bl	800659e <USB_EPStartXfer>
 8001d3e:	e005      	b.n	8001d4c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6979      	ldr	r1, [r7, #20]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f004 fc29 	bl	800659e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	f003 0207 	and.w	r2, r3, #7
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	440b      	add	r3, r1
 8001d74:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001d78:	681b      	ldr	r3, [r3, #0]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	460b      	mov	r3, r1
 8001d94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d96:	7afb      	ldrb	r3, [r7, #11]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4413      	add	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd2:	7afb      	ldrb	r3, [r7, #11]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dde:	7afb      	ldrb	r3, [r7, #11]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d106      	bne.n	8001df6 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6979      	ldr	r1, [r7, #20]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fbd5 	bl	800659e <USB_EPStartXfer>
 8001df4:	e005      	b.n	8001e02 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6979      	ldr	r1, [r7, #20]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 fbce 	bl	800659e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3718      	adds	r7, #24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	f003 0207 	and.w	r2, r3, #7
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d901      	bls.n	8001e2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e03e      	b.n	8001ea8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	da0e      	bge.n	8001e50 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	705a      	strb	r2, [r3, #1]
 8001e4e:	e00c      	b.n	8001e6a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e70:	78fb      	ldrb	r3, [r7, #3]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_PCD_EP_SetStall+0x7e>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e00e      	b.n	8001ea8 <HAL_PCD_EP_SetStall+0x9c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68f9      	ldr	r1, [r7, #12]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f005 feb6 	bl	8007c0a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	f003 020f 	and.w	r2, r3, #15
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d901      	bls.n	8001ece <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e040      	b.n	8001f50 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da0e      	bge.n	8001ef4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	705a      	strb	r2, [r3, #1]
 8001ef2:	e00e      	b.n	8001f12 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	f003 0207 	and.w	r2, r3, #7
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_PCD_EP_ClrStall+0x82>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e00e      	b.n	8001f50 <HAL_PCD_EP_ClrStall+0xa0>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f005 feb3 	bl	8007cac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b096      	sub	sp, #88	; 0x58
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f60:	e39c      	b.n	800269c <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f6a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001f6e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8001f7c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f040 815e 	bne.w	8002242 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001f86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001f8a:	f003 0310 	and.w	r3, r3, #16
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d150      	bne.n	8002034 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	81fb      	strh	r3, [r7, #14]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	89fb      	ldrh	r3, [r7, #14]
 8001faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3328      	adds	r3, #40	; 0x28
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6812      	ldr	r2, [r2, #0]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	441a      	add	r2, r3
 8001fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f00a fc0a 	bl	800c80e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 834a 	beq.w	800269c <PCD_EP_ISR_Handler+0x744>
 8002008:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 8345 	bne.w	800269c <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800201e:	b2da      	uxtb	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	b292      	uxth	r2, r2
 8002026:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002032:	e333      	b.n	800269c <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800203a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002046:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800204a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204e:	2b00      	cmp	r3, #0
 8002050:	d032      	beq.n	80020b8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205a:	b29b      	uxth	r3, r3
 800205c:	461a      	mov	r2, r3
 800205e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4413      	add	r3, r2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	4413      	add	r3, r2
 800206c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002078:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002086:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800208a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800208c:	b29b      	uxth	r3, r3
 800208e:	f005 ff38 	bl	8007f02 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29a      	uxth	r2, r3
 800209a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800209e:	4013      	ands	r3, r2
 80020a0:	823b      	strh	r3, [r7, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	8a3a      	ldrh	r2, [r7, #16]
 80020a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020ac:	b292      	uxth	r2, r2
 80020ae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f00a fb7f 	bl	800c7b4 <HAL_PCD_SetupStageCallback>
 80020b6:	e2f1      	b.n	800269c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80020b8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f280 82ed 	bge.w	800269c <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	f640 738f 	movw	r3, #3983	; 0xf8f
 80020ce:	4013      	ands	r3, r2
 80020d0:	83fb      	strh	r3, [r7, #30]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	8bfa      	ldrh	r2, [r7, #30]
 80020d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020dc:	b292      	uxth	r2, r2
 80020de:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002106:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d019      	beq.n	8002144 <PCD_EP_ISR_Handler+0x1ec>
 8002110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d015      	beq.n	8002144 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800211e:	6959      	ldr	r1, [r3, #20]
 8002120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002122:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002126:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002128:	b29b      	uxth	r3, r3
 800212a:	f005 feea 	bl	8007f02 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800212e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002130:	695a      	ldr	r2, [r3, #20]
 8002132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	441a      	add	r2, r3
 8002138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800213a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800213c:	2100      	movs	r1, #0
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f00a fb4a 	bl	800c7d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002150:	2b00      	cmp	r3, #0
 8002152:	f040 82a3 	bne.w	800269c <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002164:	b29b      	uxth	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	4413      	add	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	2b3e      	cmp	r3, #62	; 0x3e
 800217c:	d918      	bls.n	80021b0 <PCD_EP_ISR_Handler+0x258>
 800217e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	647b      	str	r3, [r7, #68]	; 0x44
 8002186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <PCD_EP_ISR_Handler+0x240>
 8002192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002194:	3b01      	subs	r3, #1
 8002196:	647b      	str	r3, [r7, #68]	; 0x44
 8002198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800219a:	b29b      	uxth	r3, r3
 800219c:	029b      	lsls	r3, r3, #10
 800219e:	b29b      	uxth	r3, r3
 80021a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	801a      	strh	r2, [r3, #0]
 80021ae:	e029      	b.n	8002204 <PCD_EP_ISR_Handler+0x2ac>
 80021b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d112      	bne.n	80021de <PCD_EP_ISR_Handler+0x286>
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	801a      	strh	r2, [r3, #0]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80021d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	801a      	strh	r2, [r3, #0]
 80021dc:	e012      	b.n	8002204 <PCD_EP_ISR_Handler+0x2ac>
 80021de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	647b      	str	r3, [r7, #68]	; 0x44
 80021e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <PCD_EP_ISR_Handler+0x2a0>
 80021f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f4:	3301      	adds	r3, #1
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
 80021f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	029b      	lsls	r3, r3, #10
 80021fe:	b29a      	uxth	r2, r3
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b29b      	uxth	r3, r3
 800220c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002214:	827b      	strh	r3, [r7, #18]
 8002216:	8a7b      	ldrh	r3, [r7, #18]
 8002218:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800221c:	827b      	strh	r3, [r7, #18]
 800221e:	8a7b      	ldrh	r3, [r7, #18]
 8002220:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002224:	827b      	strh	r3, [r7, #18]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	8a7b      	ldrh	r3, [r7, #18]
 800222c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800223c:	b29b      	uxth	r3, r3
 800223e:	8013      	strh	r3, [r2, #0]
 8002240:	e22c      	b.n	800269c <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002256:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800225a:	2b00      	cmp	r3, #0
 800225c:	f280 80f6 	bge.w	800244c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29a      	uxth	r2, r3
 8002272:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002276:	4013      	ands	r3, r2
 8002278:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800228e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002292:	b292      	uxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002296:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80022ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ae:	7b1b      	ldrb	r3, [r3, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d123      	bne.n	80022fc <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022bc:	b29b      	uxth	r3, r3
 80022be:	461a      	mov	r2, r3
 80022c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	4413      	add	r3, r2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80022d2:	881b      	ldrh	r3, [r3, #0]
 80022d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80022dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 808e 	beq.w	8002402 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ec:	6959      	ldr	r1, [r3, #20]
 80022ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f0:	88da      	ldrh	r2, [r3, #6]
 80022f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022f6:	f005 fe04 	bl	8007f02 <USB_ReadPMA>
 80022fa:	e082      	b.n	8002402 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80022fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fe:	78db      	ldrb	r3, [r3, #3]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d10a      	bne.n	800231a <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002304:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002308:	461a      	mov	r2, r3
 800230a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 f9d3 	bl	80026b8 <HAL_PCD_EP_DB_Receive>
 8002312:	4603      	mov	r3, r0
 8002314:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002318:	e073      	b.n	8002402 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002334:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	441a      	add	r2, r3
 8002346:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800234a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800234e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002356:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800235a:	b29b      	uxth	r3, r3
 800235c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	461a      	mov	r2, r3
 8002364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d022      	beq.n	80023be <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002380:	b29b      	uxth	r3, r3
 8002382:	461a      	mov	r2, r3
 8002384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	4413      	add	r3, r2
 8002392:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002396:	881b      	ldrh	r3, [r3, #0]
 8002398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800239c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80023a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d02c      	beq.n	8002402 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6818      	ldr	r0, [r3, #0]
 80023ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ae:	6959      	ldr	r1, [r3, #20]
 80023b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023b2:	891a      	ldrh	r2, [r3, #8]
 80023b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023b8:	f005 fda3 	bl	8007f02 <USB_ReadPMA>
 80023bc:	e021      	b.n	8002402 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4413      	add	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	4413      	add	r3, r2
 80023d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80023e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f4:	6959      	ldr	r1, [r3, #20]
 80023f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f8:	895a      	ldrh	r2, [r3, #10]
 80023fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023fe:	f005 fd80 	bl	8007f02 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	69da      	ldr	r2, [r3, #28]
 8002406:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800240a:	441a      	add	r2, r3
 800240c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002412:	695a      	ldr	r2, [r3, #20]
 8002414:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002418:	441a      	add	r2, r3
 800241a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800241e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <PCD_EP_ISR_Handler+0x4da>
 8002426:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800242a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	429a      	cmp	r2, r3
 8002430:	d206      	bcs.n	8002440 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	4619      	mov	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f00a f9cd 	bl	800c7d8 <HAL_PCD_DataOutStageCallback>
 800243e:	e005      	b.n	800244c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002446:	4618      	mov	r0, r3
 8002448:	f004 f8a9 	bl	800659e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800244c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8121 	beq.w	800269c <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800245a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002488:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800249e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80024aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ac:	78db      	ldrb	r3, [r3, #3]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	f000 80a2 	beq.w	80025f8 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80024b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80024ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024bc:	7b1b      	ldrb	r3, [r3, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8093 	beq.w	80025ea <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d046      	beq.n	800255e <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d126      	bne.n	8002526 <PCD_EP_ISR_Handler+0x5ce>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	4413      	add	r3, r2
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	00da      	lsls	r2, r3, #3
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	4413      	add	r3, r2
 80024fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	b29b      	uxth	r3, r3
 8002506:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800250a:	b29a      	uxth	r2, r3
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	801a      	strh	r2, [r3, #0]
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	b29b      	uxth	r3, r3
 8002516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800251a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800251e:	b29a      	uxth	r2, r3
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	801a      	strh	r2, [r3, #0]
 8002524:	e061      	b.n	80025ea <PCD_EP_ISR_Handler+0x692>
 8002526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002528:	785b      	ldrb	r3, [r3, #1]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d15d      	bne.n	80025ea <PCD_EP_ISR_Handler+0x692>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002542:	4413      	add	r3, r2
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	00da      	lsls	r2, r3, #3
 800254c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254e:	4413      	add	r3, r2
 8002550:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002554:	62bb      	str	r3, [r7, #40]	; 0x28
 8002556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002558:	2200      	movs	r2, #0
 800255a:	801a      	strh	r2, [r3, #0]
 800255c:	e045      	b.n	80025ea <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002566:	785b      	ldrb	r3, [r3, #1]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d126      	bne.n	80025ba <PCD_EP_ISR_Handler+0x662>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	4413      	add	r3, r2
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
 8002584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	00da      	lsls	r2, r3, #3
 800258a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258c:	4413      	add	r3, r2
 800258e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002592:	633b      	str	r3, [r7, #48]	; 0x30
 8002594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	b29b      	uxth	r3, r3
 800259a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800259e:	b29a      	uxth	r2, r3
 80025a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a2:	801a      	strh	r2, [r3, #0]
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b6:	801a      	strh	r2, [r3, #0]
 80025b8:	e017      	b.n	80025ea <PCD_EP_ISR_Handler+0x692>
 80025ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d113      	bne.n	80025ea <PCD_EP_ISR_Handler+0x692>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d0:	4413      	add	r3, r2
 80025d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	00da      	lsls	r2, r3, #3
 80025da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025dc:	4413      	add	r3, r2
 80025de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e6:	2200      	movs	r2, #0
 80025e8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	4619      	mov	r1, r3
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f00a f90c 	bl	800c80e <HAL_PCD_DataInStageCallback>
 80025f6:	e051      	b.n	800269c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80025f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d144      	bne.n	800268e <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	4413      	add	r3, r2
 800261e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002628:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800262c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800262e:	699a      	ldr	r2, [r3, #24]
 8002630:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002634:	429a      	cmp	r2, r3
 8002636:	d907      	bls.n	8002648 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002640:	1ad2      	subs	r2, r2, r3
 8002642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002644:	619a      	str	r2, [r3, #24]
 8002646:	e002      	b.n	800264e <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800264e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d106      	bne.n	8002664 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f00a f8d6 	bl	800c80e <HAL_PCD_DataInStageCallback>
 8002662:	e01b      	b.n	800269c <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800266c:	441a      	add	r2, r3
 800266e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002670:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002674:	69da      	ldr	r2, [r3, #28]
 8002676:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800267a:	441a      	add	r2, r3
 800267c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002686:	4618      	mov	r0, r3
 8002688:	f003 ff89 	bl	800659e <USB_EPStartXfer>
 800268c:	e006      	b.n	800269c <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800268e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002692:	461a      	mov	r2, r3
 8002694:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f917 	bl	80028ca <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f6ff ac5a 	blt.w	8001f62 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3758      	adds	r7, #88	; 0x58
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	4613      	mov	r3, r2
 80026c4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80026c6:	88fb      	ldrh	r3, [r7, #6]
 80026c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d07c      	beq.n	80027ca <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026f4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	8b7b      	ldrh	r3, [r7, #26]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d306      	bcc.n	800270e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	8b7b      	ldrh	r3, [r7, #26]
 8002706:	1ad2      	subs	r2, r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	619a      	str	r2, [r3, #24]
 800270c:	e002      	b.n	8002714 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d123      	bne.n	8002764 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	b29b      	uxth	r3, r3
 800272e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002736:	833b      	strh	r3, [r7, #24]
 8002738:	8b3b      	ldrh	r3, [r7, #24]
 800273a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800273e:	833b      	strh	r3, [r7, #24]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	441a      	add	r2, r3
 800274e:	8b3b      	ldrh	r3, [r7, #24]
 8002750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002760:	b29b      	uxth	r3, r3
 8002762:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002764:	88fb      	ldrh	r3, [r7, #6]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d01f      	beq.n	80027ae <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	461a      	mov	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002784:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002788:	82fb      	strh	r3, [r7, #22]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	441a      	add	r2, r3
 8002798:	8afb      	ldrh	r3, [r7, #22]
 800279a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800279e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027ae:	8b7b      	ldrh	r3, [r7, #26]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8085 	beq.w	80028c0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	6959      	ldr	r1, [r3, #20]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	891a      	ldrh	r2, [r3, #8]
 80027c2:	8b7b      	ldrh	r3, [r7, #26]
 80027c4:	f005 fb9d 	bl	8007f02 <USB_ReadPMA>
 80027c8:	e07a      	b.n	80028c0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	461a      	mov	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4413      	add	r3, r2
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	4413      	add	r3, r2
 80027e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027ee:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	8b7b      	ldrh	r3, [r7, #26]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d306      	bcc.n	8002808 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	8b7b      	ldrh	r3, [r7, #26]
 8002800:	1ad2      	subs	r2, r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	619a      	str	r2, [r3, #24]
 8002806:	e002      	b.n	800280e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d123      	bne.n	800285e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	881b      	ldrh	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800282c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002830:	83fb      	strh	r3, [r7, #30]
 8002832:	8bfb      	ldrh	r3, [r7, #30]
 8002834:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002838:	83fb      	strh	r3, [r7, #30]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	441a      	add	r2, r3
 8002848:	8bfb      	ldrh	r3, [r7, #30]
 800284a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800284e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800285a:	b29b      	uxth	r3, r3
 800285c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d11f      	bne.n	80028a8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002882:	83bb      	strh	r3, [r7, #28]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	8bbb      	ldrh	r3, [r7, #28]
 8002894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800289c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80028a8:	8b7b      	ldrh	r3, [r7, #26]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	6959      	ldr	r1, [r3, #20]
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	895a      	ldrh	r2, [r3, #10]
 80028ba:	8b7b      	ldrh	r3, [r7, #26]
 80028bc:	f005 fb21 	bl	8007f02 <USB_ReadPMA>
    }
  }

  return count;
 80028c0:	8b7b      	ldrh	r3, [r7, #26]
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3720      	adds	r7, #32
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b0a2      	sub	sp, #136	; 0x88
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	4613      	mov	r3, r2
 80028d6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028d8:	88fb      	ldrh	r3, [r7, #6]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 81c5 	beq.w	8002c6e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	6812      	ldr	r2, [r2, #0]
 80028fc:	4413      	add	r3, r2
 80028fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002908:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	699a      	ldr	r2, [r3, #24]
 8002910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002914:	429a      	cmp	r2, r3
 8002916:	d907      	bls.n	8002928 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	699a      	ldr	r2, [r3, #24]
 800291c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002920:	1ad2      	subs	r2, r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	619a      	str	r2, [r3, #24]
 8002926:	e002      	b.n	800292e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2200      	movs	r2, #0
 800292c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 80b9 	bne.w	8002aaa <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	785b      	ldrb	r3, [r3, #1]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d126      	bne.n	800298e <HAL_PCD_EP_DB_Transmit+0xc4>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002954:	4413      	add	r3, r2
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	00da      	lsls	r2, r3, #3
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	4413      	add	r3, r2
 8002962:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002972:	b29a      	uxth	r2, r3
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	801a      	strh	r2, [r3, #0]
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002986:	b29a      	uxth	r2, r3
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	e01a      	b.n	80029c4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	785b      	ldrb	r3, [r3, #1]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d116      	bne.n	80029c4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	633b      	str	r3, [r7, #48]	; 0x30
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	4413      	add	r3, r2
 80029ac:	633b      	str	r3, [r7, #48]	; 0x30
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	00da      	lsls	r2, r3, #3
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	4413      	add	r3, r2
 80029b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	2200      	movs	r2, #0
 80029c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	623b      	str	r3, [r7, #32]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d126      	bne.n	8002a20 <HAL_PCD_EP_DB_Transmit+0x156>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	61bb      	str	r3, [r7, #24]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	00da      	lsls	r2, r3, #3
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	4413      	add	r3, r2
 80029f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	801a      	strh	r2, [r3, #0]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	801a      	strh	r2, [r3, #0]
 8002a1e:	e017      	b.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x186>
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d113      	bne.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x186>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	4413      	add	r3, r2
 8002a38:	623b      	str	r3, [r7, #32]
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	00da      	lsls	r2, r3, #3
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	4413      	add	r3, r2
 8002a44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	4619      	mov	r1, r3
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f009 fed9 	bl	800c80e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 82d2 	beq.w	800300c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	827b      	strh	r3, [r7, #18]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	8a7b      	ldrh	r3, [r7, #18]
 8002a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	8013      	strh	r3, [r2, #0]
 8002aa8:	e2b0      	b.n	800300c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002aaa:	88fb      	ldrh	r3, [r7, #6]
 8002aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d021      	beq.n	8002af8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	4413      	add	r3, r2
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ace:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	441a      	add	r2, r3
 8002ae0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	f040 8284 	bne.w	800300c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b0c:	441a      	add	r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b1a:	441a      	add	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d309      	bcc.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	6a1a      	ldr	r2, [r3, #32]
 8002b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b38:	1ad2      	subs	r2, r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	621a      	str	r2, [r3, #32]
 8002b3e:	e015      	b.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d107      	bne.n	8002b58 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002b48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b4c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002b56:	e009      	b.n	8002b6c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d155      	bne.n	8002c20 <HAL_PCD_EP_DB_Transmit+0x356>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	4413      	add	r3, r2
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	00da      	lsls	r2, r3, #3
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	4413      	add	r3, r2
 8002b96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b9e:	2b3e      	cmp	r3, #62	; 0x3e
 8002ba0:	d916      	bls.n	8002bd0 <HAL_PCD_EP_DB_Transmit+0x306>
 8002ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ba4:	095b      	lsrs	r3, r3, #5
 8002ba6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	029b      	lsls	r3, r3, #10
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	801a      	strh	r2, [r3, #0]
 8002bce:	e043      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d112      	bne.n	8002bfc <HAL_PCD_EP_DB_Transmit+0x332>
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	801a      	strh	r2, [r3, #0]
 8002be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf8:	801a      	strh	r2, [r3, #0]
 8002bfa:	e02d      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_PCD_EP_DB_Transmit+0x348>
 8002c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c0e:	3301      	adds	r3, #1
 8002c10:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	029b      	lsls	r3, r3, #10
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c1c:	801a      	strh	r2, [r3, #0]
 8002c1e:	e01b      	b.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d117      	bne.n	8002c58 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3c:	4413      	add	r3, r2
 8002c3e:	643b      	str	r3, [r7, #64]	; 0x40
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	00da      	lsls	r2, r3, #3
 8002c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c48:	4413      	add	r3, r2
 8002c4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c56:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6959      	ldr	r1, [r3, #20]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	891a      	ldrh	r2, [r3, #8]
 8002c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f005 f909 	bl	8007e7e <USB_WritePMA>
 8002c6c:	e1ce      	b.n	800300c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c8c:	881b      	ldrh	r3, [r3, #0]
 8002c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d307      	bcc.n	8002cb2 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	699a      	ldr	r2, [r3, #24]
 8002ca6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	619a      	str	r2, [r3, #24]
 8002cb0:	e002      	b.n	8002cb8 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 80c4 	bne.w	8002e4a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	785b      	ldrb	r3, [r3, #1]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d126      	bne.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cde:	4413      	add	r3, r2
 8002ce0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	00da      	lsls	r2, r3, #3
 8002ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cea:	4413      	add	r3, r2
 8002cec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cf0:	667b      	str	r3, [r7, #100]	; 0x64
 8002cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cf4:	881b      	ldrh	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d00:	801a      	strh	r2, [r3, #0]
 8002d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d14:	801a      	strh	r2, [r3, #0]
 8002d16:	e01a      	b.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x484>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	785b      	ldrb	r3, [r3, #1]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d116      	bne.n	8002d4e <HAL_PCD_EP_DB_Transmit+0x484>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	673b      	str	r3, [r7, #112]	; 0x70
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	461a      	mov	r2, r3
 8002d32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d34:	4413      	add	r3, r2
 8002d36:	673b      	str	r3, [r7, #112]	; 0x70
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	00da      	lsls	r2, r3, #3
 8002d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d40:	4413      	add	r3, r2
 8002d42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d12f      	bne.n	8002dbc <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d74:	4413      	add	r3, r2
 8002d76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	00da      	lsls	r2, r3, #3
 8002d80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d84:	4413      	add	r3, r2
 8002d86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d92:	881b      	ldrh	r3, [r3, #0]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002db8:	801a      	strh	r2, [r3, #0]
 8002dba:	e017      	b.n	8002dec <HAL_PCD_EP_DB_Transmit+0x522>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	785b      	ldrb	r3, [r3, #1]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d113      	bne.n	8002dec <HAL_PCD_EP_DB_Transmit+0x522>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dd2:	4413      	add	r3, r2
 8002dd4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	00da      	lsls	r2, r3, #3
 8002ddc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dde:	4413      	add	r3, r2
 8002de0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002de4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de8:	2200      	movs	r2, #0
 8002dea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	4619      	mov	r1, r3
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f009 fd0b 	bl	800c80e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 8104 	bne.w	800300c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	441a      	add	r2, r3
 8002e30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	8013      	strh	r3, [r2, #0]
 8002e48:	e0e0      	b.n	800300c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d121      	bne.n	8002e98 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	881b      	ldrh	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	441a      	add	r2, r3
 8002e80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	f040 80b4 	bne.w	800300c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	695a      	ldr	r2, [r3, #20]
 8002ea8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eac:	441a      	add	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eba:	441a      	add	r2, r3
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	6a1a      	ldr	r2, [r3, #32]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d309      	bcc.n	8002ee0 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	6a1a      	ldr	r2, [r3, #32]
 8002ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed8:	1ad2      	subs	r2, r2, r3
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	621a      	str	r2, [r3, #32]
 8002ede:	e015      	b.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d107      	bne.n	8002ef8 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002ee8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002ef6:	e009      	b.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	2200      	movs	r2, #0
 8002f02:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	663b      	str	r3, [r7, #96]	; 0x60
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	785b      	ldrb	r3, [r3, #1]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d155      	bne.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f2e:	4413      	add	r3, r2
 8002f30:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	00da      	lsls	r2, r3, #3
 8002f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f40:	657b      	str	r3, [r7, #84]	; 0x54
 8002f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f44:	2b3e      	cmp	r3, #62	; 0x3e
 8002f46:	d916      	bls.n	8002f76 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <HAL_PCD_EP_DB_Transmit+0x694>
 8002f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	029b      	lsls	r3, r3, #10
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f72:	801a      	strh	r2, [r3, #0]
 8002f74:	e040      	b.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d112      	bne.n	8002fa2 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8002f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8a:	801a      	strh	r2, [r3, #0]
 8002f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9e:	801a      	strh	r2, [r3, #0]
 8002fa0:	e02a      	b.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa4:	085b      	lsrs	r3, r3, #1
 8002fa6:	677b      	str	r3, [r7, #116]	; 0x74
 8002fa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8002fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	677b      	str	r3, [r7, #116]	; 0x74
 8002fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	029b      	lsls	r3, r3, #10
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fc2:	801a      	strh	r2, [r3, #0]
 8002fc4:	e018      	b.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d114      	bne.n	8002ff8 <HAL_PCD_EP_DB_Transmit+0x72e>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fdc:	4413      	add	r3, r2
 8002fde:	663b      	str	r3, [r7, #96]	; 0x60
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	00da      	lsls	r2, r3, #3
 8002fe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fe8:	4413      	add	r3, r2
 8002fea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ff6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6959      	ldr	r1, [r3, #20]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	895a      	ldrh	r2, [r3, #10]
 8003004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003006:	b29b      	uxth	r3, r3
 8003008:	f004 ff39 	bl	8007e7e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003022:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003026:	823b      	strh	r3, [r7, #16]
 8003028:	8a3b      	ldrh	r3, [r7, #16]
 800302a:	f083 0310 	eor.w	r3, r3, #16
 800302e:	823b      	strh	r3, [r7, #16]
 8003030:	8a3b      	ldrh	r3, [r7, #16]
 8003032:	f083 0320 	eor.w	r3, r3, #32
 8003036:	823b      	strh	r3, [r7, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	461a      	mov	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	441a      	add	r2, r3
 8003046:	8a3b      	ldrh	r3, [r7, #16]
 8003048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800304c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003058:	b29b      	uxth	r3, r3
 800305a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3788      	adds	r7, #136	; 0x88
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003066:	b480      	push	{r7}
 8003068:	b087      	sub	sp, #28
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	817b      	strh	r3, [r7, #10]
 8003074:	4613      	mov	r3, r2
 8003076:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003078:	897b      	ldrh	r3, [r7, #10]
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003084:	897b      	ldrh	r3, [r7, #10]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4413      	add	r3, r2
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	e009      	b.n	80030b0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800309c:	897a      	ldrh	r2, [r7, #10]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80030b0:	893b      	ldrh	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d107      	bne.n	80030c6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2200      	movs	r2, #0
 80030ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	b29a      	uxth	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	80da      	strh	r2, [r3, #6]
 80030c4:	e00b      	b.n	80030de <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2201      	movs	r2, #1
 80030ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	0c1b      	lsrs	r3, r3, #16
 80030d8:	b29a      	uxth	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	371c      	adds	r7, #28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003110:	b29b      	uxth	r3, r3
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003124:	b29b      	uxth	r3, r3
 8003126:	f043 0302 	orr.w	r3, r3, #2
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00b      	beq.n	8003166 <HAL_PWREx_ControlVoltageScaling+0x26>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003154:	d007      	beq.n	8003166 <HAL_PWREx_ControlVoltageScaling+0x26>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315c:	d003      	beq.n	8003166 <HAL_PWREx_ControlVoltageScaling+0x26>
 800315e:	219d      	movs	r1, #157	; 0x9d
 8003160:	484d      	ldr	r0, [pc, #308]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8003162:	f7fd fa50 	bl	8000606 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d141      	bne.n	80031f0 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800316c:	4b4b      	ldr	r3, [pc, #300]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003178:	d131      	bne.n	80031de <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800317a:	4b48      	ldr	r3, [pc, #288]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800317c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003180:	4a46      	ldr	r2, [pc, #280]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003186:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800318a:	4b44      	ldr	r3, [pc, #272]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003192:	4a42      	ldr	r2, [pc, #264]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003198:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800319a:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_PWREx_ControlVoltageScaling+0x160>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2232      	movs	r2, #50	; 0x32
 80031a0:	fb02 f303 	mul.w	r3, r2, r3
 80031a4:	4a3f      	ldr	r2, [pc, #252]	; (80032a4 <HAL_PWREx_ControlVoltageScaling+0x164>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	0c9b      	lsrs	r3, r3, #18
 80031ac:	3301      	adds	r3, #1
 80031ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031b0:	e002      	b.n	80031b8 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031b8:	4b38      	ldr	r3, [pc, #224]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c4:	d102      	bne.n	80031cc <HAL_PWREx_ControlVoltageScaling+0x8c>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f2      	bne.n	80031b2 <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031cc:	4b33      	ldr	r3, [pc, #204]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d8:	d158      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e057      	b.n	800328e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031de:	4b2f      	ldr	r3, [pc, #188]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031e4:	4a2d      	ldr	r2, [pc, #180]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031ea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031ee:	e04d      	b.n	800328c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f6:	d141      	bne.n	800327c <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031f8:	4b28      	ldr	r3, [pc, #160]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003204:	d131      	bne.n	800326a <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003206:	4b25      	ldr	r3, [pc, #148]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320c:	4a23      	ldr	r2, [pc, #140]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800320e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003212:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003216:	4b21      	ldr	r3, [pc, #132]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800321e:	4a1f      	ldr	r2, [pc, #124]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003220:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003224:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2232      	movs	r2, #50	; 0x32
 800322c:	fb02 f303 	mul.w	r3, r2, r3
 8003230:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9b      	lsrs	r3, r3, #18
 8003238:	3301      	adds	r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800323c:	e002      	b.n	8003244 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3b01      	subs	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003244:	4b15      	ldr	r3, [pc, #84]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800324c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003250:	d102      	bne.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x118>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f2      	bne.n	800323e <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003258:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003264:	d112      	bne.n	800328c <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e011      	b.n	800328e <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800326c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003270:	4a0a      	ldr	r2, [pc, #40]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003276:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800327a:	e007      	b.n	800328c <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800327c:	4b07      	ldr	r3, [pc, #28]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003284:	4a05      	ldr	r2, [pc, #20]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800328a:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	0800d0f4 	.word	0x0800d0f4
 800329c:	40007000 	.word	0x40007000
 80032a0:	20000000 	.word	0x20000000
 80032a4:	431bde83 	.word	0x431bde83

080032a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	4a04      	ldr	r2, [pc, #16]	; (80032c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80032b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032b6:	6093      	str	r3, [r2, #8]
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40007000 	.word	0x40007000

080032c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f000 bc02 	b.w	8003ae0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d022      	beq.n	800332a <HAL_RCC_OscConfig+0x62>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d11c      	bne.n	800332a <HAL_RCC_OscConfig+0x62>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d116      	bne.n	800332a <HAL_RCC_OscConfig+0x62>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0320 	and.w	r3, r3, #32
 8003304:	2b00      	cmp	r3, #0
 8003306:	d110      	bne.n	800332a <HAL_RCC_OscConfig+0x62>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10a      	bne.n	800332a <HAL_RCC_OscConfig+0x62>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <HAL_RCC_OscConfig+0x62>
 8003320:	f240 1145 	movw	r1, #325	; 0x145
 8003324:	4892      	ldr	r0, [pc, #584]	; (8003570 <HAL_RCC_OscConfig+0x2a8>)
 8003326:	f7fd f96e 	bl	8000606 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8089 	beq.w	800344a <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00e      	beq.n	800335e <HAL_RCC_OscConfig+0x96>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003348:	d009      	beq.n	800335e <HAL_RCC_OscConfig+0x96>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003352:	d004      	beq.n	800335e <HAL_RCC_OscConfig+0x96>
 8003354:	f240 114b 	movw	r1, #331	; 0x14b
 8003358:	4885      	ldr	r0, [pc, #532]	; (8003570 <HAL_RCC_OscConfig+0x2a8>)
 800335a:	f7fd f954 	bl	8000606 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800335e:	4b85      	ldr	r3, [pc, #532]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
 8003366:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003368:	4b82      	ldr	r3, [pc, #520]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	2b0c      	cmp	r3, #12
 8003376:	d102      	bne.n	800337e <HAL_RCC_OscConfig+0xb6>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d002      	beq.n	8003384 <HAL_RCC_OscConfig+0xbc>
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	2b08      	cmp	r3, #8
 8003382:	d10b      	bne.n	800339c <HAL_RCC_OscConfig+0xd4>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003384:	4b7b      	ldr	r3, [pc, #492]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d05b      	beq.n	8003448 <HAL_RCC_OscConfig+0x180>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d157      	bne.n	8003448 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e3a1      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a4:	d106      	bne.n	80033b4 <HAL_RCC_OscConfig+0xec>
 80033a6:	4b73      	ldr	r3, [pc, #460]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a72      	ldr	r2, [pc, #456]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e01d      	b.n	80033f0 <HAL_RCC_OscConfig+0x128>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x110>
 80033be:	4b6d      	ldr	r3, [pc, #436]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a6c      	ldr	r2, [pc, #432]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b6a      	ldr	r3, [pc, #424]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a69      	ldr	r2, [pc, #420]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0x128>
 80033d8:	4b66      	ldr	r3, [pc, #408]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a65      	ldr	r2, [pc, #404]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b63      	ldr	r3, [pc, #396]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a62      	ldr	r2, [pc, #392]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d013      	beq.n	8003420 <HAL_RCC_OscConfig+0x158>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f8:	f7fd fbb0 	bl	8000b5c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x14a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003400:	f7fd fbac 	bl	8000b5c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x14a>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e366      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003412:	4b58      	ldr	r3, [pc, #352]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x138>
 800341e:	e014      	b.n	800344a <HAL_RCC_OscConfig+0x182>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fd fb9c 	bl	8000b5c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x172>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003428:	f7fd fb98 	bl	8000b5c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x172>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e352      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800343a:	4b4e      	ldr	r3, [pc, #312]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x160>
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x182>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8093 	beq.w	800357e <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d009      	beq.n	8003474 <HAL_RCC_OscConfig+0x1ac>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003468:	d004      	beq.n	8003474 <HAL_RCC_OscConfig+0x1ac>
 800346a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800346e:	4840      	ldr	r0, [pc, #256]	; (8003570 <HAL_RCC_OscConfig+0x2a8>)
 8003470:	f7fd f8c9 	bl	8000606 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b7f      	cmp	r3, #127	; 0x7f
 800347a:	d904      	bls.n	8003486 <HAL_RCC_OscConfig+0x1be>
 800347c:	f240 1181 	movw	r1, #385	; 0x181
 8003480:	483b      	ldr	r0, [pc, #236]	; (8003570 <HAL_RCC_OscConfig+0x2a8>)
 8003482:	f7fd f8c0 	bl	8000606 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003486:	4b3b      	ldr	r3, [pc, #236]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003490:	4b38      	ldr	r3, [pc, #224]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b0c      	cmp	r3, #12
 800349e:	d102      	bne.n	80034a6 <HAL_RCC_OscConfig+0x1de>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_OscConfig+0x1e4>
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d11f      	bne.n	80034ec <HAL_RCC_OscConfig+0x224>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034ac:	4b31      	ldr	r3, [pc, #196]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_OscConfig+0x1fc>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <HAL_RCC_OscConfig+0x1fc>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e30d      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b2b      	ldr	r3, [pc, #172]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	4928      	ldr	r1, [pc, #160]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034d8:	4b27      	ldr	r3, [pc, #156]	; (8003578 <HAL_RCC_OscConfig+0x2b0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd f94f 	bl	8000780 <HAL_InitTick>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d049      	beq.n	800357c <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e2f9      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d023      	beq.n	800353c <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f4:	4b1f      	ldr	r3, [pc, #124]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80034fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fd fb2c 	bl	8000b5c <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x252>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003508:	f7fd fb28 	bl	8000b5c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x252>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e2e2      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800351a:	4b16      	ldr	r3, [pc, #88]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x240>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	061b      	lsls	r3, r3, #24
 8003534:	490f      	ldr	r1, [pc, #60]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003536:	4313      	orrs	r3, r2
 8003538:	604b      	str	r3, [r1, #4]
 800353a:	e020      	b.n	800357e <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353c:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0c      	ldr	r2, [pc, #48]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003542:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fd fb08 	bl	8000b5c <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x29a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003550:	f7fd fb04 	bl	8000b5c <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e2be      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003562:	4b04      	ldr	r3, [pc, #16]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x288>
 800356e:	e006      	b.n	800357e <HAL_RCC_OscConfig+0x2b6>
 8003570:	0800d130 	.word	0x0800d130
 8003574:	40021000 	.word	0x40021000
 8003578:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d049      	beq.n	800361e <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2dc>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d004      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2dc>
 800359a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
 800359e:	48a3      	ldr	r0, [pc, #652]	; (800382c <HAL_RCC_OscConfig+0x564>)
 80035a0:	f7fd f831 	bl	8000606 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01c      	beq.n	80035e6 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ac:	4ba0      	ldr	r3, [pc, #640]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	4a9f      	ldr	r2, [pc, #636]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fd face 	bl	8000b5c <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fd faca 	bl	8000b5c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e284      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035d6:	4b96      	ldr	r3, [pc, #600]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80035d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0ef      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
 80035e4:	e01b      	b.n	800361e <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e6:	4b92      	ldr	r3, [pc, #584]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80035e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ec:	4a90      	ldr	r2, [pc, #576]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f6:	f7fd fab1 	bl	8000b5c <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fd faad 	bl	8000b5c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e267      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003610:	4b87      	ldr	r3, [pc, #540]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 8003612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1ef      	bne.n	80035fe <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80b7 	beq.w	800379a <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800362c:	2300      	movs	r3, #0
 800362e:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00c      	beq.n	8003652 <HAL_RCC_OscConfig+0x38a>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d008      	beq.n	8003652 <HAL_RCC_OscConfig+0x38a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b05      	cmp	r3, #5
 8003646:	d004      	beq.n	8003652 <HAL_RCC_OscConfig+0x38a>
 8003648:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800364c:	4877      	ldr	r0, [pc, #476]	; (800382c <HAL_RCC_OscConfig+0x564>)
 800364e:	f7fc ffda 	bl	8000606 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003652:	4b77      	ldr	r3, [pc, #476]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_OscConfig+0x39a>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_RCC_OscConfig+0x39c>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003668:	4b71      	ldr	r3, [pc, #452]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	4a70      	ldr	r2, [pc, #448]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 800366e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003672:	6593      	str	r3, [r2, #88]	; 0x58
 8003674:	4b6e      	ldr	r3, [pc, #440]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003680:	2301      	movs	r3, #1
 8003682:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003684:	4b6b      	ldr	r3, [pc, #428]	; (8003834 <HAL_RCC_OscConfig+0x56c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d118      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003690:	4b68      	ldr	r3, [pc, #416]	; (8003834 <HAL_RCC_OscConfig+0x56c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a67      	ldr	r2, [pc, #412]	; (8003834 <HAL_RCC_OscConfig+0x56c>)
 8003696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369c:	f7fd fa5e 	bl	8000b5c <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036a4:	f7fd fa5a 	bl	8000b5c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e214      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b6:	4b5f      	ldr	r3, [pc, #380]	; (8003834 <HAL_RCC_OscConfig+0x56c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d108      	bne.n	80036dc <HAL_RCC_OscConfig+0x414>
 80036ca:	4b59      	ldr	r3, [pc, #356]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80036cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d0:	4a57      	ldr	r2, [pc, #348]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036da:	e024      	b.n	8003726 <HAL_RCC_OscConfig+0x45e>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	2b05      	cmp	r3, #5
 80036e2:	d110      	bne.n	8003706 <HAL_RCC_OscConfig+0x43e>
 80036e4:	4b52      	ldr	r3, [pc, #328]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	4a51      	ldr	r2, [pc, #324]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036f4:	4b4e      	ldr	r3, [pc, #312]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80036f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fa:	4a4d      	ldr	r2, [pc, #308]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003704:	e00f      	b.n	8003726 <HAL_RCC_OscConfig+0x45e>
 8003706:	4b4a      	ldr	r3, [pc, #296]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	4a48      	ldr	r2, [pc, #288]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003716:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 8003718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371c:	4a44      	ldr	r2, [pc, #272]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 800371e:	f023 0304 	bic.w	r3, r3, #4
 8003722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d016      	beq.n	800375c <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372e:	f7fd fa15 	bl	8000b5c <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fd fa11 	bl	8000b5c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e1c9      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374c:	4b38      	ldr	r3, [pc, #224]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0ed      	beq.n	8003736 <HAL_RCC_OscConfig+0x46e>
 800375a:	e015      	b.n	8003788 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fd f9fe 	bl	8000b5c <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003762:	e00a      	b.n	800377a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fd f9fa 	bl	8000b5c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e1b2      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800377a:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1ed      	bne.n	8003764 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003788:	7ffb      	ldrb	r3, [r7, #31]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d105      	bne.n	800379a <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378e:	4b28      	ldr	r3, [pc, #160]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 8003790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 8003794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003798:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d04f      	beq.n	8003846 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d008      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d004      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4f8>
 80037b6:	f240 213b 	movw	r1, #571	; 0x23b
 80037ba:	481c      	ldr	r0, [pc, #112]	; (800382c <HAL_RCC_OscConfig+0x564>)
 80037bc:	f7fc ff23 	bl	8000606 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01c      	beq.n	8003802 <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80037ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ce:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fd f9c0 	bl	8000b5c <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037e0:	f7fd f9bc 	bl	8000b5c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e176      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037f2:	4b0f      	ldr	r3, [pc, #60]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 80037f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ef      	beq.n	80037e0 <HAL_RCC_OscConfig+0x518>
 8003800:	e021      	b.n	8003846 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 8003804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003808:	4a09      	ldr	r2, [pc, #36]	; (8003830 <HAL_RCC_OscConfig+0x568>)
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003812:	f7fd f9a3 	bl	8000b5c <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003818:	e00e      	b.n	8003838 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800381a:	f7fd f99f 	bl	8000b5c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d907      	bls.n	8003838 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e159      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
 800382c:	0800d130 	.word	0x0800d130
 8003830:	40021000 	.word	0x40021000
 8003834:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003838:	4b89      	ldr	r3, [pc, #548]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 800383a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e9      	bne.n	800381a <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00c      	beq.n	8003868 <HAL_RCC_OscConfig+0x5a0>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d008      	beq.n	8003868 <HAL_RCC_OscConfig+0x5a0>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d004      	beq.n	8003868 <HAL_RCC_OscConfig+0x5a0>
 800385e:	f44f 7119 	mov.w	r1, #612	; 0x264
 8003862:	4880      	ldr	r0, [pc, #512]	; (8003a64 <HAL_RCC_OscConfig+0x79c>)
 8003864:	f7fc fecf 	bl	8000606 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8136 	beq.w	8003ade <HAL_RCC_OscConfig+0x816>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003872:	4b7b      	ldr	r3, [pc, #492]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f003 030c 	and.w	r3, r3, #12
 800387a:	2b0c      	cmp	r3, #12
 800387c:	f000 80ea 	beq.w	8003a54 <HAL_RCC_OscConfig+0x78c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	2b02      	cmp	r3, #2
 8003886:	f040 80bd 	bne.w	8003a04 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00c      	beq.n	80038ac <HAL_RCC_OscConfig+0x5e4>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d008      	beq.n	80038ac <HAL_RCC_OscConfig+0x5e4>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d004      	beq.n	80038ac <HAL_RCC_OscConfig+0x5e4>
 80038a2:	f240 216e 	movw	r1, #622	; 0x26e
 80038a6:	486f      	ldr	r0, [pc, #444]	; (8003a64 <HAL_RCC_OscConfig+0x79c>)
 80038a8:	f7fc fead 	bl	8000606 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_RCC_OscConfig+0x5f4>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d904      	bls.n	80038c6 <HAL_RCC_OscConfig+0x5fe>
 80038bc:	f240 216f 	movw	r1, #623	; 0x26f
 80038c0:	4868      	ldr	r0, [pc, #416]	; (8003a64 <HAL_RCC_OscConfig+0x79c>)
 80038c2:	f7fc fea0 	bl	8000606 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	2b07      	cmp	r3, #7
 80038cc:	d903      	bls.n	80038d6 <HAL_RCC_OscConfig+0x60e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	2b7f      	cmp	r3, #127	; 0x7f
 80038d4:	d904      	bls.n	80038e0 <HAL_RCC_OscConfig+0x618>
 80038d6:	f44f 711c 	mov.w	r1, #624	; 0x270
 80038da:	4862      	ldr	r0, [pc, #392]	; (8003a64 <HAL_RCC_OscConfig+0x79c>)
 80038dc:	f7fc fe93 	bl	8000606 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d903      	bls.n	80038f0 <HAL_RCC_OscConfig+0x628>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	2b1f      	cmp	r3, #31
 80038ee:	d904      	bls.n	80038fa <HAL_RCC_OscConfig+0x632>
 80038f0:	f240 2171 	movw	r1, #625	; 0x271
 80038f4:	485b      	ldr	r0, [pc, #364]	; (8003a64 <HAL_RCC_OscConfig+0x79c>)
 80038f6:	f7fc fe86 	bl	8000606 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d010      	beq.n	8003924 <HAL_RCC_OscConfig+0x65c>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	2b04      	cmp	r3, #4
 8003908:	d00c      	beq.n	8003924 <HAL_RCC_OscConfig+0x65c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	2b06      	cmp	r3, #6
 8003910:	d008      	beq.n	8003924 <HAL_RCC_OscConfig+0x65c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	2b08      	cmp	r3, #8
 8003918:	d004      	beq.n	8003924 <HAL_RCC_OscConfig+0x65c>
 800391a:	f240 2172 	movw	r1, #626	; 0x272
 800391e:	4851      	ldr	r0, [pc, #324]	; (8003a64 <HAL_RCC_OscConfig+0x79c>)
 8003920:	f7fc fe71 	bl	8000606 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003928:	2b02      	cmp	r3, #2
 800392a:	d010      	beq.n	800394e <HAL_RCC_OscConfig+0x686>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	2b04      	cmp	r3, #4
 8003932:	d00c      	beq.n	800394e <HAL_RCC_OscConfig+0x686>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003938:	2b06      	cmp	r3, #6
 800393a:	d008      	beq.n	800394e <HAL_RCC_OscConfig+0x686>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	2b08      	cmp	r3, #8
 8003942:	d004      	beq.n	800394e <HAL_RCC_OscConfig+0x686>
 8003944:	f240 2173 	movw	r1, #627	; 0x273
 8003948:	4846      	ldr	r0, [pc, #280]	; (8003a64 <HAL_RCC_OscConfig+0x79c>)
 800394a:	f7fc fe5c 	bl	8000606 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b44      	ldr	r3, [pc, #272]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a43      	ldr	r2, [pc, #268]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003954:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395a:	f7fd f8ff 	bl	8000b5c <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003962:	f7fd f8fb 	bl	8000b5c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e0b5      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003974:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003980:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	4b38      	ldr	r3, [pc, #224]	; (8003a68 <HAL_RCC_OscConfig+0x7a0>)
 8003986:	4013      	ands	r3, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6a11      	ldr	r1, [r2, #32]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003990:	3a01      	subs	r2, #1
 8003992:	0112      	lsls	r2, r2, #4
 8003994:	4311      	orrs	r1, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800399a:	0212      	lsls	r2, r2, #8
 800399c:	4311      	orrs	r1, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039a2:	0852      	lsrs	r2, r2, #1
 80039a4:	3a01      	subs	r2, #1
 80039a6:	0552      	lsls	r2, r2, #21
 80039a8:	4311      	orrs	r1, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039ae:	0852      	lsrs	r2, r2, #1
 80039b0:	3a01      	subs	r2, #1
 80039b2:	0652      	lsls	r2, r2, #25
 80039b4:	4311      	orrs	r1, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039ba:	06d2      	lsls	r2, r2, #27
 80039bc:	430a      	orrs	r2, r1
 80039be:	4928      	ldr	r1, [pc, #160]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c4:	4b26      	ldr	r3, [pc, #152]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a25      	ldr	r2, [pc, #148]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 80039ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a22      	ldr	r2, [pc, #136]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 80039d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd f8be 	bl	8000b5c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fd f8ba 	bl	8000b5c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e074      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f6:	4b1a      	ldr	r3, [pc, #104]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d0f0      	beq.n	80039e4 <HAL_RCC_OscConfig+0x71c>
 8003a02:	e06c      	b.n	8003ade <HAL_RCC_OscConfig+0x816>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a04:	4b16      	ldr	r3, [pc, #88]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a15      	ldr	r2, [pc, #84]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a10:	4b13      	ldr	r3, [pc, #76]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a1c:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a0f      	ldr	r2, [pc, #60]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003a22:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a2a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2c:	f7fd f896 	bl	8000b5c <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x77e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd f892 	bl	8000b5c <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x77e>
          {
            return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e04c      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_RCC_OscConfig+0x798>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_OscConfig+0x76c>
 8003a52:	e044      	b.n	8003ade <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d107      	bne.n	8003a6c <HAL_RCC_OscConfig+0x7a4>
      {
        return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e03f      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
 8003a60:	40021000 	.word	0x40021000
 8003a64:	0800d130 	.word	0x0800d130
 8003a68:	019f800c 	.word	0x019f800c
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a6c:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <HAL_RCC_OscConfig+0x820>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f003 0203 	and.w	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d12c      	bne.n	8003ada <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d123      	bne.n	8003ada <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d11b      	bne.n	8003ada <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d113      	bne.n	8003ada <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d109      	bne.n	8003ada <HAL_RCC_OscConfig+0x812>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d001      	beq.n	8003ade <HAL_RCC_OscConfig+0x816>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e000      	b.n	8003ae0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  }

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3720      	adds	r7, #32
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e1e2      	b.n	8003eca <HAL_RCC_ClockConfig+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 030f 	and.w	r3, r3, #15
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x30>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 030f 	bic.w	r3, r3, #15
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x3a>
 8003b1c:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8003b20:	4869      	ldr	r0, [pc, #420]	; (8003cc8 <HAL_RCC_ClockConfig+0x1dc>)
 8003b22:	f7fc fd70 	bl	8000606 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d031      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d02e      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d02b      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d028      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d025      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b05      	cmp	r3, #5
 8003b48:	d022      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b06      	cmp	r3, #6
 8003b4e:	d01f      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b07      	cmp	r3, #7
 8003b54:	d01c      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d019      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b09      	cmp	r3, #9
 8003b60:	d016      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b0a      	cmp	r3, #10
 8003b66:	d013      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2b0b      	cmp	r3, #11
 8003b6c:	d010      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	d00d      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2b0d      	cmp	r3, #13
 8003b78:	d00a      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b0e      	cmp	r3, #14
 8003b7e:	d007      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	d004      	beq.n	8003b90 <HAL_RCC_ClockConfig+0xa4>
 8003b86:	f240 310d 	movw	r1, #781	; 0x30d
 8003b8a:	484f      	ldr	r0, [pc, #316]	; (8003cc8 <HAL_RCC_ClockConfig+0x1dc>)
 8003b8c:	f7fc fd3b 	bl	8000606 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b90:	4b4e      	ldr	r3, [pc, #312]	; (8003ccc <HAL_RCC_ClockConfig+0x1e0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 030f 	and.w	r3, r3, #15
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d910      	bls.n	8003bc0 <HAL_RCC_ClockConfig+0xd4>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b9e:	4b4b      	ldr	r3, [pc, #300]	; (8003ccc <HAL_RCC_ClockConfig+0x1e0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 020f 	bic.w	r2, r3, #15
 8003ba6:	4949      	ldr	r1, [pc, #292]	; (8003ccc <HAL_RCC_ClockConfig+0x1e0>)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bae:	4b47      	ldr	r3, [pc, #284]	; (8003ccc <HAL_RCC_ClockConfig+0x1e0>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	683a      	ldr	r2, [r7, #0]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d001      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0xd4>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e184      	b.n	8003eca <HAL_RCC_ClockConfig+0x3de>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 808e 	beq.w	8003cea <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x104>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x104>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d004      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x104>
 8003be6:	f44f 7149 	mov.w	r1, #804	; 0x324
 8003bea:	4837      	ldr	r0, [pc, #220]	; (8003cc8 <HAL_RCC_ClockConfig+0x1dc>)
 8003bec:	f7fc fd0b 	bl	8000606 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	d129      	bne.n	8003c4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf8:	4b35      	ldr	r3, [pc, #212]	; (8003cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x11c>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e160      	b.n	8003eca <HAL_RCC_ClockConfig+0x3de>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c08:	f000 fa36 	bl	8004078 <RCC_GetSysClockFreqFromPLLSource>
 8003c0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4a30      	ldr	r2, [pc, #192]	; (8003cd4 <HAL_RCC_ClockConfig+0x1e8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d93f      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x1aa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c16:	4b2e      	ldr	r3, [pc, #184]	; (8003cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x14a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d033      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x1aa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d12f      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x1aa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c36:	4b26      	ldr	r3, [pc, #152]	; (8003cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c3e:	4a24      	ldr	r2, [pc, #144]	; (8003cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e024      	b.n	8003c96 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d109      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e132      	b.n	8003eca <HAL_RCC_ClockConfig+0x3de>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c64:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x188>
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e12a      	b.n	8003eca <HAL_RCC_ClockConfig+0x3de>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003c74:	f000 f93a 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003c78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	4a15      	ldr	r2, [pc, #84]	; (8003cd4 <HAL_RCC_ClockConfig+0x1e8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d909      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x1aa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c82:	4b13      	ldr	r3, [pc, #76]	; (8003cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c8a:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c96:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f023 0203 	bic.w	r2, r3, #3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	490b      	ldr	r1, [pc, #44]	; (8003cd0 <HAL_RCC_ClockConfig+0x1e4>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca8:	f7fc ff58 	bl	8000b5c <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	e013      	b.n	8003cd8 <HAL_RCC_ClockConfig+0x1ec>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb0:	f7fc ff54 	bl	8000b5c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d90a      	bls.n	8003cd8 <HAL_RCC_ClockConfig+0x1ec>
      {
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e101      	b.n	8003eca <HAL_RCC_ClockConfig+0x3de>
 8003cc6:	bf00      	nop
 8003cc8:	0800d130 	.word	0x0800d130
 8003ccc:	40022000 	.word	0x40022000
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd8:	4b7e      	ldr	r3, [pc, #504]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 020c 	and.w	r2, r3, #12
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d1e2      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x1c4>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d04c      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x2a4>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x222>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d02:	4b74      	ldr	r3, [pc, #464]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	4a73      	ldr	r2, [pc, #460]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003d08:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d0c:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x23e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d1a:	4b6e      	ldr	r3, [pc, #440]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d22:	4a6c      	ldr	r2, [pc, #432]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003d24:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d28:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d024      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x290>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b80      	cmp	r3, #128	; 0x80
 8003d38:	d020      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x290>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b90      	cmp	r3, #144	; 0x90
 8003d40:	d01c      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x290>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2ba0      	cmp	r3, #160	; 0xa0
 8003d48:	d018      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x290>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2bb0      	cmp	r3, #176	; 0xb0
 8003d50:	d014      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x290>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2bc0      	cmp	r3, #192	; 0xc0
 8003d58:	d010      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x290>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2bd0      	cmp	r3, #208	; 0xd0
 8003d60:	d00c      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x290>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2be0      	cmp	r3, #224	; 0xe0
 8003d68:	d008      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x290>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2bf0      	cmp	r3, #240	; 0xf0
 8003d70:	d004      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x290>
 8003d72:	f240 317b 	movw	r1, #891	; 0x37b
 8003d76:	4858      	ldr	r0, [pc, #352]	; (8003ed8 <HAL_RCC_ClockConfig+0x3ec>)
 8003d78:	f7fc fc45 	bl	8000606 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b55      	ldr	r3, [pc, #340]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4952      	ldr	r1, [pc, #328]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_ClockConfig+0x2b6>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d105      	bne.n	8003da2 <HAL_RCC_ClockConfig+0x2b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d96:	4b4f      	ldr	r3, [pc, #316]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4a4e      	ldr	r2, [pc, #312]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003d9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da2:	4b4e      	ldr	r3, [pc, #312]	; (8003edc <HAL_RCC_ClockConfig+0x3f0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d21d      	bcs.n	8003dec <HAL_RCC_ClockConfig+0x300>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db0:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <HAL_RCC_ClockConfig+0x3f0>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 020f 	bic.w	r2, r3, #15
 8003db8:	4948      	ldr	r1, [pc, #288]	; (8003edc <HAL_RCC_ClockConfig+0x3f0>)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dc0:	f7fc fecc 	bl	8000b5c <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_ClockConfig+0x2f2>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc8:	f7fc fec8 	bl	8000b5c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_ClockConfig+0x2f2>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e075      	b.n	8003eca <HAL_RCC_ClockConfig+0x3de>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b3f      	ldr	r3, [pc, #252]	; (8003edc <HAL_RCC_ClockConfig+0x3f0>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d1ed      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x2dc>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d025      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x358>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d018      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x346>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e08:	d013      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x346>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003e12:	d00e      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x346>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e1c:	d009      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x346>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e26:	d004      	beq.n	8003e32 <HAL_RCC_ClockConfig+0x346>
 8003e28:	f240 319d 	movw	r1, #925	; 0x39d
 8003e2c:	482a      	ldr	r0, [pc, #168]	; (8003ed8 <HAL_RCC_ClockConfig+0x3ec>)
 8003e2e:	f7fc fbea 	bl	8000606 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e32:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	4925      	ldr	r1, [pc, #148]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d026      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x3b2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d018      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x39e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e60:	d013      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x39e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003e6a:	d00e      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x39e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x39e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e7e:	d004      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x39e>
 8003e80:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003e84:	4814      	ldr	r0, [pc, #80]	; (8003ed8 <HAL_RCC_ClockConfig+0x3ec>)
 8003e86:	f7fc fbbe 	bl	8000606 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e8a:	4b12      	ldr	r3, [pc, #72]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	490e      	ldr	r1, [pc, #56]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e9e:	f000 f825 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <HAL_RCC_ClockConfig+0x3e8>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	490c      	ldr	r1, [pc, #48]	; (8003ee0 <HAL_RCC_ClockConfig+0x3f4>)
 8003eb0:	5ccb      	ldrb	r3, [r1, r3]
 8003eb2:	f003 031f 	and.w	r3, r3, #31
 8003eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <HAL_RCC_ClockConfig+0x3f8>)
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <HAL_RCC_ClockConfig+0x3fc>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f7fc fc5c 	bl	8000780 <HAL_InitTick>
 8003ec8:	4603      	mov	r3, r0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	0800d130 	.word	0x0800d130
 8003edc:	40022000 	.word	0x40022000
 8003ee0:	0800d30c 	.word	0x0800d30c
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	20000004 	.word	0x20000004

08003eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ef2:	4b2c      	ldr	r3, [pc, #176]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 030c 	and.w	r3, r3, #12
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d102      	bne.n	8003f04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	e047      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d102      	bne.n	8003f16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f10:	4b26      	ldr	r3, [pc, #152]	; (8003fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	e03e      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	f003 030c 	and.w	r3, r3, #12
 8003f1e:	2b0c      	cmp	r3, #12
 8003f20:	d136      	bne.n	8003f90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f22:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0303 	and.w	r3, r3, #3
 8003f2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f2c:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	091b      	lsrs	r3, r3, #4
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	3301      	adds	r3, #1
 8003f38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d10c      	bne.n	8003f5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f40:	4a1a      	ldr	r2, [pc, #104]	; (8003fac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f48:	4a16      	ldr	r2, [pc, #88]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f4a:	68d2      	ldr	r2, [r2, #12]
 8003f4c:	0a12      	lsrs	r2, r2, #8
 8003f4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	617b      	str	r3, [r7, #20]
      break;
 8003f58:	e00c      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	4a10      	ldr	r2, [pc, #64]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f64:	68d2      	ldr	r2, [r2, #12]
 8003f66:	0a12      	lsrs	r2, r2, #8
 8003f68:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f6c:	fb02 f303 	mul.w	r3, r2, r3
 8003f70:	617b      	str	r3, [r7, #20]
      break;
 8003f72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	0e5b      	lsrs	r3, r3, #25
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	e001      	b.n	8003f94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f94:	693b      	ldr	r3, [r7, #16]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	371c      	adds	r7, #28
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	00f42400 	.word	0x00f42400
 8003fac:	007a1200 	.word	0x007a1200

08003fb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000000 	.word	0x20000000

08003fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fcc:	f7ff fff0 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	0adb      	lsrs	r3, r3, #11
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	4904      	ldr	r1, [pc, #16]	; (8003ff0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	f003 031f 	and.w	r3, r3, #31
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	0800d31c 	.word	0x0800d31c

08003ff4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <HAL_RCC_GetClockConfig+0x1a>
 8004004:	f240 41e4 	movw	r1, #1252	; 0x4e4
 8004008:	4818      	ldr	r0, [pc, #96]	; (800406c <HAL_RCC_GetClockConfig+0x78>)
 800400a:	f7fc fafc 	bl	8000606 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_RCC_GetClockConfig+0x2a>
 8004014:	f240 41e5 	movw	r1, #1253	; 0x4e5
 8004018:	4814      	ldr	r0, [pc, #80]	; (800406c <HAL_RCC_GetClockConfig+0x78>)
 800401a:	f7fc faf4 	bl	8000606 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	220f      	movs	r2, #15
 8004022:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004024:	4b12      	ldr	r3, [pc, #72]	; (8004070 <HAL_RCC_GetClockConfig+0x7c>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 0203 	and.w	r2, r3, #3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <HAL_RCC_GetClockConfig+0x7c>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800403c:	4b0c      	ldr	r3, [pc, #48]	; (8004070 <HAL_RCC_GetClockConfig+0x7c>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_RCC_GetClockConfig+0x7c>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	08db      	lsrs	r3, r3, #3
 800404e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004056:	4b07      	ldr	r3, [pc, #28]	; (8004074 <HAL_RCC_GetClockConfig+0x80>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 020f 	and.w	r2, r3, #15
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	601a      	str	r2, [r3, #0]
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	0800d130 	.word	0x0800d130
 8004070:	40021000 	.word	0x40021000
 8004074:	40022000 	.word	0x40022000

08004078 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800407e:	4b1e      	ldr	r3, [pc, #120]	; (80040f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004088:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d10c      	bne.n	80040b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800409c:	4a17      	ldr	r2, [pc, #92]	; (80040fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	4a14      	ldr	r2, [pc, #80]	; (80040f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040a6:	68d2      	ldr	r2, [r2, #12]
 80040a8:	0a12      	lsrs	r2, r2, #8
 80040aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	617b      	str	r3, [r7, #20]
    break;
 80040b4:	e00c      	b.n	80040d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b6:	4a12      	ldr	r2, [pc, #72]	; (8004100 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	4a0e      	ldr	r2, [pc, #56]	; (80040f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040c0:	68d2      	ldr	r2, [r2, #12]
 80040c2:	0a12      	lsrs	r2, r2, #8
 80040c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
    break;
 80040ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d0:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	0e5b      	lsrs	r3, r3, #25
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80040ea:	687b      	ldr	r3, [r7, #4]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40021000 	.word	0x40021000
 80040fc:	007a1200 	.word	0x007a1200
 8004100:	00f42400 	.word	0x00f42400

08004104 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800410c:	2300      	movs	r3, #0
 800410e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004110:	2300      	movs	r3, #0
 8004112:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d175      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d16f      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d169      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d163      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0310 	and.w	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d15d      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d157      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004164:	2b00      	cmp	r3, #0
 8004166:	d151      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004170:	2b00      	cmp	r3, #0
 8004172:	d14b      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417c:	2b00      	cmp	r3, #0
 800417e:	d145      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d13f      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004194:	2b00      	cmp	r3, #0
 8004196:	d139      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d133      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d12d      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d127      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d121      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d11b      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d115      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10f      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d103      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x108>
 8004204:	2183      	movs	r1, #131	; 0x83
 8004206:	4855      	ldr	r0, [pc, #340]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004208:	f7fc f9fd 	bl	8000606 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80b2 	beq.w	800437e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421a:	2300      	movs	r3, #0
 800421c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004222:	2b00      	cmp	r3, #0
 8004224:	d012      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422e:	d00d      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004238:	d008      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004242:	d003      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x148>
 8004244:	218b      	movs	r1, #139	; 0x8b
 8004246:	4845      	ldr	r0, [pc, #276]	; (800435c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004248:	f7fc f9dd 	bl	8000606 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800424c:	4b44      	ldr	r3, [pc, #272]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10d      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004258:	4b41      	ldr	r3, [pc, #260]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	4a40      	ldr	r2, [pc, #256]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800425e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004262:	6593      	str	r3, [r2, #88]	; 0x58
 8004264:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426c:	60bb      	str	r3, [r7, #8]
 800426e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004270:	2301      	movs	r3, #1
 8004272:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004274:	4b3b      	ldr	r3, [pc, #236]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a3a      	ldr	r2, [pc, #232]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004280:	f7fc fc6c 	bl	8000b5c <HAL_GetTick>
 8004284:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004286:	e009      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004288:	f7fc fc68 	bl	8000b5c <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d902      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        ret = HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	74fb      	strb	r3, [r7, #19]
        break;
 800429a:	e005      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800429c:	4b31      	ldr	r3, [pc, #196]	; (8004364 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0ef      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x184>
      }
    }

    if(ret == HAL_OK)
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d15c      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x264>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80042ae:	4b2c      	ldr	r3, [pc, #176]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b8:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01e      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d019      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042ca:	4b25      	ldr	r3, [pc, #148]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042dc:	4a20      	ldr	r2, [pc, #128]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042e6:	4b1e      	ldr	r3, [pc, #120]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ec:	4a1c      	ldr	r2, [pc, #112]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042f6:	4a1a      	ldr	r2, [pc, #104]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d016      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fc fc28 	bl	8000b5c <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430e:	e00b      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004310:	f7fc fc24 	bl	8000b5c <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d902      	bls.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	74fb      	strb	r3, [r7, #19]
            break;
 8004326:	e006      	b.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004328:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0ec      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800433c:	4b08      	ldr	r3, [pc, #32]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434a:	4905      	ldr	r1, [pc, #20]	; (8004360 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004352:	e00b      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x268>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004354:	7cfb      	ldrb	r3, [r7, #19]
 8004356:	74bb      	strb	r3, [r7, #18]
 8004358:	e008      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x268>
 800435a:	bf00      	nop
 800435c:	0800d168 	.word	0x0800d168
 8004360:	40021000 	.word	0x40021000
 8004364:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800436c:	7c7b      	ldrb	r3, [r7, #17]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d105      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004372:	4b9a      	ldr	r3, [pc, #616]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	4a99      	ldr	r2, [pc, #612]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8004378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d01e      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00f      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d00b      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d007      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d003      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 80043aa:	21e0      	movs	r1, #224	; 0xe0
 80043ac:	488c      	ldr	r0, [pc, #560]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80043ae:	f7fc f92a 	bl	8000606 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043b2:	4b8a      	ldr	r3, [pc, #552]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b8:	f023 0203 	bic.w	r2, r3, #3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4986      	ldr	r1, [pc, #536]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01e      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00f      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d00b      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	2b0c      	cmp	r3, #12
 80043ea:	d007      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d003      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80043f4:	21ea      	movs	r1, #234	; 0xea
 80043f6:	487a      	ldr	r0, [pc, #488]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80043f8:	f7fc f905 	bl	8000606 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043fc:	4b77      	ldr	r3, [pc, #476]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004402:	f023 020c 	bic.w	r2, r3, #12
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	4974      	ldr	r1, [pc, #464]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d01e      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x358>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00f      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	2b10      	cmp	r3, #16
 800442c:	d00b      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b30      	cmp	r3, #48	; 0x30
 8004434:	d007      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	2b20      	cmp	r3, #32
 800443c:	d003      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800443e:	21f4      	movs	r1, #244	; 0xf4
 8004440:	4867      	ldr	r0, [pc, #412]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004442:	f7fc f8e0 	bl	8000606 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004446:	4b65      	ldr	r3, [pc, #404]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4961      	ldr	r1, [pc, #388]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8004456:	4313      	orrs	r3, r2
 8004458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0308 	and.w	r3, r3, #8
 8004464:	2b00      	cmp	r3, #0
 8004466:	d01e      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00f      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d00b      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2bc0      	cmp	r3, #192	; 0xc0
 800447e:	d007      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d003      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8004488:	21ff      	movs	r1, #255	; 0xff
 800448a:	4855      	ldr	r0, [pc, #340]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 800448c:	f7fc f8bb 	bl	8000606 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004490:	4b52      	ldr	r3, [pc, #328]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004496:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	494f      	ldr	r1, [pc, #316]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0310 	and.w	r3, r3, #16
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d022      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d013      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c2:	d00e      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044cc:	d009      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d6:	d004      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80044d8:	f44f 7186 	mov.w	r1, #268	; 0x10c
 80044dc:	4840      	ldr	r0, [pc, #256]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80044de:	f7fc f892 	bl	8000606 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044e2:	4b3e      	ldr	r3, [pc, #248]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	493a      	ldr	r1, [pc, #232]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d022      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d013      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004514:	d00e      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800451e:	d009      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004528:	d004      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x430>
 800452a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800452e:	482c      	ldr	r0, [pc, #176]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004530:	f7fc f869 	bl	8000606 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004534:	4b29      	ldr	r3, [pc, #164]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	4926      	ldr	r1, [pc, #152]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01d      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x48e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00e      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004566:	d009      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	69db      	ldr	r3, [r3, #28]
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004570:	d004      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004572:	f44f 7191 	mov.w	r1, #290	; 0x122
 8004576:	481a      	ldr	r0, [pc, #104]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 8004578:	f7fc f845 	bl	8000606 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800457c:	4b17      	ldr	r3, [pc, #92]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	4914      	ldr	r1, [pc, #80]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d022      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00e      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ae:	d009      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045b8:	d004      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 80045ba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80045be:	4808      	ldr	r0, [pc, #32]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>)
 80045c0:	f7fc f821 	bl	8000606 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4902      	ldr	r1, [pc, #8]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045da:	e003      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80045dc:	40021000 	.word	0x40021000
 80045e0:	0800d168 	.word	0x0800d168
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d01d      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00e      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x512>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004600:	d009      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x512>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800460a:	d004      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x512>
 800460c:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004610:	489e      	ldr	r0, [pc, #632]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8004612:	f7fb fff8 	bl	8000606 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004616:	4b9e      	ldr	r3, [pc, #632]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800461c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	499a      	ldr	r1, [pc, #616]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01b      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x56c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00c      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x556>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	2b01      	cmp	r3, #1
 8004646:	d008      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x556>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800464c:	2b02      	cmp	r3, #2
 800464e:	d004      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x556>
 8004650:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8004654:	488d      	ldr	r0, [pc, #564]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8004656:	f7fb ffd6 	bl	8000606 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800465a:	4b8d      	ldr	r3, [pc, #564]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800465c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004660:	f023 0203 	bic.w	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	4989      	ldr	r1, [pc, #548]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004678:	2b00      	cmp	r3, #0
 800467a:	d022      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d013      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800468c:	d00e      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004696:	d009      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046a0:	d004      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
 80046a2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80046a6:	4879      	ldr	r0, [pc, #484]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 80046a8:	f7fb ffad 	bl	8000606 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ac:	4b78      	ldr	r3, [pc, #480]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	4975      	ldr	r1, [pc, #468]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d02d      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d013      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046de:	d00e      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046e8:	d009      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80046f2:	d004      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x5fa>
 80046f4:	f44f 71ac 	mov.w	r1, #344	; 0x158
 80046f8:	4864      	ldr	r0, [pc, #400]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 80046fa:	f7fb ff84 	bl	8000606 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046fe:	4b64      	ldr	r3, [pc, #400]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470c:	4960      	ldr	r1, [pc, #384]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800470e:	4313      	orrs	r3, r2
 8004710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800471c:	d105      	bne.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x626>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800471e:	4b5c      	ldr	r3, [pc, #368]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	4a5b      	ldr	r2, [pc, #364]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004728:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004732:	2b00      	cmp	r3, #0
 8004734:	d02d      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x68e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	2b00      	cmp	r3, #0
 800473c:	d013      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004746:	d00e      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004750:	d009      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800475a:	d004      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800475c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8004760:	484a      	ldr	r0, [pc, #296]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8004762:	f7fb ff50 	bl	8000606 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004766:	4b4a      	ldr	r3, [pc, #296]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004774:	4946      	ldr	r1, [pc, #280]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004784:	d105      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004786:	4b42      	ldr	r3, [pc, #264]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	4a41      	ldr	r2, [pc, #260]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800478c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004790:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d028      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d00e      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ae:	d009      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047b8:	d004      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 80047ba:	f240 1179 	movw	r1, #377	; 0x179
 80047be:	4833      	ldr	r0, [pc, #204]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 80047c0:	f7fb ff21 	bl	8000606 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047c4:	4b32      	ldr	r3, [pc, #200]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80047c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	492f      	ldr	r1, [pc, #188]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047e2:	d105      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e4:	4b2a      	ldr	r3, [pc, #168]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	4a29      	ldr	r2, [pc, #164]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 80047ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d023      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x740>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d009      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800480c:	d004      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x714>
 800480e:	f240 118b 	movw	r1, #395	; 0x18b
 8004812:	481e      	ldr	r0, [pc, #120]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8004814:	f7fb fef7 	bl	8000606 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004818:	4b1d      	ldr	r3, [pc, #116]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004826:	491a      	ldr	r1, [pc, #104]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004836:	d105      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004838:	4b15      	ldr	r3, [pc, #84]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4a14      	ldr	r2, [pc, #80]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800483e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004842:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d028      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004860:	d004      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x768>
 8004862:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8004866:	4809      	ldr	r0, [pc, #36]	; (800488c <HAL_RCCEx_PeriphCLKConfig+0x788>)
 8004868:	f7fb fecd 	bl	8000606 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800486c:	4b08      	ldr	r3, [pc, #32]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	4905      	ldr	r1, [pc, #20]	; (8004890 <HAL_RCCEx_PeriphCLKConfig+0x78c>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800488a:	e003      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x790>
 800488c:	0800d168 	.word	0x0800d168
 8004890:	40021000 	.word	0x40021000
 8004894:	d105      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004896:	4b4c      	ldr	r3, [pc, #304]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	4a4b      	ldr	r2, [pc, #300]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800489c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048a0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d028      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00e      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048be:	d009      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c8:	d004      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
 80048ca:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
 80048ce:	483f      	ldr	r0, [pc, #252]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 80048d0:	f7fb fe99 	bl	8000606 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048d4:	4b3c      	ldr	r3, [pc, #240]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	4939      	ldr	r1, [pc, #228]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048f2:	d105      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80048f4:	4b34      	ldr	r3, [pc, #208]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4a33      	ldr	r2, [pc, #204]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80048fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d028      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x85a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00e      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d009      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004926:	d004      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8004928:	f240 11b9 	movw	r1, #441	; 0x1b9
 800492c:	4827      	ldr	r0, [pc, #156]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800492e:	f7fb fe6a 	bl	8000606 <assert_failed>

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004932:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004940:	4921      	ldr	r1, [pc, #132]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004950:	d105      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x85a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004952:	4b1d      	ldr	r3, [pc, #116]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4a1c      	ldr	r2, [pc, #112]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d028      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004972:	d00d      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004978:	2b00      	cmp	r3, #0
 800497a:	d009      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004984:	d004      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x88c>
 8004986:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800498a:	4810      	ldr	r0, [pc, #64]	; (80049cc <HAL_RCCEx_PeriphCLKConfig+0x8c8>)
 800498c:	f7fb fe3b 	bl	8000606 <assert_failed>

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004990:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8004992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004996:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	490a      	ldr	r1, [pc, #40]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049ae:	d105      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4a04      	ldr	r2, [pc, #16]	; (80049c8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80049b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80049bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40021000 	.word	0x40021000
 80049cc:	0800d168 	.word	0x0800d168

080049d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e1ed      	b.n	8004dbe <HAL_SPI_Init+0x3ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a7e      	ldr	r2, [pc, #504]	; (8004be0 <HAL_SPI_Init+0x210>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_SPI_Init+0x44>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a7c      	ldr	r2, [pc, #496]	; (8004be4 <HAL_SPI_Init+0x214>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_SPI_Init+0x44>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a7b      	ldr	r2, [pc, #492]	; (8004be8 <HAL_SPI_Init+0x218>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_SPI_Init+0x44>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a79      	ldr	r2, [pc, #484]	; (8004bec <HAL_SPI_Init+0x21c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_SPI_Init+0x44>
 8004a0a:	f240 1145 	movw	r1, #325	; 0x145
 8004a0e:	4878      	ldr	r0, [pc, #480]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004a10:	f7fb fdf9 	bl	8000606 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d009      	beq.n	8004a30 <HAL_SPI_Init+0x60>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a24:	d004      	beq.n	8004a30 <HAL_SPI_Init+0x60>
 8004a26:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8004a2a:	4871      	ldr	r0, [pc, #452]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004a2c:	f7fb fdeb 	bl	8000606 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00e      	beq.n	8004a56 <HAL_SPI_Init+0x86>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a40:	d009      	beq.n	8004a56 <HAL_SPI_Init+0x86>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4a:	d004      	beq.n	8004a56 <HAL_SPI_Init+0x86>
 8004a4c:	f240 1147 	movw	r1, #327	; 0x147
 8004a50:	4867      	ldr	r0, [pc, #412]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004a52:	f7fb fdd8 	bl	8000606 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a5e:	d040      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8004a68:	d03b      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004a72:	d036      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a7c:	d031      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004a86:	d02c      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8004a90:	d027      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004a9a:	d022      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa4:	d01d      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004aae:	d018      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ab8:	d013      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004acc:	d009      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ad6:	d004      	beq.n	8004ae2 <HAL_SPI_Init+0x112>
 8004ad8:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8004adc:	4844      	ldr	r0, [pc, #272]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004ade:	f7fb fd92 	bl	8000606 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aea:	d00d      	beq.n	8004b08 <HAL_SPI_Init+0x138>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	699b      	ldr	r3, [r3, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d009      	beq.n	8004b08 <HAL_SPI_Init+0x138>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004afc:	d004      	beq.n	8004b08 <HAL_SPI_Init+0x138>
 8004afe:	f240 1149 	movw	r1, #329	; 0x149
 8004b02:	483b      	ldr	r0, [pc, #236]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004b04:	f7fb fd7f 	bl	8000606 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d008      	beq.n	8004b22 <HAL_SPI_Init+0x152>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <HAL_SPI_Init+0x152>
 8004b18:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004b1c:	4834      	ldr	r0, [pc, #208]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004b1e:	f7fb fd72 	bl	8000606 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d020      	beq.n	8004b6c <HAL_SPI_Init+0x19c>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d01c      	beq.n	8004b6c <HAL_SPI_Init+0x19c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	2b10      	cmp	r3, #16
 8004b38:	d018      	beq.n	8004b6c <HAL_SPI_Init+0x19c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	2b18      	cmp	r3, #24
 8004b40:	d014      	beq.n	8004b6c <HAL_SPI_Init+0x19c>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	d010      	beq.n	8004b6c <HAL_SPI_Init+0x19c>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	2b28      	cmp	r3, #40	; 0x28
 8004b50:	d00c      	beq.n	8004b6c <HAL_SPI_Init+0x19c>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	2b30      	cmp	r3, #48	; 0x30
 8004b58:	d008      	beq.n	8004b6c <HAL_SPI_Init+0x19c>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	2b38      	cmp	r3, #56	; 0x38
 8004b60:	d004      	beq.n	8004b6c <HAL_SPI_Init+0x19c>
 8004b62:	f240 114b 	movw	r1, #331	; 0x14b
 8004b66:	4822      	ldr	r0, [pc, #136]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004b68:	f7fb fd4d 	bl	8000606 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_SPI_Init+0x1b6>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	2b80      	cmp	r3, #128	; 0x80
 8004b7a:	d004      	beq.n	8004b86 <HAL_SPI_Init+0x1b6>
 8004b7c:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8004b80:	481b      	ldr	r0, [pc, #108]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004b82:	f7fb fd40 	bl	8000606 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d008      	beq.n	8004ba0 <HAL_SPI_Init+0x1d0>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d004      	beq.n	8004ba0 <HAL_SPI_Init+0x1d0>
 8004b96:	f240 114d 	movw	r1, #333	; 0x14d
 8004b9a:	4815      	ldr	r0, [pc, #84]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004b9c:	f7fb fd33 	bl	8000606 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d154      	bne.n	8004c52 <HAL_SPI_Init+0x282>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_SPI_Init+0x1f2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d004      	beq.n	8004bc2 <HAL_SPI_Init+0x1f2>
 8004bb8:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004bbc:	480c      	ldr	r0, [pc, #48]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004bbe:	f7fb fd22 	bl	8000606 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d014      	beq.n	8004bf4 <HAL_SPI_Init+0x224>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d010      	beq.n	8004bf4 <HAL_SPI_Init+0x224>
 8004bd2:	f240 1151 	movw	r1, #337	; 0x151
 8004bd6:	4806      	ldr	r0, [pc, #24]	; (8004bf0 <HAL_SPI_Init+0x220>)
 8004bd8:	f7fb fd15 	bl	8000606 <assert_failed>
 8004bdc:	e00a      	b.n	8004bf4 <HAL_SPI_Init+0x224>
 8004bde:	bf00      	nop
 8004be0:	40013000 	.word	0x40013000
 8004be4:	40003800 	.word	0x40003800
 8004be8:	40003c00 	.word	0x40003c00
 8004bec:	40013c00 	.word	0x40013c00
 8004bf0:	0800d1a4 	.word	0x0800d1a4

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bfc:	d125      	bne.n	8004c4a <HAL_SPI_Init+0x27a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d050      	beq.n	8004ca8 <HAL_SPI_Init+0x2d8>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d04c      	beq.n	8004ca8 <HAL_SPI_Init+0x2d8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d048      	beq.n	8004ca8 <HAL_SPI_Init+0x2d8>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	2b18      	cmp	r3, #24
 8004c1c:	d044      	beq.n	8004ca8 <HAL_SPI_Init+0x2d8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d040      	beq.n	8004ca8 <HAL_SPI_Init+0x2d8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	2b28      	cmp	r3, #40	; 0x28
 8004c2c:	d03c      	beq.n	8004ca8 <HAL_SPI_Init+0x2d8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	2b30      	cmp	r3, #48	; 0x30
 8004c34:	d038      	beq.n	8004ca8 <HAL_SPI_Init+0x2d8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69db      	ldr	r3, [r3, #28]
 8004c3a:	2b38      	cmp	r3, #56	; 0x38
 8004c3c:	d034      	beq.n	8004ca8 <HAL_SPI_Init+0x2d8>
 8004c3e:	f240 1155 	movw	r1, #341	; 0x155
 8004c42:	4861      	ldr	r0, [pc, #388]	; (8004dc8 <HAL_SPI_Init+0x3f8>)
 8004c44:	f7fb fcdf 	bl	8000606 <assert_failed>
 8004c48:	e02e      	b.n	8004ca8 <HAL_SPI_Init+0x2d8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	61da      	str	r2, [r3, #28]
 8004c50:	e02a      	b.n	8004ca8 <HAL_SPI_Init+0x2d8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d020      	beq.n	8004c9c <HAL_SPI_Init+0x2cc>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d01c      	beq.n	8004c9c <HAL_SPI_Init+0x2cc>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	2b10      	cmp	r3, #16
 8004c68:	d018      	beq.n	8004c9c <HAL_SPI_Init+0x2cc>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	2b18      	cmp	r3, #24
 8004c70:	d014      	beq.n	8004c9c <HAL_SPI_Init+0x2cc>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d010      	beq.n	8004c9c <HAL_SPI_Init+0x2cc>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	2b28      	cmp	r3, #40	; 0x28
 8004c80:	d00c      	beq.n	8004c9c <HAL_SPI_Init+0x2cc>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	2b30      	cmp	r3, #48	; 0x30
 8004c88:	d008      	beq.n	8004c9c <HAL_SPI_Init+0x2cc>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	69db      	ldr	r3, [r3, #28]
 8004c8e:	2b38      	cmp	r3, #56	; 0x38
 8004c90:	d004      	beq.n	8004c9c <HAL_SPI_Init+0x2cc>
 8004c92:	f240 115f 	movw	r1, #351	; 0x15f
 8004c96:	484c      	ldr	r0, [pc, #304]	; (8004dc8 <HAL_SPI_Init+0x3f8>)
 8004c98:	f7fb fcb5 	bl	8000606 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d106      	bne.n	8004cc8 <HAL_SPI_Init+0x2f8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fb fce8 	bl	8000698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ce8:	d902      	bls.n	8004cf0 <HAL_SPI_Init+0x320>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	e002      	b.n	8004cf6 <HAL_SPI_Init+0x326>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cfe:	d007      	beq.n	8004d10 <HAL_SPI_Init+0x340>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d08:	d002      	beq.n	8004d10 <HAL_SPI_Init+0x340>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
 8004d44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	ea42 0103 	orr.w	r1, r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	f003 0204 	and.w	r2, r3, #4
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	431a      	orrs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d8c:	ea42 0103 	orr.w	r1, r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	0800d1a4 	.word	0x0800d1a4

08004dcc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b088      	sub	sp, #32
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10f      	bne.n	8004e10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	099b      	lsrs	r3, r3, #6
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d004      	beq.n	8004e10 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
    return;
 8004e0e:	e0d7      	b.n	8004fc0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	085b      	lsrs	r3, r3, #1
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_SPI_IRQHandler+0x66>
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	09db      	lsrs	r3, r3, #7
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d004      	beq.n	8004e32 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	4798      	blx	r3
    return;
 8004e30:	e0c6      	b.n	8004fc0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	095b      	lsrs	r3, r3, #5
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10c      	bne.n	8004e58 <HAL_SPI_IRQHandler+0x8c>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	099b      	lsrs	r3, r3, #6
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	0a1b      	lsrs	r3, r3, #8
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 80b4 	beq.w	8004fc0 <HAL_SPI_IRQHandler+0x1f4>
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	095b      	lsrs	r3, r3, #5
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 80ad 	beq.w	8004fc0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	099b      	lsrs	r3, r3, #6
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d023      	beq.n	8004eba <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d011      	beq.n	8004ea2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e82:	f043 0204 	orr.w	r2, r3, #4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	617b      	str	r3, [r7, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	e00b      	b.n	8004eba <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	693b      	ldr	r3, [r7, #16]
        return;
 8004eb8:	e082      	b.n	8004fc0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	095b      	lsrs	r3, r3, #5
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d014      	beq.n	8004ef0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eca:	f043 0201 	orr.w	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eec:	601a      	str	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00c      	beq.n	8004f16 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f00:	f043 0208 	orr.w	r2, r3, #8
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	60bb      	str	r3, [r7, #8]
 8004f14:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d04f      	beq.n	8004fbe <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f2c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <HAL_SPI_IRQHandler+0x17e>
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d034      	beq.n	8004fb4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0203 	bic.w	r2, r2, #3
 8004f58:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d011      	beq.n	8004f86 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	4a18      	ldr	r2, [pc, #96]	; (8004fc8 <HAL_SPI_IRQHandler+0x1fc>)
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fc f8e8 	bl	8001144 <HAL_DMA_Abort_IT>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d016      	beq.n	8004fbc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f92:	4a0d      	ldr	r2, [pc, #52]	; (8004fc8 <HAL_SPI_IRQHandler+0x1fc>)
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fc f8d2 	bl	8001144 <HAL_DMA_Abort_IT>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004faa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004fb2:	e003      	b.n	8004fbc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f809 	bl	8004fcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004fba:	e000      	b.n	8004fbe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004fbc:	bf00      	nop
    return;
 8004fbe:	bf00      	nop
  }
}
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	08004fe1 	.word	0x08004fe1

08004fcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f7ff ffe5 	bl	8004fcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e0c3      	b.n	80051a6 <HAL_TIM_Base_Init+0x19a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a63      	ldr	r2, [pc, #396]	; (80051b0 <HAL_TIM_Base_Init+0x1a4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d03b      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005030:	d036      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a5f      	ldr	r2, [pc, #380]	; (80051b4 <HAL_TIM_Base_Init+0x1a8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d031      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a5d      	ldr	r2, [pc, #372]	; (80051b8 <HAL_TIM_Base_Init+0x1ac>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d02c      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a5c      	ldr	r2, [pc, #368]	; (80051bc <HAL_TIM_Base_Init+0x1b0>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d027      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a5a      	ldr	r2, [pc, #360]	; (80051c0 <HAL_TIM_Base_Init+0x1b4>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d022      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a59      	ldr	r2, [pc, #356]	; (80051c4 <HAL_TIM_Base_Init+0x1b8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d01d      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a57      	ldr	r2, [pc, #348]	; (80051c8 <HAL_TIM_Base_Init+0x1bc>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a56      	ldr	r2, [pc, #344]	; (80051cc <HAL_TIM_Base_Init+0x1c0>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a54      	ldr	r2, [pc, #336]	; (80051d0 <HAL_TIM_Base_Init+0x1c4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a53      	ldr	r2, [pc, #332]	; (80051d4 <HAL_TIM_Base_Init+0x1c8>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a51      	ldr	r2, [pc, #324]	; (80051d8 <HAL_TIM_Base_Init+0x1cc>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_TIM_Base_Init+0x94>
 8005096:	f44f 7191 	mov.w	r1, #290	; 0x122
 800509a:	4850      	ldr	r0, [pc, #320]	; (80051dc <HAL_TIM_Base_Init+0x1d0>)
 800509c:	f7fb fab3 	bl	8000606 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d014      	beq.n	80050d2 <HAL_TIM_Base_Init+0xc6>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	2b10      	cmp	r3, #16
 80050ae:	d010      	beq.n	80050d2 <HAL_TIM_Base_Init+0xc6>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d00c      	beq.n	80050d2 <HAL_TIM_Base_Init+0xc6>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d008      	beq.n	80050d2 <HAL_TIM_Base_Init+0xc6>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	2b60      	cmp	r3, #96	; 0x60
 80050c6:	d004      	beq.n	80050d2 <HAL_TIM_Base_Init+0xc6>
 80050c8:	f240 1123 	movw	r1, #291	; 0x123
 80050cc:	4843      	ldr	r0, [pc, #268]	; (80051dc <HAL_TIM_Base_Init+0x1d0>)
 80050ce:	f7fb fa9a 	bl	8000606 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00e      	beq.n	80050f8 <HAL_TIM_Base_Init+0xec>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e2:	d009      	beq.n	80050f8 <HAL_TIM_Base_Init+0xec>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ec:	d004      	beq.n	80050f8 <HAL_TIM_Base_Init+0xec>
 80050ee:	f44f 7192 	mov.w	r1, #292	; 0x124
 80050f2:	483a      	ldr	r0, [pc, #232]	; (80051dc <HAL_TIM_Base_Init+0x1d0>)
 80050f4:	f7fb fa87 	bl	8000606 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d008      	beq.n	8005112 <HAL_TIM_Base_Init+0x106>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	2b80      	cmp	r3, #128	; 0x80
 8005106:	d004      	beq.n	8005112 <HAL_TIM_Base_Init+0x106>
 8005108:	f240 1125 	movw	r1, #293	; 0x125
 800510c:	4833      	ldr	r0, [pc, #204]	; (80051dc <HAL_TIM_Base_Init+0x1d0>)
 800510e:	f7fb fa7a 	bl	8000606 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_TIM_Base_Init+0x120>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f85a 	bl	80051e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 fac0 	bl	80056c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40001000 	.word	0x40001000
 80051c4:	40001400 	.word	0x40001400
 80051c8:	40013400 	.word	0x40013400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800
 80051d8:	40015000 	.word	0x40015000
 80051dc:	0800d1dc 	.word	0x0800d1dc

080051e0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a4f      	ldr	r2, [pc, #316]	; (8005340 <HAL_TIM_Base_Start_IT+0x14c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d03b      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520e:	d036      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a4b      	ldr	r2, [pc, #300]	; (8005344 <HAL_TIM_Base_Start_IT+0x150>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d031      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a4a      	ldr	r2, [pc, #296]	; (8005348 <HAL_TIM_Base_Start_IT+0x154>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d02c      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a48      	ldr	r2, [pc, #288]	; (800534c <HAL_TIM_Base_Start_IT+0x158>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d027      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a47      	ldr	r2, [pc, #284]	; (8005350 <HAL_TIM_Base_Start_IT+0x15c>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d022      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a45      	ldr	r2, [pc, #276]	; (8005354 <HAL_TIM_Base_Start_IT+0x160>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d01d      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a44      	ldr	r2, [pc, #272]	; (8005358 <HAL_TIM_Base_Start_IT+0x164>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d018      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a42      	ldr	r2, [pc, #264]	; (800535c <HAL_TIM_Base_Start_IT+0x168>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d013      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a41      	ldr	r2, [pc, #260]	; (8005360 <HAL_TIM_Base_Start_IT+0x16c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00e      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a3f      	ldr	r2, [pc, #252]	; (8005364 <HAL_TIM_Base_Start_IT+0x170>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d009      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a3e      	ldr	r2, [pc, #248]	; (8005368 <HAL_TIM_Base_Start_IT+0x174>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d004      	beq.n	800527e <HAL_TIM_Base_Start_IT+0x8a>
 8005274:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005278:	483c      	ldr	r0, [pc, #240]	; (800536c <HAL_TIM_Base_Start_IT+0x178>)
 800527a:	f7fb f9c4 	bl	8000606 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b01      	cmp	r3, #1
 8005288:	d001      	beq.n	800528e <HAL_TIM_Base_Start_IT+0x9a>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e054      	b.n	8005338 <HAL_TIM_Base_Start_IT+0x144>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a25      	ldr	r2, [pc, #148]	; (8005340 <HAL_TIM_Base_Start_IT+0x14c>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d022      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x102>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b8:	d01d      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x102>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a21      	ldr	r2, [pc, #132]	; (8005344 <HAL_TIM_Base_Start_IT+0x150>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d018      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x102>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a1f      	ldr	r2, [pc, #124]	; (8005348 <HAL_TIM_Base_Start_IT+0x154>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x102>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a1e      	ldr	r2, [pc, #120]	; (800534c <HAL_TIM_Base_Start_IT+0x158>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x102>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a1e      	ldr	r2, [pc, #120]	; (8005358 <HAL_TIM_Base_Start_IT+0x164>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x102>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a1d      	ldr	r2, [pc, #116]	; (800535c <HAL_TIM_Base_Start_IT+0x168>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_Base_Start_IT+0x102>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <HAL_TIM_Base_Start_IT+0x174>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d115      	bne.n	8005322 <HAL_TIM_Base_Start_IT+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	4b1c      	ldr	r3, [pc, #112]	; (8005370 <HAL_TIM_Base_Start_IT+0x17c>)
 80052fe:	4013      	ands	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b06      	cmp	r3, #6
 8005306:	d015      	beq.n	8005334 <HAL_TIM_Base_Start_IT+0x140>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530e:	d011      	beq.n	8005334 <HAL_TIM_Base_Start_IT+0x140>
    {
      __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	e008      	b.n	8005334 <HAL_TIM_Base_Start_IT+0x140>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	e000      	b.n	8005336 <HAL_TIM_Base_Start_IT+0x142>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005334:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40001000 	.word	0x40001000
 8005354:	40001400 	.word	0x40001400
 8005358:	40013400 	.word	0x40013400
 800535c:	40014000 	.word	0x40014000
 8005360:	40014400 	.word	0x40014400
 8005364:	40014800 	.word	0x40014800
 8005368:	40015000 	.word	0x40015000
 800536c:	0800d1dc 	.word	0x0800d1dc
 8005370:	00010007 	.word	0x00010007

08005374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b02      	cmp	r3, #2
 8005388:	d122      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b02      	cmp	r3, #2
 8005396:	d11b      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0202 	mvn.w	r2, #2
 80053a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f965 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f957 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f968 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d122      	bne.n	8005424 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d11b      	bne.n	8005424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0204 	mvn.w	r2, #4
 80053f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2202      	movs	r2, #2
 80053fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f93b 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f92d 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 f93e 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b08      	cmp	r3, #8
 8005430:	d122      	bne.n	8005478 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b08      	cmp	r3, #8
 800543e:	d11b      	bne.n	8005478 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0208 	mvn.w	r2, #8
 8005448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2204      	movs	r2, #4
 800544e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f911 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 8005464:	e005      	b.n	8005472 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f903 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f914 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b10      	cmp	r3, #16
 8005484:	d122      	bne.n	80054cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b10      	cmp	r3, #16
 8005492:	d11b      	bne.n	80054cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0210 	mvn.w	r2, #16
 800549c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2208      	movs	r2, #8
 80054a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f8e7 	bl	8005686 <HAL_TIM_IC_CaptureCallback>
 80054b8:	e005      	b.n	80054c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8d9 	bl	8005672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f8ea 	bl	800569a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d10e      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d107      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0201 	mvn.w	r2, #1
 80054f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7fb f86e 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005502:	2b80      	cmp	r3, #128	; 0x80
 8005504:	d10e      	bne.n	8005524 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005510:	2b80      	cmp	r3, #128	; 0x80
 8005512:	d107      	bne.n	8005524 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800551c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f982 	bl	8005828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005532:	d10e      	bne.n	8005552 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	d107      	bne.n	8005552 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800554a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 f975 	bl	800583c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800555c:	2b40      	cmp	r3, #64	; 0x40
 800555e:	d10e      	bne.n	800557e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556a:	2b40      	cmp	r3, #64	; 0x40
 800556c:	d107      	bne.n	800557e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f898 	bl	80056ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0320 	and.w	r3, r3, #32
 8005588:	2b20      	cmp	r3, #32
 800558a:	d10e      	bne.n	80055aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b20      	cmp	r3, #32
 8005598:	d107      	bne.n	80055aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f06f 0220 	mvn.w	r2, #32
 80055a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f935 	bl	8005814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b8:	d10f      	bne.n	80055da <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c8:	d107      	bne.n	80055da <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80055d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f93b 	bl	8005850 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e8:	d10f      	bne.n	800560a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055f8:	d107      	bne.n	800560a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f92d 	bl	8005864 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005618:	d10f      	bne.n	800563a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005628:	d107      	bne.n	800563a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f91f 	bl	8005878 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005644:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005648:	d10f      	bne.n	800566a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005654:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005658:	d107      	bne.n	800566a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f911 	bl	800588c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800566a:	bf00      	nop
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a46      	ldr	r2, [pc, #280]	; (80057f0 <TIM_Base_SetConfig+0x12c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d017      	beq.n	800570c <TIM_Base_SetConfig+0x48>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e2:	d013      	beq.n	800570c <TIM_Base_SetConfig+0x48>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a43      	ldr	r2, [pc, #268]	; (80057f4 <TIM_Base_SetConfig+0x130>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d00f      	beq.n	800570c <TIM_Base_SetConfig+0x48>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a42      	ldr	r2, [pc, #264]	; (80057f8 <TIM_Base_SetConfig+0x134>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0x48>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a41      	ldr	r2, [pc, #260]	; (80057fc <TIM_Base_SetConfig+0x138>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0x48>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a40      	ldr	r2, [pc, #256]	; (8005800 <TIM_Base_SetConfig+0x13c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0x48>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a3f      	ldr	r2, [pc, #252]	; (8005804 <TIM_Base_SetConfig+0x140>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d108      	bne.n	800571e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a33      	ldr	r2, [pc, #204]	; (80057f0 <TIM_Base_SetConfig+0x12c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d023      	beq.n	800576e <TIM_Base_SetConfig+0xaa>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572c:	d01f      	beq.n	800576e <TIM_Base_SetConfig+0xaa>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a30      	ldr	r2, [pc, #192]	; (80057f4 <TIM_Base_SetConfig+0x130>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d01b      	beq.n	800576e <TIM_Base_SetConfig+0xaa>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2f      	ldr	r2, [pc, #188]	; (80057f8 <TIM_Base_SetConfig+0x134>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d017      	beq.n	800576e <TIM_Base_SetConfig+0xaa>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a2e      	ldr	r2, [pc, #184]	; (80057fc <TIM_Base_SetConfig+0x138>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <TIM_Base_SetConfig+0xaa>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2d      	ldr	r2, [pc, #180]	; (8005800 <TIM_Base_SetConfig+0x13c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00f      	beq.n	800576e <TIM_Base_SetConfig+0xaa>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2d      	ldr	r2, [pc, #180]	; (8005808 <TIM_Base_SetConfig+0x144>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d00b      	beq.n	800576e <TIM_Base_SetConfig+0xaa>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2c      	ldr	r2, [pc, #176]	; (800580c <TIM_Base_SetConfig+0x148>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d007      	beq.n	800576e <TIM_Base_SetConfig+0xaa>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2b      	ldr	r2, [pc, #172]	; (8005810 <TIM_Base_SetConfig+0x14c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_Base_SetConfig+0xaa>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a26      	ldr	r2, [pc, #152]	; (8005804 <TIM_Base_SetConfig+0x140>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d108      	bne.n	8005780 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68fa      	ldr	r2, [r7, #12]
 8005792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <TIM_Base_SetConfig+0x12c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d013      	beq.n	80057d4 <TIM_Base_SetConfig+0x110>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a14      	ldr	r2, [pc, #80]	; (8005800 <TIM_Base_SetConfig+0x13c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d00f      	beq.n	80057d4 <TIM_Base_SetConfig+0x110>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a14      	ldr	r2, [pc, #80]	; (8005808 <TIM_Base_SetConfig+0x144>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d00b      	beq.n	80057d4 <TIM_Base_SetConfig+0x110>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <TIM_Base_SetConfig+0x148>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d007      	beq.n	80057d4 <TIM_Base_SetConfig+0x110>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a12      	ldr	r2, [pc, #72]	; (8005810 <TIM_Base_SetConfig+0x14c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_Base_SetConfig+0x110>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a0d      	ldr	r2, [pc, #52]	; (8005804 <TIM_Base_SetConfig+0x140>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d103      	bne.n	80057dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	615a      	str	r2, [r3, #20]
}
 80057e2:	bf00      	nop
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40000400 	.word	0x40000400
 80057f8:	40000800 	.word	0x40000800
 80057fc:	40000c00 	.word	0x40000c00
 8005800:	40013400 	.word	0x40013400
 8005804:	40015000 	.word	0x40015000
 8005808:	40014000 	.word	0x40014000
 800580c:	40014400 	.word	0x40014400
 8005810:	40014800 	.word	0x40014800

08005814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e06f      	b.n	8005992 <HAL_WWDG_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_WWDG_ALL_INSTANCE(hwwdg->Instance));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a39      	ldr	r2, [pc, #228]	; (800599c <HAL_WWDG_Init+0xfc>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <HAL_WWDG_Init+0x24>
 80058bc:	21b9      	movs	r1, #185	; 0xb9
 80058be:	4838      	ldr	r0, [pc, #224]	; (80059a0 <HAL_WWDG_Init+0x100>)
 80058c0:	f7fa fea1 	bl	8000606 <assert_failed>
  assert_param(IS_WWDG_PRESCALER(hwwdg->Init.Prescaler));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d026      	beq.n	800591a <HAL_WWDG_Init+0x7a>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058d4:	d021      	beq.n	800591a <HAL_WWDG_Init+0x7a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058de:	d01c      	beq.n	800591a <HAL_WWDG_Init+0x7a>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80058e8:	d017      	beq.n	800591a <HAL_WWDG_Init+0x7a>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d012      	beq.n	800591a <HAL_WWDG_Init+0x7a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80058fc:	d00d      	beq.n	800591a <HAL_WWDG_Init+0x7a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005906:	d008      	beq.n	800591a <HAL_WWDG_Init+0x7a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 8005910:	d003      	beq.n	800591a <HAL_WWDG_Init+0x7a>
 8005912:	21ba      	movs	r1, #186	; 0xba
 8005914:	4822      	ldr	r0, [pc, #136]	; (80059a0 <HAL_WWDG_Init+0x100>)
 8005916:	f7fa fe76 	bl	8000606 <assert_failed>
  assert_param(IS_WWDG_WINDOW(hwwdg->Init.Window));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b3f      	cmp	r3, #63	; 0x3f
 8005920:	d903      	bls.n	800592a <HAL_WWDG_Init+0x8a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	2b7f      	cmp	r3, #127	; 0x7f
 8005928:	d903      	bls.n	8005932 <HAL_WWDG_Init+0x92>
 800592a:	21bb      	movs	r1, #187	; 0xbb
 800592c:	481c      	ldr	r0, [pc, #112]	; (80059a0 <HAL_WWDG_Init+0x100>)
 800592e:	f7fa fe6a 	bl	8000606 <assert_failed>
  assert_param(IS_WWDG_COUNTER(hwwdg->Init.Counter));
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	2b3f      	cmp	r3, #63	; 0x3f
 8005938:	d903      	bls.n	8005942 <HAL_WWDG_Init+0xa2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b7f      	cmp	r3, #127	; 0x7f
 8005940:	d903      	bls.n	800594a <HAL_WWDG_Init+0xaa>
 8005942:	21bc      	movs	r1, #188	; 0xbc
 8005944:	4816      	ldr	r0, [pc, #88]	; (80059a0 <HAL_WWDG_Init+0x100>)
 8005946:	f7fa fe5e 	bl	8000606 <assert_failed>
  assert_param(IS_WWDG_EWI_MODE(hwwdg->Init.EWIMode));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005952:	d007      	beq.n	8005964 <HAL_WWDG_Init+0xc4>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <HAL_WWDG_Init+0xc4>
 800595c:	21bd      	movs	r1, #189	; 0xbd
 800595e:	4810      	ldr	r0, [pc, #64]	; (80059a0 <HAL_WWDG_Init+0x100>)
 8005960:	f7fa fe51 	bl	8000606 <assert_failed>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f7fa fffd 	bl	8000964 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005976:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	ea42 0103 	orr.w	r1, r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40002c00 	.word	0x40002c00
 80059a0:	0800d214 	.word	0x0800d214

080059a4 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ba:	d10e      	bne.n	80059da <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d107      	bne.n	80059da <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f06f 0201 	mvn.w	r2, #1
 80059d2:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f804 	bl	80059e2 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b085      	sub	sp, #20
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a06:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a0a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a2c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a30:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	43db      	mvns	r3, r3
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	4013      	ands	r3, r2
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	f107 0014 	add.w	r0, r7, #20
 8005a68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	b004      	add	sp, #16
 8005a9a:	4770      	bx	lr

08005a9c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b09d      	sub	sp, #116	; 0x74
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	78db      	ldrb	r3, [r3, #3]
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d81f      	bhi.n	8005b0e <USB_ActivateEndpoint+0x72>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <USB_ActivateEndpoint+0x38>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005ae5 	.word	0x08005ae5
 8005ad8:	08005b01 	.word	0x08005b01
 8005adc:	08005b17 	.word	0x08005b17
 8005ae0:	08005af3 	.word	0x08005af3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ae4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ae8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005af0:	e012      	b.n	8005b18 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005af2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005af6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005afa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005afe:	e00b      	b.n	8005b18 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005b0c:	e004      	b.n	8005b18 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005b14:	e000      	b.n	8005b18 <USB_ActivateEndpoint+0x7c>
      break;
 8005b16:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005b26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	b21b      	sxth	r3, r3
 8005b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	b21a      	sxth	r2, r3
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	b21b      	sxth	r3, r3
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	b21b      	sxth	r3, r3
 8005b5e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	7b1b      	ldrb	r3, [r3, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f040 8149 	bne.w	8005e20 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	785b      	ldrb	r3, [r3, #1]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 8084 	beq.w	8005ca0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	4413      	add	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	00da      	lsls	r2, r3, #3
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	88db      	ldrh	r3, [r3, #6]
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	005b      	lsls	r3, r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	827b      	strh	r3, [r7, #18]
 8005bda:	8a7b      	ldrh	r3, [r7, #18]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d01b      	beq.n	8005c1c <USB_ActivateEndpoint+0x180>
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	823b      	strh	r3, [r7, #16]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	441a      	add	r2, r3
 8005c06:	8a3b      	ldrh	r3, [r7, #16]
 8005c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c14:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	78db      	ldrb	r3, [r3, #3]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d020      	beq.n	8005c66 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c3a:	81bb      	strh	r3, [r7, #12]
 8005c3c:	89bb      	ldrh	r3, [r7, #12]
 8005c3e:	f083 0320 	eor.w	r3, r3, #32
 8005c42:	81bb      	strh	r3, [r7, #12]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	441a      	add	r2, r3
 8005c4e:	89bb      	ldrh	r3, [r7, #12]
 8005c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	8013      	strh	r3, [r2, #0]
 8005c64:	e2a6      	b.n	80061b4 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7c:	81fb      	strh	r3, [r7, #14]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	441a      	add	r2, r3
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	8013      	strh	r3, [r2, #0]
 8005c9e:	e289      	b.n	80061b4 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	461a      	mov	r2, r3
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	4413      	add	r3, r2
 8005cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	00da      	lsls	r2, r3, #3
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	88db      	ldrh	r3, [r3, #6]
 8005cc8:	085b      	lsrs	r3, r3, #1
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce4:	4413      	add	r3, r2
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	00da      	lsls	r2, r3, #3
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b3e      	cmp	r3, #62	; 0x3e
 8005cfe:	d918      	bls.n	8005d32 <USB_ActivateEndpoint+0x296>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 031f 	and.w	r3, r3, #31
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <USB_ActivateEndpoint+0x27e>
 8005d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d16:	3b01      	subs	r3, #1
 8005d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	029b      	lsls	r3, r3, #10
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	801a      	strh	r2, [r3, #0]
 8005d30:	e029      	b.n	8005d86 <USB_ActivateEndpoint+0x2ea>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d112      	bne.n	8005d60 <USB_ActivateEndpoint+0x2c4>
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	e012      	b.n	8005d86 <USB_ActivateEndpoint+0x2ea>
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <USB_ActivateEndpoint+0x2de>
 8005d74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d76:	3301      	adds	r3, #1
 8005d78:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	029b      	lsls	r3, r3, #10
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	847b      	strh	r3, [r7, #34]	; 0x22
 8005d94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d01b      	beq.n	8005dd6 <USB_ActivateEndpoint+0x33a>
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	843b      	strh	r3, [r7, #32]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	441a      	add	r2, r3
 8005dc0:	8c3b      	ldrh	r3, [r7, #32]
 8005dc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dec:	83fb      	strh	r3, [r7, #30]
 8005dee:	8bfb      	ldrh	r3, [r7, #30]
 8005df0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005df4:	83fb      	strh	r3, [r7, #30]
 8005df6:	8bfb      	ldrh	r3, [r7, #30]
 8005df8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dfc:	83fb      	strh	r3, [r7, #30]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	441a      	add	r2, r3
 8005e08:	8bfb      	ldrh	r3, [r7, #30]
 8005e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	8013      	strh	r3, [r2, #0]
 8005e1e:	e1c9      	b.n	80061b4 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	78db      	ldrb	r3, [r3, #3]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d11e      	bne.n	8005e66 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	441a      	add	r2, r3
 8005e4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005e50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e58:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	8013      	strh	r3, [r2, #0]
 8005e64:	e01d      	b.n	8005ea2 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	461a      	mov	r2, r3
 8005eb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb2:	4413      	add	r3, r2
 8005eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	00da      	lsls	r2, r3, #3
 8005ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ec4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	891b      	ldrh	r3, [r3, #8]
 8005eca:	085b      	lsrs	r3, r3, #1
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ed4:	801a      	strh	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	657b      	str	r3, [r7, #84]	; 0x54
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee6:	4413      	add	r3, r2
 8005ee8:	657b      	str	r3, [r7, #84]	; 0x54
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	00da      	lsls	r2, r3, #3
 8005ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005ef8:	653b      	str	r3, [r7, #80]	; 0x50
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	895b      	ldrh	r3, [r3, #10]
 8005efe:	085b      	lsrs	r3, r3, #1
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f08:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f040 8093 	bne.w	800603a <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <USB_ActivateEndpoint+0x4cc>
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f46:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	441a      	add	r2, r3
 8005f52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005f76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01b      	beq.n	8005fb8 <USB_ActivateEndpoint+0x51c>
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f96:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	441a      	add	r2, r3
 8005fa2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005fa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4413      	add	r3, r2
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fd0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fd2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fd6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fda:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fde:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006016:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	441a      	add	r2, r3
 8006022:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006024:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006028:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800602c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006034:	b29b      	uxth	r3, r3
 8006036:	8013      	strh	r3, [r2, #0]
 8006038:	e0bc      	b.n	80061b4 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	881b      	ldrh	r3, [r3, #0]
 8006046:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800604a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800604e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01d      	beq.n	8006092 <USB_ActivateEndpoint+0x5f6>
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	441a      	add	r2, r3
 800607a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800608a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80060a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80060a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d01d      	beq.n	80060ea <USB_ActivateEndpoint+0x64e>
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	78db      	ldrb	r3, [r3, #3]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d024      	beq.n	800613c <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006108:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800610c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006110:	f083 0320 	eor.w	r3, r3, #32
 8006114:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	441a      	add	r2, r3
 8006122:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800612a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800612e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006136:	b29b      	uxth	r3, r3
 8006138:	8013      	strh	r3, [r2, #0]
 800613a:	e01d      	b.n	8006178 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800614e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006152:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800616c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006174:	b29b      	uxth	r3, r3
 8006176:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	441a      	add	r2, r3
 800619c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80061a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80061b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3774      	adds	r7, #116	; 0x74
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b08d      	sub	sp, #52	; 0x34
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	7b1b      	ldrb	r3, [r3, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f040 808e 	bne.w	80062f4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	785b      	ldrb	r3, [r3, #1]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d044      	beq.n	800626a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	81bb      	strh	r3, [r7, #12]
 80061ee:	89bb      	ldrh	r3, [r7, #12]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01b      	beq.n	8006230 <USB_DeactivateEndpoint+0x6c>
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620e:	817b      	strh	r3, [r7, #10]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	441a      	add	r2, r3
 800621a:	897b      	ldrh	r3, [r7, #10]
 800621c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006220:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006224:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006228:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800622c:	b29b      	uxth	r3, r3
 800622e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006246:	813b      	strh	r3, [r7, #8]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	441a      	add	r2, r3
 8006252:	893b      	ldrh	r3, [r7, #8]
 8006254:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006258:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800625c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006264:	b29b      	uxth	r3, r3
 8006266:	8013      	strh	r3, [r2, #0]
 8006268:	e192      	b.n	8006590 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	827b      	strh	r3, [r7, #18]
 8006278:	8a7b      	ldrh	r3, [r7, #18]
 800627a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d01b      	beq.n	80062ba <USB_DeactivateEndpoint+0xf6>
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006298:	823b      	strh	r3, [r7, #16]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	441a      	add	r2, r3
 80062a4:	8a3b      	ldrh	r3, [r7, #16]
 80062a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062d0:	81fb      	strh	r3, [r7, #14]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	441a      	add	r2, r3
 80062dc:	89fb      	ldrh	r3, [r7, #14]
 80062de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	8013      	strh	r3, [r2, #0]
 80062f2:	e14d      	b.n	8006590 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	785b      	ldrb	r3, [r3, #1]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f040 80a5 	bne.w	8006448 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	843b      	strh	r3, [r7, #32]
 800630c:	8c3b      	ldrh	r3, [r7, #32]
 800630e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d01b      	beq.n	800634e <USB_DeactivateEndpoint+0x18a>
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632c:	83fb      	strh	r3, [r7, #30]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	441a      	add	r2, r3
 8006338:	8bfb      	ldrh	r3, [r7, #30]
 800633a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800633e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006342:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800634a:	b29b      	uxth	r3, r3
 800634c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4413      	add	r3, r2
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	83bb      	strh	r3, [r7, #28]
 800635c:	8bbb      	ldrh	r3, [r7, #28]
 800635e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d01b      	beq.n	800639e <USB_DeactivateEndpoint+0x1da>
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637c:	837b      	strh	r3, [r7, #26]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	441a      	add	r2, r3
 8006388:	8b7b      	ldrh	r3, [r7, #26]
 800638a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800638e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006396:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800639a:	b29b      	uxth	r3, r3
 800639c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b4:	833b      	strh	r3, [r7, #24]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	441a      	add	r2, r3
 80063c0:	8b3b      	ldrh	r3, [r7, #24]
 80063c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	82fb      	strh	r3, [r7, #22]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	441a      	add	r2, r3
 80063f8:	8afb      	ldrh	r3, [r7, #22]
 80063fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640a:	b29b      	uxth	r3, r3
 800640c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	b29b      	uxth	r3, r3
 800641c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006424:	82bb      	strh	r3, [r7, #20]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	441a      	add	r2, r3
 8006430:	8abb      	ldrh	r3, [r7, #20]
 8006432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800643a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800643e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006442:	b29b      	uxth	r3, r3
 8006444:	8013      	strh	r3, [r2, #0]
 8006446:	e0a3      	b.n	8006590 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006456:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006458:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01b      	beq.n	8006498 <USB_DeactivateEndpoint+0x2d4>
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	4413      	add	r3, r2
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29b      	uxth	r3, r3
 800646e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006476:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	441a      	add	r2, r3
 8006482:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006494:	b29b      	uxth	r3, r3
 8006496:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80064a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01b      	beq.n	80064e8 <USB_DeactivateEndpoint+0x324>
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4413      	add	r3, r2
 80064ba:	881b      	ldrh	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	781b      	ldrb	r3, [r3, #0]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	441a      	add	r2, r3
 80064d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	441a      	add	r2, r3
 800650a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800650c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006514:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651c:	b29b      	uxth	r3, r3
 800651e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006536:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	b29b      	uxth	r3, r3
 8006566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	441a      	add	r2, r3
 800657a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800657c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800658c:	b29b      	uxth	r3, r3
 800658e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3734      	adds	r7, #52	; 0x34
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800659e:	b580      	push	{r7, lr}
 80065a0:	b0c2      	sub	sp, #264	; 0x108
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065ac:	6018      	str	r0, [r3, #0]
 80065ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065b6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	f040 867b 	bne.w	80072c0 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80065ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d908      	bls.n	80065f8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80065e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065f6:	e007      	b.n	8006608 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80065f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800660c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	7b1b      	ldrb	r3, [r3, #12]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d13a      	bne.n	800668e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800661c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6959      	ldr	r1, [r3, #20]
 8006624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	88da      	ldrh	r2, [r3, #6]
 8006630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006634:	b29b      	uxth	r3, r3
 8006636:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800663a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800663e:	6800      	ldr	r0, [r0, #0]
 8006640:	f001 fc1d 	bl	8007e7e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006654:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800665e:	b29b      	uxth	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4413      	add	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
 8006668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	00da      	lsls	r2, r3, #3
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	4413      	add	r3, r2
 800667a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	801a      	strh	r2, [r3, #0]
 800668a:	f000 bde3 	b.w	8007254 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800668e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	78db      	ldrb	r3, [r3, #3]
 800669a:	2b02      	cmp	r3, #2
 800669c:	f040 843a 	bne.w	8006f14 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80066a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	6a1a      	ldr	r2, [r3, #32]
 80066ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	f240 83b7 	bls.w	8006e2c <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80066be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	b29b      	uxth	r3, r3
 80066dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80066e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	441a      	add	r2, r3
 8006702:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006716:	b29b      	uxth	r3, r3
 8006718:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800671a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800671e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6a1a      	ldr	r2, [r3, #32]
 8006726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800672a:	1ad2      	subs	r2, r2, r3
 800672c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800673c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 81b3 	beq.w	8006ac6 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	633b      	str	r3, [r7, #48]	; 0x30
 800676c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	785b      	ldrb	r3, [r3, #1]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d16d      	bne.n	8006858 <USB_EPStartXfer+0x2ba>
 800677c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006780:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	62bb      	str	r3, [r7, #40]	; 0x28
 8006788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006796:	b29b      	uxth	r3, r3
 8006798:	461a      	mov	r2, r3
 800679a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679c:	4413      	add	r3, r2
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
 80067a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	00da      	lsls	r2, r3, #3
 80067ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b0:	4413      	add	r3, r2
 80067b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
 80067b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067bc:	2b3e      	cmp	r3, #62	; 0x3e
 80067be:	d91c      	bls.n	80067fa <USB_EPStartXfer+0x25c>
 80067c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d104      	bne.n	80067e0 <USB_EPStartXfer+0x242>
 80067d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067da:	3b01      	subs	r3, #1
 80067dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80067e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	029b      	lsls	r3, r3, #10
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	801a      	strh	r2, [r3, #0]
 80067f8:	e053      	b.n	80068a2 <USB_EPStartXfer+0x304>
 80067fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d112      	bne.n	8006828 <USB_EPStartXfer+0x28a>
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29b      	uxth	r3, r3
 8006808:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800680c:	b29a      	uxth	r2, r3
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	801a      	strh	r2, [r3, #0]
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	b29b      	uxth	r3, r3
 8006818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006820:	b29a      	uxth	r2, r3
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	e03c      	b.n	80068a2 <USB_EPStartXfer+0x304>
 8006828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800682c:	085b      	lsrs	r3, r3, #1
 800682e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	d004      	beq.n	8006848 <USB_EPStartXfer+0x2aa>
 800683e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006842:	3301      	adds	r3, #1
 8006844:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006848:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800684c:	b29b      	uxth	r3, r3
 800684e:	029b      	lsls	r3, r3, #10
 8006850:	b29a      	uxth	r2, r3
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	e024      	b.n	80068a2 <USB_EPStartXfer+0x304>
 8006858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	785b      	ldrb	r3, [r3, #1]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d11c      	bne.n	80068a2 <USB_EPStartXfer+0x304>
 8006868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800686c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006876:	b29b      	uxth	r3, r3
 8006878:	461a      	mov	r2, r3
 800687a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687c:	4413      	add	r3, r2
 800687e:	633b      	str	r3, [r7, #48]	; 0x30
 8006880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	00da      	lsls	r2, r3, #3
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	4413      	add	r3, r2
 8006892:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689c:	b29a      	uxth	r2, r3
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	895b      	ldrh	r3, [r3, #10]
 80068ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6959      	ldr	r1, [r3, #20]
 80068be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80068c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80068cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80068d0:	6800      	ldr	r0, [r0, #0]
 80068d2:	f001 fad4 	bl	8007e7e <USB_WritePMA>
            ep->xfer_buff += len;
 80068d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695a      	ldr	r2, [r3, #20]
 80068e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068e6:	441a      	add	r2, r3
 80068e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80068f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80068f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	429a      	cmp	r2, r3
 800690e:	d90f      	bls.n	8006930 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8006910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a1a      	ldr	r2, [r3, #32]
 800691c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006920:	1ad2      	subs	r2, r2, r3
 8006922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	621a      	str	r2, [r3, #32]
 800692e:	e00e      	b.n	800694e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8006930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2200      	movs	r2, #0
 800694c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800694e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	785b      	ldrb	r3, [r3, #1]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d16d      	bne.n	8006a3a <USB_EPStartXfer+0x49c>
 800695e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006962:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800696e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006978:	b29b      	uxth	r3, r3
 800697a:	461a      	mov	r2, r3
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	4413      	add	r3, r2
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006986:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	00da      	lsls	r2, r3, #3
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	4413      	add	r3, r2
 8006994:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006998:	617b      	str	r3, [r7, #20]
 800699a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699e:	2b3e      	cmp	r3, #62	; 0x3e
 80069a0:	d91c      	bls.n	80069dc <USB_EPStartXfer+0x43e>
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b0:	f003 031f 	and.w	r3, r3, #31
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d104      	bne.n	80069c2 <USB_EPStartXfer+0x424>
 80069b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069bc:	3b01      	subs	r3, #1
 80069be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	029b      	lsls	r3, r3, #10
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	801a      	strh	r2, [r3, #0]
 80069da:	e059      	b.n	8006a90 <USB_EPStartXfer+0x4f2>
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d112      	bne.n	8006a0a <USB_EPStartXfer+0x46c>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	801a      	strh	r2, [r3, #0]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	801a      	strh	r2, [r3, #0]
 8006a08:	e042      	b.n	8006a90 <USB_EPStartXfer+0x4f2>
 8006a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a0e:	085b      	lsrs	r3, r3, #1
 8006a10:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d004      	beq.n	8006a2a <USB_EPStartXfer+0x48c>
 8006a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a24:	3301      	adds	r3, #1
 8006a26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	029b      	lsls	r3, r3, #10
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	801a      	strh	r2, [r3, #0]
 8006a38:	e02a      	b.n	8006a90 <USB_EPStartXfer+0x4f2>
 8006a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d122      	bne.n	8006a90 <USB_EPStartXfer+0x4f2>
 8006a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	623b      	str	r3, [r7, #32]
 8006a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	461a      	mov	r2, r3
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	623b      	str	r3, [r7, #32]
 8006a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	00da      	lsls	r2, r3, #3
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a84:	61fb      	str	r3, [r7, #28]
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	891b      	ldrh	r3, [r3, #8]
 8006a9c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6959      	ldr	r1, [r3, #20]
 8006aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006ab6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006aba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006abe:	6800      	ldr	r0, [r0, #0]
 8006ac0:	f001 f9dd 	bl	8007e7e <USB_WritePMA>
 8006ac4:	e3c6      	b.n	8007254 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d16d      	bne.n	8006bb2 <USB_EPStartXfer+0x614>
 8006ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	461a      	mov	r2, r3
 8006af4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006af6:	4413      	add	r3, r2
 8006af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	781b      	ldrb	r3, [r3, #0]
 8006b06:	00da      	lsls	r2, r3, #3
 8006b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b10:	647b      	str	r3, [r7, #68]	; 0x44
 8006b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b16:	2b3e      	cmp	r3, #62	; 0x3e
 8006b18:	d91c      	bls.n	8006b54 <USB_EPStartXfer+0x5b6>
 8006b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <USB_EPStartXfer+0x59c>
 8006b30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b34:	3b01      	subs	r3, #1
 8006b36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	029b      	lsls	r3, r3, #10
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b50:	801a      	strh	r2, [r3, #0]
 8006b52:	e059      	b.n	8006c08 <USB_EPStartXfer+0x66a>
 8006b54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d112      	bne.n	8006b82 <USB_EPStartXfer+0x5e4>
 8006b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6a:	801a      	strh	r2, [r3, #0]
 8006b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b7e:	801a      	strh	r2, [r3, #0]
 8006b80:	e042      	b.n	8006c08 <USB_EPStartXfer+0x66a>
 8006b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b86:	085b      	lsrs	r3, r3, #1
 8006b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b90:	f003 0301 	and.w	r3, r3, #1
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d004      	beq.n	8006ba2 <USB_EPStartXfer+0x604>
 8006b98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	029b      	lsls	r3, r3, #10
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e02a      	b.n	8006c08 <USB_EPStartXfer+0x66a>
 8006bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d122      	bne.n	8006c08 <USB_EPStartXfer+0x66a>
 8006bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	653b      	str	r3, [r7, #80]	; 0x50
 8006bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	461a      	mov	r2, r3
 8006be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be2:	4413      	add	r3, r2
 8006be4:	653b      	str	r3, [r7, #80]	; 0x50
 8006be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	00da      	lsls	r2, r3, #3
 8006bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c06:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	891b      	ldrh	r3, [r3, #8]
 8006c14:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6959      	ldr	r1, [r3, #20]
 8006c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006c2e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006c32:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006c36:	6800      	ldr	r0, [r0, #0]
 8006c38:	f001 f921 	bl	8007e7e <USB_WritePMA>
            ep->xfer_buff += len;
 8006c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695a      	ldr	r2, [r3, #20]
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4c:	441a      	add	r2, r3
 8006c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a1a      	ldr	r2, [r3, #32]
 8006c66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d90f      	bls.n	8006c96 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6a1a      	ldr	r2, [r3, #32]
 8006c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c86:	1ad2      	subs	r2, r2, r3
 8006c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	621a      	str	r2, [r3, #32]
 8006c94:	e00e      	b.n	8006cb4 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	643b      	str	r3, [r7, #64]	; 0x40
 8006cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d16d      	bne.n	8006dac <USB_EPStartXfer+0x80e>
 8006cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	4413      	add	r3, r2
 8006cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	00da      	lsls	r2, r3, #3
 8006d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d04:	4413      	add	r3, r2
 8006d06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d10:	2b3e      	cmp	r3, #62	; 0x3e
 8006d12:	d91c      	bls.n	8006d4e <USB_EPStartXfer+0x7b0>
 8006d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d18:	095b      	lsrs	r3, r3, #5
 8006d1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <USB_EPStartXfer+0x796>
 8006d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	029b      	lsls	r3, r3, #10
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e053      	b.n	8006df6 <USB_EPStartXfer+0x858>
 8006d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d112      	bne.n	8006d7c <USB_EPStartXfer+0x7de>
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d64:	801a      	strh	r2, [r3, #0]
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	881b      	ldrh	r3, [r3, #0]
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d78:	801a      	strh	r2, [r3, #0]
 8006d7a:	e03c      	b.n	8006df6 <USB_EPStartXfer+0x858>
 8006d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d80:	085b      	lsrs	r3, r3, #1
 8006d82:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <USB_EPStartXfer+0x7fe>
 8006d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d96:	3301      	adds	r3, #1
 8006d98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da8:	801a      	strh	r2, [r3, #0]
 8006daa:	e024      	b.n	8006df6 <USB_EPStartXfer+0x858>
 8006dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	785b      	ldrb	r3, [r3, #1]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d11c      	bne.n	8006df6 <USB_EPStartXfer+0x858>
 8006dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd0:	4413      	add	r3, r2
 8006dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8006dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	00da      	lsls	r2, r3, #3
 8006de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de4:	4413      	add	r3, r2
 8006de6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	895b      	ldrh	r3, [r3, #10]
 8006e02:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6959      	ldr	r1, [r3, #20]
 8006e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006e1c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006e20:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006e24:	6800      	ldr	r0, [r0, #0]
 8006e26:	f001 f82a 	bl	8007e7e <USB_WritePMA>
 8006e2a:	e213      	b.n	8007254 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e62:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	441a      	add	r2, r3
 8006e80:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ea8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb8:	4413      	add	r3, r2
 8006eba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	00da      	lsls	r2, r3, #3
 8006eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ecc:	4413      	add	r3, r2
 8006ece:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ed2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006edc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	891b      	ldrh	r3, [r3, #8]
 8006eea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6959      	ldr	r1, [r3, #20]
 8006efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006f04:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006f08:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006f0c:	6800      	ldr	r0, [r0, #0]
 8006f0e:	f000 ffb6 	bl	8007e7e <USB_WritePMA>
 8006f12:	e19f      	b.n	8007254 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	6a1a      	ldr	r2, [r3, #32]
 8006f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f24:	1ad2      	subs	r2, r2, r3
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80bc 	beq.w	80070d2 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	673b      	str	r3, [r7, #112]	; 0x70
 8006f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	785b      	ldrb	r3, [r3, #1]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d16d      	bne.n	8007052 <USB_EPStartXfer+0xab4>
 8006f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	461a      	mov	r2, r3
 8006f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f96:	4413      	add	r3, r2
 8006f98:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	00da      	lsls	r2, r3, #3
 8006fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006faa:	4413      	add	r3, r2
 8006fac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fb0:	667b      	str	r3, [r7, #100]	; 0x64
 8006fb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8006fb8:	d91c      	bls.n	8006ff4 <USB_EPStartXfer+0xa56>
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <USB_EPStartXfer+0xa3c>
 8006fd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006fda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	029b      	lsls	r3, r3, #10
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e053      	b.n	800709c <USB_EPStartXfer+0xafe>
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d112      	bne.n	8007022 <USB_EPStartXfer+0xa84>
 8006ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007006:	b29a      	uxth	r2, r3
 8007008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800700a:	801a      	strh	r2, [r3, #0]
 800700c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800701a:	b29a      	uxth	r2, r3
 800701c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800701e:	801a      	strh	r2, [r3, #0]
 8007020:	e03c      	b.n	800709c <USB_EPStartXfer+0xafe>
 8007022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007026:	085b      	lsrs	r3, r3, #1
 8007028:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800702c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d004      	beq.n	8007042 <USB_EPStartXfer+0xaa4>
 8007038:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800703c:	3301      	adds	r3, #1
 800703e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007042:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007046:	b29b      	uxth	r3, r3
 8007048:	029b      	lsls	r3, r3, #10
 800704a:	b29a      	uxth	r2, r3
 800704c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	e024      	b.n	800709c <USB_EPStartXfer+0xafe>
 8007052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d11c      	bne.n	800709c <USB_EPStartXfer+0xafe>
 8007062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007066:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007070:	b29b      	uxth	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007076:	4413      	add	r3, r2
 8007078:	673b      	str	r3, [r7, #112]	; 0x70
 800707a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800707e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	00da      	lsls	r2, r3, #3
 8007088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800708a:	4413      	add	r3, r2
 800708c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007090:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007096:	b29a      	uxth	r2, r3
 8007098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800709c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	895b      	ldrh	r3, [r3, #10]
 80070a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6959      	ldr	r1, [r3, #20]
 80070b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80070c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80070c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80070ca:	6800      	ldr	r0, [r0, #0]
 80070cc:	f000 fed7 	bl	8007e7e <USB_WritePMA>
 80070d0:	e0c0      	b.n	8007254 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80070d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d16d      	bne.n	80071be <USB_EPStartXfer+0xc20>
 80070e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80070ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80070f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	461a      	mov	r2, r3
 8007100:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007102:	4413      	add	r3, r2
 8007104:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800710a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	00da      	lsls	r2, r3, #3
 8007114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007116:	4413      	add	r3, r2
 8007118:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800711c:	67bb      	str	r3, [r7, #120]	; 0x78
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007122:	2b3e      	cmp	r3, #62	; 0x3e
 8007124:	d91c      	bls.n	8007160 <USB_EPStartXfer+0xbc2>
 8007126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712a:	095b      	lsrs	r3, r3, #5
 800712c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <USB_EPStartXfer+0xba8>
 800713c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007140:	3b01      	subs	r3, #1
 8007142:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007146:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800714a:	b29b      	uxth	r3, r3
 800714c:	029b      	lsls	r3, r3, #10
 800714e:	b29b      	uxth	r3, r3
 8007150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007158:	b29a      	uxth	r2, r3
 800715a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800715c:	801a      	strh	r2, [r3, #0]
 800715e:	e05f      	b.n	8007220 <USB_EPStartXfer+0xc82>
 8007160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007164:	2b00      	cmp	r3, #0
 8007166:	d112      	bne.n	800718e <USB_EPStartXfer+0xbf0>
 8007168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800716a:	881b      	ldrh	r3, [r3, #0]
 800716c:	b29b      	uxth	r3, r3
 800716e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007172:	b29a      	uxth	r2, r3
 8007174:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800717a:	881b      	ldrh	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007182:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007186:	b29a      	uxth	r2, r3
 8007188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e048      	b.n	8007220 <USB_EPStartXfer+0xc82>
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007192:	085b      	lsrs	r3, r3, #1
 8007194:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800719c:	f003 0301 	and.w	r3, r3, #1
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d004      	beq.n	80071ae <USB_EPStartXfer+0xc10>
 80071a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071a8:	3301      	adds	r3, #1
 80071aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	029b      	lsls	r3, r3, #10
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071ba:	801a      	strh	r2, [r3, #0]
 80071bc:	e030      	b.n	8007220 <USB_EPStartXfer+0xc82>
 80071be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	785b      	ldrb	r3, [r3, #1]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d128      	bne.n	8007220 <USB_EPStartXfer+0xc82>
 80071ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071f2:	4413      	add	r3, r2
 80071f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	00da      	lsls	r2, r3, #3
 8007206:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800720a:	4413      	add	r3, r2
 800720c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007210:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007218:	b29a      	uxth	r2, r3
 800721a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800721e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	891b      	ldrh	r3, [r3, #8]
 800722c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	6959      	ldr	r1, [r3, #20]
 800723c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007240:	b29b      	uxth	r3, r3
 8007242:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007246:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800724a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	f000 fe15 	bl	8007e7e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4413      	add	r3, r2
 800726e:	881b      	ldrh	r3, [r3, #0]
 8007270:	b29b      	uxth	r3, r3
 8007272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800727a:	817b      	strh	r3, [r7, #10]
 800727c:	897b      	ldrh	r3, [r7, #10]
 800727e:	f083 0310 	eor.w	r3, r3, #16
 8007282:	817b      	strh	r3, [r7, #10]
 8007284:	897b      	ldrh	r3, [r7, #10]
 8007286:	f083 0320 	eor.w	r3, r3, #32
 800728a:	817b      	strh	r3, [r7, #10]
 800728c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800729a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	441a      	add	r2, r3
 80072a6:	897b      	ldrh	r3, [r7, #10]
 80072a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	8013      	strh	r3, [r2, #0]
 80072bc:	f000 bc9f 	b.w	8007bfe <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80072c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	7b1b      	ldrb	r3, [r3, #12]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f040 80ae 	bne.w	800742e <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80072d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d917      	bls.n	800731e <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80072ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80072fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	619a      	str	r2, [r3, #24]
 800731c:	e00e      	b.n	800733c <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800731e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800732e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2200      	movs	r2, #0
 800733a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800733c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007340:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800734a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800734e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007358:	b29b      	uxth	r3, r3
 800735a:	461a      	mov	r2, r3
 800735c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007360:	4413      	add	r3, r2
 8007362:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007366:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800736a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	00da      	lsls	r2, r3, #3
 8007374:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007378:	4413      	add	r3, r2
 800737a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800737e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007386:	2b3e      	cmp	r3, #62	; 0x3e
 8007388:	d91d      	bls.n	80073c6 <USB_EPStartXfer+0xe28>
 800738a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007398:	f003 031f 	and.w	r3, r3, #31
 800739c:	2b00      	cmp	r3, #0
 800739e:	d104      	bne.n	80073aa <USB_EPStartXfer+0xe0c>
 80073a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073a4:	3b01      	subs	r3, #1
 80073a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	029b      	lsls	r3, r3, #10
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073bc:	b29a      	uxth	r2, r3
 80073be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c2:	801a      	strh	r2, [r3, #0]
 80073c4:	e3e1      	b.n	8007b8a <USB_EPStartXfer+0x15ec>
 80073c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d116      	bne.n	80073fc <USB_EPStartXfer+0xe5e>
 80073ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073da:	b29a      	uxth	r2, r3
 80073dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073e0:	801a      	strh	r2, [r3, #0]
 80073e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073e6:	881b      	ldrh	r3, [r3, #0]
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073f8:	801a      	strh	r2, [r3, #0]
 80073fa:	e3c6      	b.n	8007b8a <USB_EPStartXfer+0x15ec>
 80073fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007400:	085b      	lsrs	r3, r3, #1
 8007402:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <USB_EPStartXfer+0xe7e>
 8007412:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007416:	3301      	adds	r3, #1
 8007418:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800741c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007420:	b29b      	uxth	r3, r3
 8007422:	029b      	lsls	r3, r3, #10
 8007424:	b29a      	uxth	r2, r3
 8007426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800742a:	801a      	strh	r2, [r3, #0]
 800742c:	e3ad      	b.n	8007b8a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800742e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	78db      	ldrb	r3, [r3, #3]
 800743a:	2b02      	cmp	r3, #2
 800743c:	f040 8200 	bne.w	8007840 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	785b      	ldrb	r3, [r3, #1]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f040 8091 	bne.w	8007574 <USB_EPStartXfer+0xfd6>
 8007452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800746e:	b29b      	uxth	r3, r3
 8007470:	461a      	mov	r2, r3
 8007472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007476:	4413      	add	r3, r2
 8007478:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800747c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	00da      	lsls	r2, r3, #3
 800748a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800748e:	4413      	add	r3, r2
 8007490:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007494:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800749c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b3e      	cmp	r3, #62	; 0x3e
 80074a6:	d925      	bls.n	80074f4 <USB_EPStartXfer+0xf56>
 80074a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 031f 	and.w	r3, r3, #31
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d104      	bne.n	80074d8 <USB_EPStartXfer+0xf3a>
 80074ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d2:	3b01      	subs	r3, #1
 80074d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80074d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074dc:	b29b      	uxth	r3, r3
 80074de:	029b      	lsls	r3, r3, #10
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	e074      	b.n	80075de <USB_EPStartXfer+0x1040>
 80074f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d116      	bne.n	8007532 <USB_EPStartXfer+0xf94>
 8007504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007510:	b29a      	uxth	r2, r3
 8007512:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007516:	801a      	strh	r2, [r3, #0]
 8007518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007528:	b29a      	uxth	r2, r3
 800752a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800752e:	801a      	strh	r2, [r3, #0]
 8007530:	e055      	b.n	80075de <USB_EPStartXfer+0x1040>
 8007532:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007536:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	085b      	lsrs	r3, r3, #1
 8007540:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	f003 0301 	and.w	r3, r3, #1
 8007554:	2b00      	cmp	r3, #0
 8007556:	d004      	beq.n	8007562 <USB_EPStartXfer+0xfc4>
 8007558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755c:	3301      	adds	r3, #1
 800755e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007566:	b29b      	uxth	r3, r3
 8007568:	029b      	lsls	r3, r3, #10
 800756a:	b29a      	uxth	r2, r3
 800756c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007570:	801a      	strh	r2, [r3, #0]
 8007572:	e034      	b.n	80075de <USB_EPStartXfer+0x1040>
 8007574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	785b      	ldrb	r3, [r3, #1]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d12c      	bne.n	80075de <USB_EPStartXfer+0x1040>
 8007584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007588:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075a8:	4413      	add	r3, r2
 80075aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	00da      	lsls	r2, r3, #3
 80075bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80075c0:	4413      	add	r3, r2
 80075c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80075ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	785b      	ldrb	r3, [r3, #1]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f040 8091 	bne.w	8007720 <USB_EPStartXfer+0x1182>
 80075fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007602:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800760c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007610:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800761a:	b29b      	uxth	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007622:	4413      	add	r3, r2
 8007624:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	00da      	lsls	r2, r3, #3
 8007636:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800763a:	4413      	add	r3, r2
 800763c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b3e      	cmp	r3, #62	; 0x3e
 8007652:	d925      	bls.n	80076a0 <USB_EPStartXfer+0x1102>
 8007654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	095b      	lsrs	r3, r3, #5
 8007662:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f003 031f 	and.w	r3, r3, #31
 8007676:	2b00      	cmp	r3, #0
 8007678:	d104      	bne.n	8007684 <USB_EPStartXfer+0x10e6>
 800767a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800767e:	3b01      	subs	r3, #1
 8007680:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007688:	b29b      	uxth	r3, r3
 800768a:	029b      	lsls	r3, r3, #10
 800768c:	b29b      	uxth	r3, r3
 800768e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	e06d      	b.n	800777c <USB_EPStartXfer+0x11de>
 80076a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d116      	bne.n	80076de <USB_EPStartXfer+0x1140>
 80076b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076bc:	b29a      	uxth	r2, r3
 80076be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c2:	801a      	strh	r2, [r3, #0]
 80076c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076da:	801a      	strh	r2, [r3, #0]
 80076dc:	e04e      	b.n	800777c <USB_EPStartXfer+0x11de>
 80076de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	085b      	lsrs	r3, r3, #1
 80076ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <USB_EPStartXfer+0x1170>
 8007704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007708:	3301      	adds	r3, #1
 800770a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800770e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007712:	b29b      	uxth	r3, r3
 8007714:	029b      	lsls	r3, r3, #10
 8007716:	b29a      	uxth	r2, r3
 8007718:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800771c:	801a      	strh	r2, [r3, #0]
 800771e:	e02d      	b.n	800777c <USB_EPStartXfer+0x11de>
 8007720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	785b      	ldrb	r3, [r3, #1]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d125      	bne.n	800777c <USB_EPStartXfer+0x11de>
 8007730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773e:	b29b      	uxth	r3, r3
 8007740:	461a      	mov	r2, r3
 8007742:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007746:	4413      	add	r3, r2
 8007748:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800774c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	00da      	lsls	r2, r3, #3
 800775a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800775e:	4413      	add	r3, r2
 8007760:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007764:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800776c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	b29a      	uxth	r2, r3
 8007776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800777a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800777c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69db      	ldr	r3, [r3, #28]
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 81fe 	beq.w	8007b8a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800778e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800779c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80077ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80077b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d005      	beq.n	80077c6 <USB_EPStartXfer+0x1228>
 80077ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80077be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10d      	bne.n	80077e2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80077ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f040 81db 	bne.w	8007b8a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f040 81d4 	bne.w	8007b8a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80077e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	881b      	ldrh	r3, [r3, #0]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007808:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800780c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007810:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800781a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	441a      	add	r2, r3
 8007826:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800782a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800782e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007836:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800783a:	b29b      	uxth	r3, r3
 800783c:	8013      	strh	r3, [r2, #0]
 800783e:	e1a4      	b.n	8007b8a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	78db      	ldrb	r3, [r3, #3]
 800784c:	2b01      	cmp	r3, #1
 800784e:	f040 819a 	bne.w	8007b86 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007856:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	429a      	cmp	r2, r3
 800786c:	d917      	bls.n	800789e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800786e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800787e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699a      	ldr	r2, [r3, #24]
 800788a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800788e:	1ad2      	subs	r2, r2, r3
 8007890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	619a      	str	r2, [r3, #24]
 800789c:	e00e      	b.n	80078bc <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800789e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80078ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2200      	movs	r2, #0
 80078ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80078bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	785b      	ldrb	r3, [r3, #1]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d178      	bne.n	80079be <USB_EPStartXfer+0x1420>
 80078cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	461a      	mov	r2, r3
 80078ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80078f0:	4413      	add	r3, r2
 80078f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80078f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	00da      	lsls	r2, r3, #3
 8007904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007908:	4413      	add	r3, r2
 800790a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800790e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007916:	2b3e      	cmp	r3, #62	; 0x3e
 8007918:	d91d      	bls.n	8007956 <USB_EPStartXfer+0x13b8>
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007928:	f003 031f 	and.w	r3, r3, #31
 800792c:	2b00      	cmp	r3, #0
 800792e:	d104      	bne.n	800793a <USB_EPStartXfer+0x139c>
 8007930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007934:	3b01      	subs	r3, #1
 8007936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800793a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800793e:	b29b      	uxth	r3, r3
 8007940:	029b      	lsls	r3, r3, #10
 8007942:	b29b      	uxth	r3, r3
 8007944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794c:	b29a      	uxth	r2, r3
 800794e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007952:	801a      	strh	r2, [r3, #0]
 8007954:	e064      	b.n	8007a20 <USB_EPStartXfer+0x1482>
 8007956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800795a:	2b00      	cmp	r3, #0
 800795c:	d116      	bne.n	800798c <USB_EPStartXfer+0x13ee>
 800795e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b29b      	uxth	r3, r3
 8007966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800796a:	b29a      	uxth	r2, r3
 800796c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007970:	801a      	strh	r2, [r3, #0]
 8007972:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007976:	881b      	ldrh	r3, [r3, #0]
 8007978:	b29b      	uxth	r3, r3
 800797a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007982:	b29a      	uxth	r2, r3
 8007984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007988:	801a      	strh	r2, [r3, #0]
 800798a:	e049      	b.n	8007a20 <USB_EPStartXfer+0x1482>
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007990:	085b      	lsrs	r3, r3, #1
 8007992:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d004      	beq.n	80079ac <USB_EPStartXfer+0x140e>
 80079a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079a6:	3301      	adds	r3, #1
 80079a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	029b      	lsls	r3, r3, #10
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079ba:	801a      	strh	r2, [r3, #0]
 80079bc:	e030      	b.n	8007a20 <USB_EPStartXfer+0x1482>
 80079be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	785b      	ldrb	r3, [r3, #1]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d128      	bne.n	8007a20 <USB_EPStartXfer+0x1482>
 80079ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	461a      	mov	r2, r3
 80079ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80079f2:	4413      	add	r3, r2
 80079f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	00da      	lsls	r2, r3, #3
 8007a06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007a10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a1e:	801a      	strh	r2, [r3, #0]
 8007a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	785b      	ldrb	r3, [r3, #1]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d178      	bne.n	8007b30 <USB_EPStartXfer+0x1592>
 8007a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a62:	4413      	add	r3, r2
 8007a64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	00da      	lsls	r2, r3, #3
 8007a76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a88:	2b3e      	cmp	r3, #62	; 0x3e
 8007a8a:	d91d      	bls.n	8007ac8 <USB_EPStartXfer+0x152a>
 8007a8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a90:	095b      	lsrs	r3, r3, #5
 8007a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a9a:	f003 031f 	and.w	r3, r3, #31
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d104      	bne.n	8007aac <USB_EPStartXfer+0x150e>
 8007aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	029b      	lsls	r3, r3, #10
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ac4:	801a      	strh	r2, [r3, #0]
 8007ac6:	e060      	b.n	8007b8a <USB_EPStartXfer+0x15ec>
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d116      	bne.n	8007afe <USB_EPStartXfer+0x1560>
 8007ad0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ae2:	801a      	strh	r2, [r3, #0]
 8007ae4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007af0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007afa:	801a      	strh	r2, [r3, #0]
 8007afc:	e045      	b.n	8007b8a <USB_EPStartXfer+0x15ec>
 8007afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b02:	085b      	lsrs	r3, r3, #1
 8007b04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d004      	beq.n	8007b1e <USB_EPStartXfer+0x1580>
 8007b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	029b      	lsls	r3, r3, #10
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	e02c      	b.n	8007b8a <USB_EPStartXfer+0x15ec>
 8007b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d124      	bne.n	8007b8a <USB_EPStartXfer+0x15ec>
 8007b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	461a      	mov	r2, r3
 8007b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b56:	4413      	add	r3, r2
 8007b58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	00da      	lsls	r2, r3, #3
 8007b6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007b6e:	4413      	add	r3, r2
 8007b70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b82:	801a      	strh	r2, [r3, #0]
 8007b84:	e001      	b.n	8007b8a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e03a      	b.n	8007c00 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4413      	add	r3, r2
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007bb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007bb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bbc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007bc0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007bc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bc8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b085      	sub	sp, #20
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d020      	beq.n	8007c5e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	4413      	add	r3, r2
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c32:	81bb      	strh	r3, [r7, #12]
 8007c34:	89bb      	ldrh	r3, [r7, #12]
 8007c36:	f083 0310 	eor.w	r3, r3, #16
 8007c3a:	81bb      	strh	r3, [r7, #12]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	441a      	add	r2, r3
 8007c46:	89bb      	ldrh	r3, [r7, #12]
 8007c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	8013      	strh	r3, [r2, #0]
 8007c5c:	e01f      	b.n	8007c9e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c74:	81fb      	strh	r3, [r7, #14]
 8007c76:	89fb      	ldrh	r3, [r7, #14]
 8007c78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c7c:	81fb      	strh	r3, [r7, #14]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	441a      	add	r2, r3
 8007c88:	89fb      	ldrh	r3, [r7, #14]
 8007c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b087      	sub	sp, #28
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	7b1b      	ldrb	r3, [r3, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f040 809d 	bne.w	8007dfa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d04c      	beq.n	8007d62 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	823b      	strh	r3, [r7, #16]
 8007cd6:	8a3b      	ldrh	r3, [r7, #16]
 8007cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d01b      	beq.n	8007d18 <USB_EPClearStall+0x6c>
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf6:	81fb      	strh	r3, [r7, #14]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	89fb      	ldrh	r3, [r7, #14]
 8007d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	78db      	ldrb	r3, [r3, #3]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d06c      	beq.n	8007dfa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	881b      	ldrh	r3, [r3, #0]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d36:	81bb      	strh	r3, [r7, #12]
 8007d38:	89bb      	ldrh	r3, [r7, #12]
 8007d3a:	f083 0320 	eor.w	r3, r3, #32
 8007d3e:	81bb      	strh	r3, [r7, #12]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	441a      	add	r2, r3
 8007d4a:	89bb      	ldrh	r3, [r7, #12]
 8007d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	8013      	strh	r3, [r2, #0]
 8007d60:	e04b      	b.n	8007dfa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	82fb      	strh	r3, [r7, #22]
 8007d70:	8afb      	ldrh	r3, [r7, #22]
 8007d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d01b      	beq.n	8007db2 <USB_EPClearStall+0x106>
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	881b      	ldrh	r3, [r3, #0]
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d90:	82bb      	strh	r3, [r7, #20]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441a      	add	r2, r3
 8007d9c:	8abb      	ldrh	r3, [r7, #20]
 8007d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc8:	827b      	strh	r3, [r7, #18]
 8007dca:	8a7b      	ldrh	r3, [r7, #18]
 8007dcc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007dd0:	827b      	strh	r3, [r7, #18]
 8007dd2:	8a7b      	ldrh	r3, [r7, #18]
 8007dd4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007dd8:	827b      	strh	r3, [r7, #18]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	441a      	add	r2, r3
 8007de4:	8a7b      	ldrh	r3, [r7, #18]
 8007de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2280      	movs	r2, #128	; 0x80
 8007e1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	370c      	adds	r7, #12
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr

08007e5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b085      	sub	sp, #20
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007e70:	68fb      	ldr	r3, [r7, #12]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3714      	adds	r7, #20
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b08d      	sub	sp, #52	; 0x34
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	4611      	mov	r1, r2
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	80fb      	strh	r3, [r7, #6]
 8007e90:	4613      	mov	r3, r2
 8007e92:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007e94:	88bb      	ldrh	r3, [r7, #4]
 8007e96:	3301      	adds	r3, #1
 8007e98:	085b      	lsrs	r3, r3, #1
 8007e9a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007ea4:	88fa      	ldrh	r2, [r7, #6]
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eb4:	e01b      	b.n	8007eee <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	021b      	lsls	r3, r3, #8
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ede:	3302      	adds	r3, #2
 8007ee0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eea:	3b01      	subs	r3, #1
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e0      	bne.n	8007eb6 <USB_WritePMA+0x38>
  }
}
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	3734      	adds	r7, #52	; 0x34
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b08b      	sub	sp, #44	; 0x2c
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	4611      	mov	r1, r2
 8007f0e:	461a      	mov	r2, r3
 8007f10:	460b      	mov	r3, r1
 8007f12:	80fb      	strh	r3, [r7, #6]
 8007f14:	4613      	mov	r3, r2
 8007f16:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007f18:	88bb      	ldrh	r3, [r7, #4]
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f28:	88fa      	ldrh	r2, [r7, #6]
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f32:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	627b      	str	r3, [r7, #36]	; 0x24
 8007f38:	e018      	b.n	8007f6c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	3302      	adds	r3, #2
 8007f46:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	b2da      	uxtb	r2, r3
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	3301      	adds	r3, #1
 8007f54:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	0a1b      	lsrs	r3, r3, #8
 8007f5a:	b2da      	uxtb	r2, r3
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	3301      	adds	r3, #1
 8007f64:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e3      	bne.n	8007f3a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007f72:	88bb      	ldrh	r3, [r7, #4]
 8007f74:	f003 0301 	and.w	r3, r3, #1
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d007      	beq.n	8007f8e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	701a      	strb	r2, [r3, #0]
  }
}
 8007f8e:	bf00      	nop
 8007f90:	372c      	adds	r7, #44	; 0x2c
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fa6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007faa:	f004 fe83 	bl	800ccb4 <USBD_static_malloc>
 8007fae:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d105      	bne.n	8007fc2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e066      	b.n	8008090 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	7c1b      	ldrb	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d119      	bne.n	8008006 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	2181      	movs	r1, #129	; 0x81
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f004 fd0f 	bl	800c9fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fea:	2202      	movs	r2, #2
 8007fec:	2101      	movs	r1, #1
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f004 fd05 	bl	800c9fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2210      	movs	r2, #16
 8008000:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008004:	e016      	b.n	8008034 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008006:	2340      	movs	r3, #64	; 0x40
 8008008:	2202      	movs	r2, #2
 800800a:	2181      	movs	r1, #129	; 0x81
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f004 fcf6 	bl	800c9fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008018:	2340      	movs	r3, #64	; 0x40
 800801a:	2202      	movs	r2, #2
 800801c:	2101      	movs	r1, #1
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f004 fced 	bl	800c9fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2210      	movs	r2, #16
 8008030:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008034:	2308      	movs	r3, #8
 8008036:	2203      	movs	r2, #3
 8008038:	2182      	movs	r1, #130	; 0x82
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f004 fcdf 	bl	800c9fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	7c1b      	ldrb	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008074:	2101      	movs	r1, #1
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f004 fdb1 	bl	800cbde <USBD_LL_PrepareReceive>
 800807c:	e007      	b.n	800808e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008084:	2340      	movs	r3, #64	; 0x40
 8008086:	2101      	movs	r1, #1
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f004 fda8 	bl	800cbde <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	460b      	mov	r3, r1
 80080a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80080a4:	2181      	movs	r1, #129	; 0x81
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f004 fccf 	bl	800ca4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80080b2:	2101      	movs	r1, #1
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f004 fcc8 	bl	800ca4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80080c2:	2182      	movs	r1, #130	; 0x82
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f004 fcc0 	bl	800ca4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00e      	beq.n	8008102 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f4:	4618      	mov	r0, r3
 80080f6:	f004 fdeb 	bl	800ccd0 <USBD_static_free>
    pdev->pClassData = NULL;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800811c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800811e:	2300      	movs	r3, #0
 8008120:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008126:	2300      	movs	r3, #0
 8008128:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008130:	2303      	movs	r3, #3
 8008132:	e0af      	b.n	8008294 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800813c:	2b00      	cmp	r3, #0
 800813e:	d03f      	beq.n	80081c0 <USBD_CDC_Setup+0xb4>
 8008140:	2b20      	cmp	r3, #32
 8008142:	f040 809f 	bne.w	8008284 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	88db      	ldrh	r3, [r3, #6]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d02e      	beq.n	80081ac <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	b25b      	sxtb	r3, r3
 8008154:	2b00      	cmp	r3, #0
 8008156:	da16      	bge.n	8008186 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	683a      	ldr	r2, [r7, #0]
 8008162:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008164:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	88d2      	ldrh	r2, [r2, #6]
 800816a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	88db      	ldrh	r3, [r3, #6]
 8008170:	2b07      	cmp	r3, #7
 8008172:	bf28      	it	cs
 8008174:	2307      	movcs	r3, #7
 8008176:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	89fa      	ldrh	r2, [r7, #14]
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 fa9f 	bl	80096c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008184:	e085      	b.n	8008292 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	785a      	ldrb	r2, [r3, #1]
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	88db      	ldrh	r3, [r3, #6]
 8008194:	b2da      	uxtb	r2, r3
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800819c:	6939      	ldr	r1, [r7, #16]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	88db      	ldrh	r3, [r3, #6]
 80081a2:	461a      	mov	r2, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 fab8 	bl	800971a <USBD_CtlPrepareRx>
      break;
 80081aa:	e072      	b.n	8008292 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	683a      	ldr	r2, [r7, #0]
 80081b6:	7850      	ldrb	r0, [r2, #1]
 80081b8:	2200      	movs	r2, #0
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	4798      	blx	r3
      break;
 80081be:	e068      	b.n	8008292 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	785b      	ldrb	r3, [r3, #1]
 80081c4:	2b0b      	cmp	r3, #11
 80081c6:	d852      	bhi.n	800826e <USBD_CDC_Setup+0x162>
 80081c8:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <USBD_CDC_Setup+0xc4>)
 80081ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ce:	bf00      	nop
 80081d0:	08008201 	.word	0x08008201
 80081d4:	0800827d 	.word	0x0800827d
 80081d8:	0800826f 	.word	0x0800826f
 80081dc:	0800826f 	.word	0x0800826f
 80081e0:	0800826f 	.word	0x0800826f
 80081e4:	0800826f 	.word	0x0800826f
 80081e8:	0800826f 	.word	0x0800826f
 80081ec:	0800826f 	.word	0x0800826f
 80081f0:	0800826f 	.word	0x0800826f
 80081f4:	0800826f 	.word	0x0800826f
 80081f8:	0800822b 	.word	0x0800822b
 80081fc:	08008255 	.word	0x08008255
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b03      	cmp	r3, #3
 800820a:	d107      	bne.n	800821c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800820c:	f107 030a 	add.w	r3, r7, #10
 8008210:	2202      	movs	r2, #2
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f001 fa54 	bl	80096c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800821a:	e032      	b.n	8008282 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800821c:	6839      	ldr	r1, [r7, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 f9de 	bl	80095e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008224:	2303      	movs	r3, #3
 8008226:	75fb      	strb	r3, [r7, #23]
          break;
 8008228:	e02b      	b.n	8008282 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008230:	b2db      	uxtb	r3, r3
 8008232:	2b03      	cmp	r3, #3
 8008234:	d107      	bne.n	8008246 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008236:	f107 030d 	add.w	r3, r7, #13
 800823a:	2201      	movs	r2, #1
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 fa3f 	bl	80096c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008244:	e01d      	b.n	8008282 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 f9c9 	bl	80095e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800824e:	2303      	movs	r3, #3
 8008250:	75fb      	strb	r3, [r7, #23]
          break;
 8008252:	e016      	b.n	8008282 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b03      	cmp	r3, #3
 800825e:	d00f      	beq.n	8008280 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f001 f9bc 	bl	80095e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8008268:	2303      	movs	r3, #3
 800826a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800826c:	e008      	b.n	8008280 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 f9b5 	bl	80095e0 <USBD_CtlError>
          ret = USBD_FAIL;
 8008276:	2303      	movs	r3, #3
 8008278:	75fb      	strb	r3, [r7, #23]
          break;
 800827a:	e002      	b.n	8008282 <USBD_CDC_Setup+0x176>
          break;
 800827c:	bf00      	nop
 800827e:	e008      	b.n	8008292 <USBD_CDC_Setup+0x186>
          break;
 8008280:	bf00      	nop
      }
      break;
 8008282:	e006      	b.n	8008292 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f001 f9aa 	bl	80095e0 <USBD_CtlError>
      ret = USBD_FAIL;
 800828c:	2303      	movs	r3, #3
 800828e:	75fb      	strb	r3, [r7, #23]
      break;
 8008290:	bf00      	nop
  }

  return (uint8_t)ret;
 8008292:	7dfb      	ldrb	r3, [r7, #23]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	460b      	mov	r3, r1
 80082a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e04f      	b.n	800835e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082c4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	6879      	ldr	r1, [r7, #4]
 80082ca:	4613      	mov	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	440b      	add	r3, r1
 80082d4:	3318      	adds	r3, #24
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d029      	beq.n	8008330 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80082dc:	78fa      	ldrb	r2, [r7, #3]
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	3318      	adds	r3, #24
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	78f9      	ldrb	r1, [r7, #3]
 80082f0:	68f8      	ldr	r0, [r7, #12]
 80082f2:	460b      	mov	r3, r1
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	00db      	lsls	r3, r3, #3
 80082fa:	4403      	add	r3, r0
 80082fc:	3338      	adds	r3, #56	; 0x38
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	fbb2 f1f3 	udiv	r1, r2, r3
 8008304:	fb01 f303 	mul.w	r3, r1, r3
 8008308:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800830a:	2b00      	cmp	r3, #0
 800830c:	d110      	bne.n	8008330 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800830e:	78fa      	ldrb	r2, [r7, #3]
 8008310:	6879      	ldr	r1, [r7, #4]
 8008312:	4613      	mov	r3, r2
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	4413      	add	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	440b      	add	r3, r1
 800831c:	3318      	adds	r3, #24
 800831e:	2200      	movs	r2, #0
 8008320:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008322:	78f9      	ldrb	r1, [r7, #3]
 8008324:	2300      	movs	r3, #0
 8008326:	2200      	movs	r2, #0
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f004 fc37 	bl	800cb9c <USBD_LL_Transmit>
 800832e:	e015      	b.n	800835c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2200      	movs	r2, #0
 8008334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00b      	beq.n	800835c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008358:	78fa      	ldrb	r2, [r7, #3]
 800835a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008378:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008384:	2303      	movs	r3, #3
 8008386:	e015      	b.n	80083b4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f004 fc47 	bl	800cc20 <USBD_LL_GetRxDataSize>
 8008392:	4602      	mov	r2, r0
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80083ae:	4611      	mov	r1, r2
 80083b0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e01b      	b.n	800840e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d015      	beq.n	800840c <USBD_CDC_EP0_RxReady+0x50>
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80083e6:	2bff      	cmp	r3, #255	; 0xff
 80083e8:	d010      	beq.n	800840c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80083f8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008400:	b292      	uxth	r2, r2
 8008402:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	22ff      	movs	r2, #255	; 0xff
 8008408:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2243      	movs	r2, #67	; 0x43
 8008424:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008426:	4b03      	ldr	r3, [pc, #12]	; (8008434 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	20000094 	.word	0x20000094

08008438 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2243      	movs	r2, #67	; 0x43
 8008444:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008446:	4b03      	ldr	r3, [pc, #12]	; (8008454 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008448:	4618      	mov	r0, r3
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	20000050 	.word	0x20000050

08008458 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2243      	movs	r2, #67	; 0x43
 8008464:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008466:	4b03      	ldr	r3, [pc, #12]	; (8008474 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	200000d8 	.word	0x200000d8

08008478 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	220a      	movs	r2, #10
 8008484:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008486:	4b03      	ldr	r3, [pc, #12]	; (8008494 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008488:	4618      	mov	r0, r3
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	2000000c 	.word	0x2000000c

08008498 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e004      	b.n	80084b6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80084c2:	b480      	push	{r7}
 80084c4:	b087      	sub	sp, #28
 80084c6:	af00      	add	r7, sp, #0
 80084c8:	60f8      	str	r0, [r7, #12]
 80084ca:	60b9      	str	r1, [r7, #8]
 80084cc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084d4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80084dc:	2303      	movs	r3, #3
 80084de:	e008      	b.n	80084f2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	371c      	adds	r7, #28
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800850e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008516:	2303      	movs	r3, #3
 8008518:	e004      	b.n	8008524 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	683a      	ldr	r2, [r7, #0]
 800851e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3714      	adds	r7, #20
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800853e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008546:	2b00      	cmp	r3, #0
 8008548:	d101      	bne.n	800854e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800854a:	2303      	movs	r3, #3
 800854c:	e016      	b.n	800857c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	7c1b      	ldrb	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d109      	bne.n	800856a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800855c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008560:	2101      	movs	r1, #1
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f004 fb3b 	bl	800cbde <USBD_LL_PrepareReceive>
 8008568:	e007      	b.n	800857a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008570:	2340      	movs	r3, #64	; 0x40
 8008572:	2101      	movs	r1, #1
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f004 fb32 	bl	800cbde <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800857a:	2300      	movs	r3, #0
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	4613      	mov	r3, r2
 8008590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008598:	2303      	movs	r3, #3
 800859a:	e01f      	b.n	80085dc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2201      	movs	r2, #1
 80085c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	79fa      	ldrb	r2, [r7, #7]
 80085ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f004 f999 	bl	800c908 <USBD_LL_Init>
 80085d6:	4603      	mov	r3, r0
 80085d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80085ee:	2300      	movs	r3, #0
 80085f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d101      	bne.n	80085fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e016      	b.n	800862a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800860a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	f107 020e 	add.w	r2, r7, #14
 800861c:	4610      	mov	r0, r2
 800861e:	4798      	blx	r3
 8008620:	4602      	mov	r2, r0
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b082      	sub	sp, #8
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f004 f9c4 	bl	800c9c8 <USBD_LL_Start>
 8008640:	4603      	mov	r3, r0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800864a:	b480      	push	{r7}
 800864c:	b083      	sub	sp, #12
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008652:	2300      	movs	r3, #0
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	460b      	mov	r3, r1
 800866a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800866c:	2303      	movs	r3, #3
 800866e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	78fa      	ldrb	r2, [r7, #3]
 8008684:	4611      	mov	r1, r2
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	4798      	blx	r3
 800868a:	4603      	mov	r3, r0
 800868c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800868e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3710      	adds	r7, #16
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	78fa      	ldrb	r2, [r7, #3]
 80086b8:	4611      	mov	r1, r2
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
  }

  return USBD_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 ff46 	bl	800956c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086fc:	f003 031f 	and.w	r3, r3, #31
 8008700:	2b02      	cmp	r3, #2
 8008702:	d01a      	beq.n	800873a <USBD_LL_SetupStage+0x72>
 8008704:	2b02      	cmp	r3, #2
 8008706:	d822      	bhi.n	800874e <USBD_LL_SetupStage+0x86>
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <USBD_LL_SetupStage+0x4a>
 800870c:	2b01      	cmp	r3, #1
 800870e:	d00a      	beq.n	8008726 <USBD_LL_SetupStage+0x5e>
 8008710:	e01d      	b.n	800874e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f9ee 	bl	8008afc <USBD_StdDevReq>
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]
      break;
 8008724:	e020      	b.n	8008768 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa52 	bl	8008bd8 <USBD_StdItfReq>
 8008734:	4603      	mov	r3, r0
 8008736:	73fb      	strb	r3, [r7, #15]
      break;
 8008738:	e016      	b.n	8008768 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008740:	4619      	mov	r1, r3
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fa91 	bl	8008c6a <USBD_StdEPReq>
 8008748:	4603      	mov	r3, r0
 800874a:	73fb      	strb	r3, [r7, #15]
      break;
 800874c:	e00c      	b.n	8008768 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008754:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008758:	b2db      	uxtb	r3, r3
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f004 f993 	bl	800ca88 <USBD_LL_StallEP>
 8008762:	4603      	mov	r3, r0
 8008764:	73fb      	strb	r3, [r7, #15]
      break;
 8008766:	bf00      	nop
  }

  return ret;
 8008768:	7bfb      	ldrb	r3, [r7, #15]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b086      	sub	sp, #24
 8008776:	af00      	add	r7, sp, #0
 8008778:	60f8      	str	r0, [r7, #12]
 800877a:	460b      	mov	r3, r1
 800877c:	607a      	str	r2, [r7, #4]
 800877e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008780:	7afb      	ldrb	r3, [r7, #11]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d138      	bne.n	80087f8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800878c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008794:	2b03      	cmp	r3, #3
 8008796:	d14a      	bne.n	800882e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d913      	bls.n	80087cc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	1ad2      	subs	r2, r2, r3
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	4293      	cmp	r3, r2
 80087bc:	bf28      	it	cs
 80087be:	4613      	movcs	r3, r2
 80087c0:	461a      	mov	r2, r3
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 ffc5 	bl	8009754 <USBD_CtlContinueRx>
 80087ca:	e030      	b.n	800882e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d10b      	bne.n	80087f0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 ffc0 	bl	8009776 <USBD_CtlSendStatus>
 80087f6:	e01a      	b.n	800882e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b03      	cmp	r3, #3
 8008802:	d114      	bne.n	800882e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00e      	beq.n	800882e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	7afa      	ldrb	r2, [r7, #11]
 800881a:	4611      	mov	r1, r2
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	4798      	blx	r3
 8008820:	4603      	mov	r3, r0
 8008822:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800882a:	7dfb      	ldrb	r3, [r7, #23]
 800882c:	e000      	b.n	8008830 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	460b      	mov	r3, r1
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008846:	7afb      	ldrb	r3, [r7, #11]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d16b      	bne.n	8008924 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3314      	adds	r3, #20
 8008850:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008858:	2b02      	cmp	r3, #2
 800885a:	d156      	bne.n	800890a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	429a      	cmp	r2, r3
 8008866:	d914      	bls.n	8008892 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	1ad2      	subs	r2, r2, r3
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	461a      	mov	r2, r3
 800887c:	6879      	ldr	r1, [r7, #4]
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 ff3a 	bl	80096f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008884:	2300      	movs	r3, #0
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f004 f9a7 	bl	800cbde <USBD_LL_PrepareReceive>
 8008890:	e03b      	b.n	800890a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	68da      	ldr	r2, [r3, #12]
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	429a      	cmp	r2, r3
 800889c:	d11c      	bne.n	80088d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	685a      	ldr	r2, [r3, #4]
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d316      	bcc.n	80088d8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d20f      	bcs.n	80088d8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088b8:	2200      	movs	r2, #0
 80088ba:	2100      	movs	r1, #0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 ff1b 	bl	80096f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088ca:	2300      	movs	r3, #0
 80088cc:	2200      	movs	r2, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f004 f984 	bl	800cbde <USBD_LL_PrepareReceive>
 80088d6:	e018      	b.n	800890a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	2b03      	cmp	r3, #3
 80088e2:	d10b      	bne.n	80088fc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80088fc:	2180      	movs	r1, #128	; 0x80
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f004 f8c2 	bl	800ca88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 ff49 	bl	800979c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008910:	2b01      	cmp	r3, #1
 8008912:	d122      	bne.n	800895a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7ff fe98 	bl	800864a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008922:	e01a      	b.n	800895a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b03      	cmp	r3, #3
 800892e:	d114      	bne.n	800895a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00e      	beq.n	800895a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	7afa      	ldrb	r2, [r7, #11]
 8008946:	4611      	mov	r1, r2
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	4798      	blx	r3
 800894c:	4603      	mov	r3, r0
 800894e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	e000      	b.n	800895c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008994:	2303      	movs	r3, #3
 8008996:	e02f      	b.n	80089f8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d00f      	beq.n	80089c2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d009      	beq.n	80089c2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	6852      	ldr	r2, [r2, #4]
 80089ba:	b2d2      	uxtb	r2, r2
 80089bc:	4611      	mov	r1, r2
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089c2:	2340      	movs	r3, #64	; 0x40
 80089c4:	2200      	movs	r2, #0
 80089c6:	2100      	movs	r1, #0
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f004 f818 	bl	800c9fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2240      	movs	r2, #64	; 0x40
 80089da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089de:	2340      	movs	r3, #64	; 0x40
 80089e0:	2200      	movs	r2, #0
 80089e2:	2180      	movs	r1, #128	; 0x80
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f004 f80a 	bl	800c9fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2240      	movs	r2, #64	; 0x40
 80089f4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80089f6:	2300      	movs	r3, #0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3708      	adds	r7, #8
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	78fa      	ldrb	r2, [r7, #3]
 8008a10:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2204      	movs	r2, #4
 8008a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d106      	bne.n	8008a6e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	e012      	b.n	8008ab8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b03      	cmp	r3, #3
 8008a9c:	d10b      	bne.n	8008ab6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d005      	beq.n	8008ab6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ade:	8a3b      	ldrh	r3, [r7, #16]
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	b21a      	sxth	r2, r3
 8008ae4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	b21b      	sxth	r3, r3
 8008aec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008aee:	89fb      	ldrh	r3, [r7, #14]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	371c      	adds	r7, #28
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b12:	2b40      	cmp	r3, #64	; 0x40
 8008b14:	d005      	beq.n	8008b22 <USBD_StdDevReq+0x26>
 8008b16:	2b40      	cmp	r3, #64	; 0x40
 8008b18:	d853      	bhi.n	8008bc2 <USBD_StdDevReq+0xc6>
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <USBD_StdDevReq+0x3a>
 8008b1e:	2b20      	cmp	r3, #32
 8008b20:	d14f      	bne.n	8008bc2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	4798      	blx	r3
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]
      break;
 8008b34:	e04a      	b.n	8008bcc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	785b      	ldrb	r3, [r3, #1]
 8008b3a:	2b09      	cmp	r3, #9
 8008b3c:	d83b      	bhi.n	8008bb6 <USBD_StdDevReq+0xba>
 8008b3e:	a201      	add	r2, pc, #4	; (adr r2, 8008b44 <USBD_StdDevReq+0x48>)
 8008b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b44:	08008b99 	.word	0x08008b99
 8008b48:	08008bad 	.word	0x08008bad
 8008b4c:	08008bb7 	.word	0x08008bb7
 8008b50:	08008ba3 	.word	0x08008ba3
 8008b54:	08008bb7 	.word	0x08008bb7
 8008b58:	08008b77 	.word	0x08008b77
 8008b5c:	08008b6d 	.word	0x08008b6d
 8008b60:	08008bb7 	.word	0x08008bb7
 8008b64:	08008b8f 	.word	0x08008b8f
 8008b68:	08008b81 	.word	0x08008b81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f9de 	bl	8008f30 <USBD_GetDescriptor>
          break;
 8008b74:	e024      	b.n	8008bc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fb6d 	bl	8009258 <USBD_SetAddress>
          break;
 8008b7e:	e01f      	b.n	8008bc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fbac 	bl	80092e0 <USBD_SetConfig>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]
          break;
 8008b8c:	e018      	b.n	8008bc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fc4b 	bl	800942c <USBD_GetConfig>
          break;
 8008b96:	e013      	b.n	8008bc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fc7c 	bl	8009498 <USBD_GetStatus>
          break;
 8008ba0:	e00e      	b.n	8008bc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fcab 	bl	8009500 <USBD_SetFeature>
          break;
 8008baa:	e009      	b.n	8008bc0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fcba 	bl	8009528 <USBD_ClrFeature>
          break;
 8008bb4:	e004      	b.n	8008bc0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fd11 	bl	80095e0 <USBD_CtlError>
          break;
 8008bbe:	bf00      	nop
      }
      break;
 8008bc0:	e004      	b.n	8008bcc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008bc2:	6839      	ldr	r1, [r7, #0]
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fd0b 	bl	80095e0 <USBD_CtlError>
      break;
 8008bca:	bf00      	nop
  }

  return ret;
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop

08008bd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bee:	2b40      	cmp	r3, #64	; 0x40
 8008bf0:	d005      	beq.n	8008bfe <USBD_StdItfReq+0x26>
 8008bf2:	2b40      	cmp	r3, #64	; 0x40
 8008bf4:	d82f      	bhi.n	8008c56 <USBD_StdItfReq+0x7e>
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <USBD_StdItfReq+0x26>
 8008bfa:	2b20      	cmp	r3, #32
 8008bfc:	d12b      	bne.n	8008c56 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	3b01      	subs	r3, #1
 8008c08:	2b02      	cmp	r3, #2
 8008c0a:	d81d      	bhi.n	8008c48 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	889b      	ldrh	r3, [r3, #4]
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d813      	bhi.n	8008c3e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	4798      	blx	r3
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	88db      	ldrh	r3, [r3, #6]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d110      	bne.n	8008c52 <USBD_StdItfReq+0x7a>
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10d      	bne.n	8008c52 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fd9d 	bl	8009776 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c3c:	e009      	b.n	8008c52 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fccd 	bl	80095e0 <USBD_CtlError>
          break;
 8008c46:	e004      	b.n	8008c52 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fcc8 	bl	80095e0 <USBD_CtlError>
          break;
 8008c50:	e000      	b.n	8008c54 <USBD_StdItfReq+0x7c>
          break;
 8008c52:	bf00      	nop
      }
      break;
 8008c54:	e004      	b.n	8008c60 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fcc1 	bl	80095e0 <USBD_CtlError>
      break;
 8008c5e:	bf00      	nop
  }

  return ret;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	889b      	ldrh	r3, [r3, #4]
 8008c7c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c86:	2b40      	cmp	r3, #64	; 0x40
 8008c88:	d007      	beq.n	8008c9a <USBD_StdEPReq+0x30>
 8008c8a:	2b40      	cmp	r3, #64	; 0x40
 8008c8c:	f200 8145 	bhi.w	8008f1a <USBD_StdEPReq+0x2b0>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00c      	beq.n	8008cae <USBD_StdEPReq+0x44>
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	f040 8140 	bne.w	8008f1a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	4798      	blx	r3
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
      break;
 8008cac:	e13a      	b.n	8008f24 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	785b      	ldrb	r3, [r3, #1]
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d007      	beq.n	8008cc6 <USBD_StdEPReq+0x5c>
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	f300 8129 	bgt.w	8008f0e <USBD_StdEPReq+0x2a4>
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d07f      	beq.n	8008dc0 <USBD_StdEPReq+0x156>
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d03c      	beq.n	8008d3e <USBD_StdEPReq+0xd4>
 8008cc4:	e123      	b.n	8008f0e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d002      	beq.n	8008cd8 <USBD_StdEPReq+0x6e>
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d016      	beq.n	8008d04 <USBD_StdEPReq+0x9a>
 8008cd6:	e02c      	b.n	8008d32 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00d      	beq.n	8008cfa <USBD_StdEPReq+0x90>
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b80      	cmp	r3, #128	; 0x80
 8008ce2:	d00a      	beq.n	8008cfa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f003 fecd 	bl	800ca88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f003 fec9 	bl	800ca88 <USBD_LL_StallEP>
 8008cf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cf8:	e020      	b.n	8008d3c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fc6f 	bl	80095e0 <USBD_CtlError>
              break;
 8008d02:	e01b      	b.n	8008d3c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	885b      	ldrh	r3, [r3, #2]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10e      	bne.n	8008d2a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <USBD_StdEPReq+0xc0>
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	2b80      	cmp	r3, #128	; 0x80
 8008d16:	d008      	beq.n	8008d2a <USBD_StdEPReq+0xc0>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	88db      	ldrh	r3, [r3, #6]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d104      	bne.n	8008d2a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f003 feaf 	bl	800ca88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fd23 	bl	8009776 <USBD_CtlSendStatus>

              break;
 8008d30:	e004      	b.n	8008d3c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fc53 	bl	80095e0 <USBD_CtlError>
              break;
 8008d3a:	bf00      	nop
          }
          break;
 8008d3c:	e0ec      	b.n	8008f18 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d002      	beq.n	8008d50 <USBD_StdEPReq+0xe6>
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d016      	beq.n	8008d7c <USBD_StdEPReq+0x112>
 8008d4e:	e030      	b.n	8008db2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00d      	beq.n	8008d72 <USBD_StdEPReq+0x108>
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	2b80      	cmp	r3, #128	; 0x80
 8008d5a:	d00a      	beq.n	8008d72 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f003 fe91 	bl	800ca88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d66:	2180      	movs	r1, #128	; 0x80
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f003 fe8d 	bl	800ca88 <USBD_LL_StallEP>
 8008d6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d70:	e025      	b.n	8008dbe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fc33 	bl	80095e0 <USBD_CtlError>
              break;
 8008d7a:	e020      	b.n	8008dbe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	885b      	ldrh	r3, [r3, #2]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d11b      	bne.n	8008dbc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f003 fe97 	bl	800cac6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fcec 	bl	8009776 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	4798      	blx	r3
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008db0:	e004      	b.n	8008dbc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fc13 	bl	80095e0 <USBD_CtlError>
              break;
 8008dba:	e000      	b.n	8008dbe <USBD_StdEPReq+0x154>
              break;
 8008dbc:	bf00      	nop
          }
          break;
 8008dbe:	e0ab      	b.n	8008f18 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b02      	cmp	r3, #2
 8008dca:	d002      	beq.n	8008dd2 <USBD_StdEPReq+0x168>
 8008dcc:	2b03      	cmp	r3, #3
 8008dce:	d032      	beq.n	8008e36 <USBD_StdEPReq+0x1cc>
 8008dd0:	e097      	b.n	8008f02 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <USBD_StdEPReq+0x17e>
 8008dd8:	7bbb      	ldrb	r3, [r7, #14]
 8008dda:	2b80      	cmp	r3, #128	; 0x80
 8008ddc:	d004      	beq.n	8008de8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fbfd 	bl	80095e0 <USBD_CtlError>
                break;
 8008de6:	e091      	b.n	8008f0c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008de8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	da0b      	bge.n	8008e08 <USBD_StdEPReq+0x19e>
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008df6:	4613      	mov	r3, r2
 8008df8:	009b      	lsls	r3, r3, #2
 8008dfa:	4413      	add	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	3310      	adds	r3, #16
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	4413      	add	r3, r2
 8008e04:	3304      	adds	r3, #4
 8008e06:	e00b      	b.n	8008e20 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
 8008e0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	3304      	adds	r3, #4
 8008e20:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fc47 	bl	80096c2 <USBD_CtlSendData>
              break;
 8008e34:	e06a      	b.n	8008f0c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	da11      	bge.n	8008e62 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	f003 020f 	and.w	r2, r3, #15
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	4613      	mov	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	440b      	add	r3, r1
 8008e50:	3324      	adds	r3, #36	; 0x24
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d117      	bne.n	8008e88 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fbc0 	bl	80095e0 <USBD_CtlError>
                  break;
 8008e60:	e054      	b.n	8008f0c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	f003 020f 	and.w	r2, r3, #15
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d104      	bne.n	8008e88 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fbad 	bl	80095e0 <USBD_CtlError>
                  break;
 8008e86:	e041      	b.n	8008f0c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	da0b      	bge.n	8008ea8 <USBD_StdEPReq+0x23e>
 8008e90:	7bbb      	ldrb	r3, [r7, #14]
 8008e92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e96:	4613      	mov	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	4413      	add	r3, r2
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	3310      	adds	r3, #16
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	3304      	adds	r3, #4
 8008ea6:	e00b      	b.n	8008ec0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
 8008eaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <USBD_StdEPReq+0x264>
 8008ec8:	7bbb      	ldrb	r3, [r7, #14]
 8008eca:	2b80      	cmp	r3, #128	; 0x80
 8008ecc:	d103      	bne.n	8008ed6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
 8008ed4:	e00e      	b.n	8008ef4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ed6:	7bbb      	ldrb	r3, [r7, #14]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f003 fe12 	bl	800cb04 <USBD_LL_IsStallEP>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	e002      	b.n	8008ef4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fbe1 	bl	80096c2 <USBD_CtlSendData>
              break;
 8008f00:	e004      	b.n	8008f0c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008f02:	6839      	ldr	r1, [r7, #0]
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fb6b 	bl	80095e0 <USBD_CtlError>
              break;
 8008f0a:	bf00      	nop
          }
          break;
 8008f0c:	e004      	b.n	8008f18 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008f0e:	6839      	ldr	r1, [r7, #0]
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fb65 	bl	80095e0 <USBD_CtlError>
          break;
 8008f16:	bf00      	nop
      }
      break;
 8008f18:	e004      	b.n	8008f24 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008f1a:	6839      	ldr	r1, [r7, #0]
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 fb5f 	bl	80095e0 <USBD_CtlError>
      break;
 8008f22:	bf00      	nop
  }

  return ret;
 8008f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f42:	2300      	movs	r3, #0
 8008f44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	885b      	ldrh	r3, [r3, #2]
 8008f4a:	0a1b      	lsrs	r3, r3, #8
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	2b0e      	cmp	r3, #14
 8008f52:	f200 8152 	bhi.w	80091fa <USBD_GetDescriptor+0x2ca>
 8008f56:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <USBD_GetDescriptor+0x2c>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08008fcd 	.word	0x08008fcd
 8008f60:	08008fe5 	.word	0x08008fe5
 8008f64:	08009025 	.word	0x08009025
 8008f68:	080091fb 	.word	0x080091fb
 8008f6c:	080091fb 	.word	0x080091fb
 8008f70:	0800919b 	.word	0x0800919b
 8008f74:	080091c7 	.word	0x080091c7
 8008f78:	080091fb 	.word	0x080091fb
 8008f7c:	080091fb 	.word	0x080091fb
 8008f80:	080091fb 	.word	0x080091fb
 8008f84:	080091fb 	.word	0x080091fb
 8008f88:	080091fb 	.word	0x080091fb
 8008f8c:	080091fb 	.word	0x080091fb
 8008f90:	080091fb 	.word	0x080091fb
 8008f94:	08008f99 	.word	0x08008f99
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d00b      	beq.n	8008fbc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	687a      	ldr	r2, [r7, #4]
 8008fae:	7c12      	ldrb	r2, [r2, #16]
 8008fb0:	f107 0108 	add.w	r1, r7, #8
 8008fb4:	4610      	mov	r0, r2
 8008fb6:	4798      	blx	r3
 8008fb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fba:	e126      	b.n	800920a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008fbc:	6839      	ldr	r1, [r7, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fb0e 	bl	80095e0 <USBD_CtlError>
        err++;
 8008fc4:	7afb      	ldrb	r3, [r7, #11]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	72fb      	strb	r3, [r7, #11]
      break;
 8008fca:	e11e      	b.n	800920a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7c12      	ldrb	r2, [r2, #16]
 8008fd8:	f107 0108 	add.w	r1, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
      break;
 8008fe2:	e112      	b.n	800920a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	7c1b      	ldrb	r3, [r3, #16]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d10d      	bne.n	8009008 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff4:	f107 0208 	add.w	r2, r7, #8
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4798      	blx	r3
 8008ffc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	2202      	movs	r2, #2
 8009004:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009006:	e100      	b.n	800920a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009010:	f107 0208 	add.w	r2, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3301      	adds	r3, #1
 800901e:	2202      	movs	r2, #2
 8009020:	701a      	strb	r2, [r3, #0]
      break;
 8009022:	e0f2      	b.n	800920a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	885b      	ldrh	r3, [r3, #2]
 8009028:	b2db      	uxtb	r3, r3
 800902a:	2b05      	cmp	r3, #5
 800902c:	f200 80ac 	bhi.w	8009188 <USBD_GetDescriptor+0x258>
 8009030:	a201      	add	r2, pc, #4	; (adr r2, 8009038 <USBD_GetDescriptor+0x108>)
 8009032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009036:	bf00      	nop
 8009038:	08009051 	.word	0x08009051
 800903c:	08009085 	.word	0x08009085
 8009040:	080090b9 	.word	0x080090b9
 8009044:	080090ed 	.word	0x080090ed
 8009048:	08009121 	.word	0x08009121
 800904c:	08009155 	.word	0x08009155
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	7c12      	ldrb	r2, [r2, #16]
 8009068:	f107 0108 	add.w	r1, r7, #8
 800906c:	4610      	mov	r0, r2
 800906e:	4798      	blx	r3
 8009070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009072:	e091      	b.n	8009198 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fab2 	bl	80095e0 <USBD_CtlError>
            err++;
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	3301      	adds	r3, #1
 8009080:	72fb      	strb	r3, [r7, #11]
          break;
 8009082:	e089      	b.n	8009198 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	7c12      	ldrb	r2, [r2, #16]
 800909c:	f107 0108 	add.w	r1, r7, #8
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090a6:	e077      	b.n	8009198 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090a8:	6839      	ldr	r1, [r7, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fa98 	bl	80095e0 <USBD_CtlError>
            err++;
 80090b0:	7afb      	ldrb	r3, [r7, #11]
 80090b2:	3301      	adds	r3, #1
 80090b4:	72fb      	strb	r3, [r7, #11]
          break;
 80090b6:	e06f      	b.n	8009198 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	7c12      	ldrb	r2, [r2, #16]
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090da:	e05d      	b.n	8009198 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fa7e 	bl	80095e0 <USBD_CtlError>
            err++;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	3301      	adds	r3, #1
 80090e8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ea:	e055      	b.n	8009198 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fe:	691b      	ldr	r3, [r3, #16]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	7c12      	ldrb	r2, [r2, #16]
 8009104:	f107 0108 	add.w	r1, r7, #8
 8009108:	4610      	mov	r0, r2
 800910a:	4798      	blx	r3
 800910c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800910e:	e043      	b.n	8009198 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa64 	bl	80095e0 <USBD_CtlError>
            err++;
 8009118:	7afb      	ldrb	r3, [r7, #11]
 800911a:	3301      	adds	r3, #1
 800911c:	72fb      	strb	r3, [r7, #11]
          break;
 800911e:	e03b      	b.n	8009198 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00b      	beq.n	8009144 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009132:	695b      	ldr	r3, [r3, #20]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	7c12      	ldrb	r2, [r2, #16]
 8009138:	f107 0108 	add.w	r1, r7, #8
 800913c:	4610      	mov	r0, r2
 800913e:	4798      	blx	r3
 8009140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009142:	e029      	b.n	8009198 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fa4a 	bl	80095e0 <USBD_CtlError>
            err++;
 800914c:	7afb      	ldrb	r3, [r7, #11]
 800914e:	3301      	adds	r3, #1
 8009150:	72fb      	strb	r3, [r7, #11]
          break;
 8009152:	e021      	b.n	8009198 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00b      	beq.n	8009178 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009166:	699b      	ldr	r3, [r3, #24]
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	7c12      	ldrb	r2, [r2, #16]
 800916c:	f107 0108 	add.w	r1, r7, #8
 8009170:	4610      	mov	r0, r2
 8009172:	4798      	blx	r3
 8009174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009176:	e00f      	b.n	8009198 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009178:	6839      	ldr	r1, [r7, #0]
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fa30 	bl	80095e0 <USBD_CtlError>
            err++;
 8009180:	7afb      	ldrb	r3, [r7, #11]
 8009182:	3301      	adds	r3, #1
 8009184:	72fb      	strb	r3, [r7, #11]
          break;
 8009186:	e007      	b.n	8009198 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fa28 	bl	80095e0 <USBD_CtlError>
          err++;
 8009190:	7afb      	ldrb	r3, [r7, #11]
 8009192:	3301      	adds	r3, #1
 8009194:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009196:	bf00      	nop
      }
      break;
 8009198:	e037      	b.n	800920a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	7c1b      	ldrb	r3, [r3, #16]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d109      	bne.n	80091b6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091aa:	f107 0208 	add.w	r2, r7, #8
 80091ae:	4610      	mov	r0, r2
 80091b0:	4798      	blx	r3
 80091b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091b4:	e029      	b.n	800920a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fa11 	bl	80095e0 <USBD_CtlError>
        err++;
 80091be:	7afb      	ldrb	r3, [r7, #11]
 80091c0:	3301      	adds	r3, #1
 80091c2:	72fb      	strb	r3, [r7, #11]
      break;
 80091c4:	e021      	b.n	800920a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	7c1b      	ldrb	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10d      	bne.n	80091ea <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d6:	f107 0208 	add.w	r2, r7, #8
 80091da:	4610      	mov	r0, r2
 80091dc:	4798      	blx	r3
 80091de:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	3301      	adds	r3, #1
 80091e4:	2207      	movs	r2, #7
 80091e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091e8:	e00f      	b.n	800920a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f9f7 	bl	80095e0 <USBD_CtlError>
        err++;
 80091f2:	7afb      	ldrb	r3, [r7, #11]
 80091f4:	3301      	adds	r3, #1
 80091f6:	72fb      	strb	r3, [r7, #11]
      break;
 80091f8:	e007      	b.n	800920a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f9ef 	bl	80095e0 <USBD_CtlError>
      err++;
 8009202:	7afb      	ldrb	r3, [r7, #11]
 8009204:	3301      	adds	r3, #1
 8009206:	72fb      	strb	r3, [r7, #11]
      break;
 8009208:	bf00      	nop
  }

  if (err != 0U)
 800920a:	7afb      	ldrb	r3, [r7, #11]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d11e      	bne.n	800924e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	88db      	ldrh	r3, [r3, #6]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d016      	beq.n	8009246 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009218:	893b      	ldrh	r3, [r7, #8]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	88da      	ldrh	r2, [r3, #6]
 8009222:	893b      	ldrh	r3, [r7, #8]
 8009224:	4293      	cmp	r3, r2
 8009226:	bf28      	it	cs
 8009228:	4613      	movcs	r3, r2
 800922a:	b29b      	uxth	r3, r3
 800922c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800922e:	893b      	ldrh	r3, [r7, #8]
 8009230:	461a      	mov	r2, r3
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fa44 	bl	80096c2 <USBD_CtlSendData>
 800923a:	e009      	b.n	8009250 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f9ce 	bl	80095e0 <USBD_CtlError>
 8009244:	e004      	b.n	8009250 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fa95 	bl	8009776 <USBD_CtlSendStatus>
 800924c:	e000      	b.n	8009250 <USBD_GetDescriptor+0x320>
    return;
 800924e:	bf00      	nop
  }
}
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop

08009258 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	889b      	ldrh	r3, [r3, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d131      	bne.n	80092ce <USBD_SetAddress+0x76>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	88db      	ldrh	r3, [r3, #6]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d12d      	bne.n	80092ce <USBD_SetAddress+0x76>
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	885b      	ldrh	r3, [r3, #2]
 8009276:	2b7f      	cmp	r3, #127	; 0x7f
 8009278:	d829      	bhi.n	80092ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	885b      	ldrh	r3, [r3, #2]
 800927e:	b2db      	uxtb	r3, r3
 8009280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009284:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b03      	cmp	r3, #3
 8009290:	d104      	bne.n	800929c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f9a3 	bl	80095e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800929a:	e01d      	b.n	80092d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7bfa      	ldrb	r2, [r7, #15]
 80092a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f003 fc58 	bl	800cb5e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa61 	bl	8009776 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092b4:	7bfb      	ldrb	r3, [r7, #15]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d004      	beq.n	80092c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2202      	movs	r2, #2
 80092be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c2:	e009      	b.n	80092d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092cc:	e004      	b.n	80092d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092ce:	6839      	ldr	r1, [r7, #0]
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f985 	bl	80095e0 <USBD_CtlError>
  }
}
 80092d6:	bf00      	nop
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	885b      	ldrh	r3, [r3, #2]
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	4b4c      	ldr	r3, [pc, #304]	; (8009428 <USBD_SetConfig+0x148>)
 80092f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092f8:	4b4b      	ldr	r3, [pc, #300]	; (8009428 <USBD_SetConfig+0x148>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d905      	bls.n	800930c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f96c 	bl	80095e0 <USBD_CtlError>
    return USBD_FAIL;
 8009308:	2303      	movs	r3, #3
 800930a:	e088      	b.n	800941e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009312:	b2db      	uxtb	r3, r3
 8009314:	2b02      	cmp	r3, #2
 8009316:	d002      	beq.n	800931e <USBD_SetConfig+0x3e>
 8009318:	2b03      	cmp	r3, #3
 800931a:	d025      	beq.n	8009368 <USBD_SetConfig+0x88>
 800931c:	e071      	b.n	8009402 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800931e:	4b42      	ldr	r3, [pc, #264]	; (8009428 <USBD_SetConfig+0x148>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d01c      	beq.n	8009360 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009326:	4b40      	ldr	r3, [pc, #256]	; (8009428 <USBD_SetConfig+0x148>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	461a      	mov	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009330:	4b3d      	ldr	r3, [pc, #244]	; (8009428 <USBD_SetConfig+0x148>)
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff f992 	bl	8008660 <USBD_SetClassConfig>
 800933c:	4603      	mov	r3, r0
 800933e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009340:	7bfb      	ldrb	r3, [r7, #15]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d004      	beq.n	8009350 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f949 	bl	80095e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800934e:	e065      	b.n	800941c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fa10 	bl	8009776 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2203      	movs	r2, #3
 800935a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800935e:	e05d      	b.n	800941c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fa08 	bl	8009776 <USBD_CtlSendStatus>
      break;
 8009366:	e059      	b.n	800941c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009368:	4b2f      	ldr	r3, [pc, #188]	; (8009428 <USBD_SetConfig+0x148>)
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d112      	bne.n	8009396 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009378:	4b2b      	ldr	r3, [pc, #172]	; (8009428 <USBD_SetConfig+0x148>)
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009382:	4b29      	ldr	r3, [pc, #164]	; (8009428 <USBD_SetConfig+0x148>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f7ff f985 	bl	8008698 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f9f1 	bl	8009776 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009394:	e042      	b.n	800941c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009396:	4b24      	ldr	r3, [pc, #144]	; (8009428 <USBD_SetConfig+0x148>)
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d02a      	beq.n	80093fa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff f973 	bl	8008698 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80093b2:	4b1d      	ldr	r3, [pc, #116]	; (8009428 <USBD_SetConfig+0x148>)
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093bc:	4b1a      	ldr	r3, [pc, #104]	; (8009428 <USBD_SetConfig+0x148>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	4619      	mov	r1, r3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7ff f94c 	bl	8008660 <USBD_SetClassConfig>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00f      	beq.n	80093f2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f903 	bl	80095e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff f958 	bl	8008698 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2202      	movs	r2, #2
 80093ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093f0:	e014      	b.n	800941c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f9bf 	bl	8009776 <USBD_CtlSendStatus>
      break;
 80093f8:	e010      	b.n	800941c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f9bb 	bl	8009776 <USBD_CtlSendStatus>
      break;
 8009400:	e00c      	b.n	800941c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f8eb 	bl	80095e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800940a:	4b07      	ldr	r3, [pc, #28]	; (8009428 <USBD_SetConfig+0x148>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	4619      	mov	r1, r3
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f7ff f941 	bl	8008698 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009416:	2303      	movs	r3, #3
 8009418:	73fb      	strb	r3, [r7, #15]
      break;
 800941a:	bf00      	nop
  }

  return ret;
 800941c:	7bfb      	ldrb	r3, [r7, #15]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3710      	adds	r7, #16
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20000364 	.word	0x20000364

0800942c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	88db      	ldrh	r3, [r3, #6]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d004      	beq.n	8009448 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800943e:	6839      	ldr	r1, [r7, #0]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f8cd 	bl	80095e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009446:	e023      	b.n	8009490 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b02      	cmp	r3, #2
 8009452:	dc02      	bgt.n	800945a <USBD_GetConfig+0x2e>
 8009454:	2b00      	cmp	r3, #0
 8009456:	dc03      	bgt.n	8009460 <USBD_GetConfig+0x34>
 8009458:	e015      	b.n	8009486 <USBD_GetConfig+0x5a>
 800945a:	2b03      	cmp	r3, #3
 800945c:	d00b      	beq.n	8009476 <USBD_GetConfig+0x4a>
 800945e:	e012      	b.n	8009486 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	3308      	adds	r3, #8
 800946a:	2201      	movs	r2, #1
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f927 	bl	80096c2 <USBD_CtlSendData>
        break;
 8009474:	e00c      	b.n	8009490 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	3304      	adds	r3, #4
 800947a:	2201      	movs	r2, #1
 800947c:	4619      	mov	r1, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f91f 	bl	80096c2 <USBD_CtlSendData>
        break;
 8009484:	e004      	b.n	8009490 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f8a9 	bl	80095e0 <USBD_CtlError>
        break;
 800948e:	bf00      	nop
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	3b01      	subs	r3, #1
 80094ac:	2b02      	cmp	r3, #2
 80094ae:	d81e      	bhi.n	80094ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	88db      	ldrh	r3, [r3, #6]
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d004      	beq.n	80094c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80094b8:	6839      	ldr	r1, [r7, #0]
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f890 	bl	80095e0 <USBD_CtlError>
        break;
 80094c0:	e01a      	b.n	80094f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d005      	beq.n	80094de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68db      	ldr	r3, [r3, #12]
 80094d6:	f043 0202 	orr.w	r2, r3, #2
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	330c      	adds	r3, #12
 80094e2:	2202      	movs	r2, #2
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f8eb 	bl	80096c2 <USBD_CtlSendData>
      break;
 80094ec:	e004      	b.n	80094f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f875 	bl	80095e0 <USBD_CtlError>
      break;
 80094f6:	bf00      	nop
  }
}
 80094f8:	bf00      	nop
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	885b      	ldrh	r3, [r3, #2]
 800950e:	2b01      	cmp	r3, #1
 8009510:	d106      	bne.n	8009520 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f92b 	bl	8009776 <USBD_CtlSendStatus>
  }
}
 8009520:	bf00      	nop
 8009522:	3708      	adds	r7, #8
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009538:	b2db      	uxtb	r3, r3
 800953a:	3b01      	subs	r3, #1
 800953c:	2b02      	cmp	r3, #2
 800953e:	d80b      	bhi.n	8009558 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	885b      	ldrh	r3, [r3, #2]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d10c      	bne.n	8009562 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f910 	bl	8009776 <USBD_CtlSendStatus>
      }
      break;
 8009556:	e004      	b.n	8009562 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009558:	6839      	ldr	r1, [r7, #0]
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f840 	bl	80095e0 <USBD_CtlError>
      break;
 8009560:	e000      	b.n	8009564 <USBD_ClrFeature+0x3c>
      break;
 8009562:	bf00      	nop
  }
}
 8009564:	bf00      	nop
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	781a      	ldrb	r2, [r3, #0]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	781a      	ldrb	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	3301      	adds	r3, #1
 8009594:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f7ff fa92 	bl	8008ac0 <SWAPBYTE>
 800959c:	4603      	mov	r3, r0
 800959e:	461a      	mov	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	3301      	adds	r3, #1
 80095a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3301      	adds	r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f7ff fa85 	bl	8008ac0 <SWAPBYTE>
 80095b6:	4603      	mov	r3, r0
 80095b8:	461a      	mov	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3301      	adds	r3, #1
 80095c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	3301      	adds	r3, #1
 80095c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f7ff fa78 	bl	8008ac0 <SWAPBYTE>
 80095d0:	4603      	mov	r3, r0
 80095d2:	461a      	mov	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	80da      	strh	r2, [r3, #6]
}
 80095d8:	bf00      	nop
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b082      	sub	sp, #8
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80095ea:	2180      	movs	r1, #128	; 0x80
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f003 fa4b 	bl	800ca88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80095f2:	2100      	movs	r1, #0
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f003 fa47 	bl	800ca88 <USBD_LL_StallEP>
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b086      	sub	sp, #24
 8009606:	af00      	add	r7, sp, #0
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	60b9      	str	r1, [r7, #8]
 800960c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d036      	beq.n	8009686 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800961c:	6938      	ldr	r0, [r7, #16]
 800961e:	f000 f836 	bl	800968e <USBD_GetLen>
 8009622:	4603      	mov	r3, r0
 8009624:	3301      	adds	r3, #1
 8009626:	b29b      	uxth	r3, r3
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009630:	7dfb      	ldrb	r3, [r7, #23]
 8009632:	68ba      	ldr	r2, [r7, #8]
 8009634:	4413      	add	r3, r2
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	7812      	ldrb	r2, [r2, #0]
 800963a:	701a      	strb	r2, [r3, #0]
  idx++;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
 800963e:	3301      	adds	r3, #1
 8009640:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	4413      	add	r3, r2
 8009648:	2203      	movs	r2, #3
 800964a:	701a      	strb	r2, [r3, #0]
  idx++;
 800964c:	7dfb      	ldrb	r3, [r7, #23]
 800964e:	3301      	adds	r3, #1
 8009650:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009652:	e013      	b.n	800967c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009654:	7dfb      	ldrb	r3, [r7, #23]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	4413      	add	r3, r2
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	7812      	ldrb	r2, [r2, #0]
 800965e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	3301      	adds	r3, #1
 8009664:	613b      	str	r3, [r7, #16]
    idx++;
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	3301      	adds	r3, #1
 800966a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	4413      	add	r3, r2
 8009672:	2200      	movs	r2, #0
 8009674:	701a      	strb	r2, [r3, #0]
    idx++;
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	3301      	adds	r3, #1
 800967a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1e7      	bne.n	8009654 <USBD_GetString+0x52>
 8009684:	e000      	b.n	8009688 <USBD_GetString+0x86>
    return;
 8009686:	bf00      	nop
  }
}
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800968e:	b480      	push	{r7}
 8009690:	b085      	sub	sp, #20
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800969e:	e005      	b.n	80096ac <USBD_GetLen+0x1e>
  {
    len++;
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	3301      	adds	r3, #1
 80096a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	3301      	adds	r3, #1
 80096aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1f5      	bne.n	80096a0 <USBD_GetLen+0x12>
  }

  return len;
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b084      	sub	sp, #16
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2202      	movs	r2, #2
 80096d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	2100      	movs	r1, #0
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f003 fa57 	bl	800cb9c <USBD_LL_Transmit>

  return USBD_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	2100      	movs	r1, #0
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f003 fa46 	bl	800cb9c <USBD_LL_Transmit>

  return USBD_OK;
 8009710:	2300      	movs	r3, #0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	60f8      	str	r0, [r7, #12]
 8009722:	60b9      	str	r1, [r7, #8]
 8009724:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2203      	movs	r2, #3
 800972a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	2100      	movs	r1, #0
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f003 fa4a 	bl	800cbde <USBD_LL_PrepareReceive>

  return USBD_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	3710      	adds	r7, #16
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	2100      	movs	r1, #0
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f003 fa39 	bl	800cbde <USBD_LL_PrepareReceive>

  return USBD_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2204      	movs	r2, #4
 8009782:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009786:	2300      	movs	r3, #0
 8009788:	2200      	movs	r2, #0
 800978a:	2100      	movs	r1, #0
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f003 fa05 	bl	800cb9c <USBD_LL_Transmit>

  return USBD_OK;
 8009792:	2300      	movs	r3, #0
}
 8009794:	4618      	mov	r0, r3
 8009796:	3708      	adds	r7, #8
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2205      	movs	r2, #5
 80097a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097ac:	2300      	movs	r3, #0
 80097ae:	2200      	movs	r2, #0
 80097b0:	2100      	movs	r1, #0
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f003 fa13 	bl	800cbde <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <__NVIC_SetPriority>:
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	db0a      	blt.n	80097ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	490c      	ldr	r1, [pc, #48]	; (8009810 <__NVIC_SetPriority+0x4c>)
 80097de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097e2:	0112      	lsls	r2, r2, #4
 80097e4:	b2d2      	uxtb	r2, r2
 80097e6:	440b      	add	r3, r1
 80097e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80097ec:	e00a      	b.n	8009804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	4908      	ldr	r1, [pc, #32]	; (8009814 <__NVIC_SetPriority+0x50>)
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	3b04      	subs	r3, #4
 80097fc:	0112      	lsls	r2, r2, #4
 80097fe:	b2d2      	uxtb	r2, r2
 8009800:	440b      	add	r3, r1
 8009802:	761a      	strb	r2, [r3, #24]
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	e000e100 	.word	0xe000e100
 8009814:	e000ed00 	.word	0xe000ed00

08009818 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800981c:	4b05      	ldr	r3, [pc, #20]	; (8009834 <SysTick_Handler+0x1c>)
 800981e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009820:	f001 fd2a 	bl	800b278 <xTaskGetSchedulerState>
 8009824:	4603      	mov	r3, r0
 8009826:	2b01      	cmp	r3, #1
 8009828:	d001      	beq.n	800982e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800982a:	f002 fb15 	bl	800be58 <xPortSysTickHandler>
  }
}
 800982e:	bf00      	nop
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	e000e010 	.word	0xe000e010

08009838 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800983c:	2100      	movs	r1, #0
 800983e:	f06f 0004 	mvn.w	r0, #4
 8009842:	f7ff ffbf 	bl	80097c4 <__NVIC_SetPriority>
#endif
}
 8009846:	bf00      	nop
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800984c:	b480      	push	{r7}
 800984e:	b083      	sub	sp, #12
 8009850:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009852:	f3ef 8305 	mrs	r3, IPSR
 8009856:	603b      	str	r3, [r7, #0]
  return(result);
 8009858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800985e:	f06f 0305 	mvn.w	r3, #5
 8009862:	607b      	str	r3, [r7, #4]
 8009864:	e00c      	b.n	8009880 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009866:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <osKernelInitialize+0x44>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d105      	bne.n	800987a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800986e:	4b08      	ldr	r3, [pc, #32]	; (8009890 <osKernelInitialize+0x44>)
 8009870:	2201      	movs	r2, #1
 8009872:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009874:	2300      	movs	r3, #0
 8009876:	607b      	str	r3, [r7, #4]
 8009878:	e002      	b.n	8009880 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800987a:	f04f 33ff 	mov.w	r3, #4294967295
 800987e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009880:	687b      	ldr	r3, [r7, #4]
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000368 	.word	0x20000368

08009894 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800989a:	f3ef 8305 	mrs	r3, IPSR
 800989e:	603b      	str	r3, [r7, #0]
  return(result);
 80098a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80098a6:	f06f 0305 	mvn.w	r3, #5
 80098aa:	607b      	str	r3, [r7, #4]
 80098ac:	e010      	b.n	80098d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80098ae:	4b0b      	ldr	r3, [pc, #44]	; (80098dc <osKernelStart+0x48>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d109      	bne.n	80098ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80098b6:	f7ff ffbf 	bl	8009838 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80098ba:	4b08      	ldr	r3, [pc, #32]	; (80098dc <osKernelStart+0x48>)
 80098bc:	2202      	movs	r2, #2
 80098be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80098c0:	f001 f830 	bl	800a924 <vTaskStartScheduler>
      stat = osOK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	e002      	b.n	80098d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80098ca:	f04f 33ff 	mov.w	r3, #4294967295
 80098ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098d0:	687b      	ldr	r3, [r7, #4]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000368 	.word	0x20000368

080098e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08e      	sub	sp, #56	; 0x38
 80098e4:	af04      	add	r7, sp, #16
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098ec:	2300      	movs	r3, #0
 80098ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098f0:	f3ef 8305 	mrs	r3, IPSR
 80098f4:	617b      	str	r3, [r7, #20]
  return(result);
 80098f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d17e      	bne.n	80099fa <osThreadNew+0x11a>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d07b      	beq.n	80099fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009902:	2380      	movs	r3, #128	; 0x80
 8009904:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009906:	2318      	movs	r3, #24
 8009908:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800990a:	2300      	movs	r3, #0
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800990e:	f04f 33ff 	mov.w	r3, #4294967295
 8009912:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d045      	beq.n	80099a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d002      	beq.n	8009928 <osThreadNew+0x48>
        name = attr->name;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d008      	beq.n	800994e <osThreadNew+0x6e>
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	2b38      	cmp	r3, #56	; 0x38
 8009940:	d805      	bhi.n	800994e <osThreadNew+0x6e>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f003 0301 	and.w	r3, r3, #1
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <osThreadNew+0x72>
        return (NULL);
 800994e:	2300      	movs	r3, #0
 8009950:	e054      	b.n	80099fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	089b      	lsrs	r3, r3, #2
 8009960:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00e      	beq.n	8009988 <osThreadNew+0xa8>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	2bbf      	cmp	r3, #191	; 0xbf
 8009970:	d90a      	bls.n	8009988 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009976:	2b00      	cmp	r3, #0
 8009978:	d006      	beq.n	8009988 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	695b      	ldr	r3, [r3, #20]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d002      	beq.n	8009988 <osThreadNew+0xa8>
        mem = 1;
 8009982:	2301      	movs	r3, #1
 8009984:	61bb      	str	r3, [r7, #24]
 8009986:	e010      	b.n	80099aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10c      	bne.n	80099aa <osThreadNew+0xca>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d108      	bne.n	80099aa <osThreadNew+0xca>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d104      	bne.n	80099aa <osThreadNew+0xca>
          mem = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	61bb      	str	r3, [r7, #24]
 80099a4:	e001      	b.n	80099aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d110      	bne.n	80099d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099b8:	9202      	str	r2, [sp, #8]
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	6a3a      	ldr	r2, [r7, #32]
 80099c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099c6:	68f8      	ldr	r0, [r7, #12]
 80099c8:	f000 fdf0 	bl	800a5ac <xTaskCreateStatic>
 80099cc:	4603      	mov	r3, r0
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	e013      	b.n	80099fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80099d2:	69bb      	ldr	r3, [r7, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d110      	bne.n	80099fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099d8:	6a3b      	ldr	r3, [r7, #32]
 80099da:	b29a      	uxth	r2, r3
 80099dc:	f107 0310 	add.w	r3, r7, #16
 80099e0:	9301      	str	r3, [sp, #4]
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 fe3b 	bl	800a666 <xTaskCreate>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d001      	beq.n	80099fa <osThreadNew+0x11a>
            hTask = NULL;
 80099f6:	2300      	movs	r3, #0
 80099f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099fa:	693b      	ldr	r3, [r7, #16]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3728      	adds	r7, #40	; 0x28
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	4a07      	ldr	r2, [pc, #28]	; (8009a30 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	4a06      	ldr	r2, [pc, #24]	; (8009a34 <vApplicationGetIdleTaskMemory+0x30>)
 8009a1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2280      	movs	r2, #128	; 0x80
 8009a20:	601a      	str	r2, [r3, #0]
}
 8009a22:	bf00      	nop
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	2000036c 	.word	0x2000036c
 8009a34:	2000042c 	.word	0x2000042c

08009a38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4a07      	ldr	r2, [pc, #28]	; (8009a64 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	4a06      	ldr	r2, [pc, #24]	; (8009a68 <vApplicationGetTimerTaskMemory+0x30>)
 8009a4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a56:	601a      	str	r2, [r3, #0]
}
 8009a58:	bf00      	nop
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	2000062c 	.word	0x2000062c
 8009a68:	200006ec 	.word	0x200006ec

08009a6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f103 0208 	add.w	r2, r3, #8
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f04f 32ff 	mov.w	r2, #4294967295
 8009a84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f103 0208 	add.w	r2, r3, #8
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f103 0208 	add.w	r2, r3, #8
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009aa0:	bf00      	nop
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009aba:	bf00      	nop
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b085      	sub	sp, #20
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	689a      	ldr	r2, [r3, #8]
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	1c5a      	adds	r2, r3, #1
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	601a      	str	r2, [r3, #0]
}
 8009b02:	bf00      	nop
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr

08009b0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b085      	sub	sp, #20
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b24:	d103      	bne.n	8009b2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	e00c      	b.n	8009b48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	3308      	adds	r3, #8
 8009b32:	60fb      	str	r3, [r7, #12]
 8009b34:	e002      	b.n	8009b3c <vListInsert+0x2e>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	60fb      	str	r3, [r7, #12]
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d2f6      	bcs.n	8009b36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	68fa      	ldr	r2, [r7, #12]
 8009b5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	601a      	str	r2, [r3, #0]
}
 8009b74:	bf00      	nop
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	6892      	ldr	r2, [r2, #8]
 8009b96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	6852      	ldr	r2, [r2, #4]
 8009ba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d103      	bne.n	8009bb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	689a      	ldr	r2, [r3, #8]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	1e5a      	subs	r2, r3, #1
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3714      	adds	r7, #20
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d10a      	bne.n	8009bfe <xQueueGenericReset+0x2a>
	__asm volatile
 8009be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bec:	f383 8811 	msr	BASEPRI, r3
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	f3bf 8f4f 	dsb	sy
 8009bf8:	60bb      	str	r3, [r7, #8]
}
 8009bfa:	bf00      	nop
 8009bfc:	e7fe      	b.n	8009bfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009bfe:	f002 f899 	bl	800bd34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0a:	68f9      	ldr	r1, [r7, #12]
 8009c0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c0e:	fb01 f303 	mul.w	r3, r1, r3
 8009c12:	441a      	add	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	68f9      	ldr	r1, [r7, #12]
 8009c32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c34:	fb01 f303 	mul.w	r3, r1, r3
 8009c38:	441a      	add	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	22ff      	movs	r2, #255	; 0xff
 8009c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	22ff      	movs	r2, #255	; 0xff
 8009c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d114      	bne.n	8009c7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d01a      	beq.n	8009c92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3310      	adds	r3, #16
 8009c60:	4618      	mov	r0, r3
 8009c62:	f001 f945 	bl	800aef0 <xTaskRemoveFromEventList>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d012      	beq.n	8009c92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c6c:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <xQueueGenericReset+0xcc>)
 8009c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c72:	601a      	str	r2, [r3, #0]
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	e009      	b.n	8009c92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3310      	adds	r3, #16
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7ff fef2 	bl	8009a6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3324      	adds	r3, #36	; 0x24
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7ff feed 	bl	8009a6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c92:	f002 f87f 	bl	800bd94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c96:	2301      	movs	r3, #1
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b08e      	sub	sp, #56	; 0x38
 8009ca8:	af02      	add	r7, sp, #8
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d002      	beq.n	8009cf6 <xQueueGenericCreateStatic+0x52>
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d001      	beq.n	8009cfa <xQueueGenericCreateStatic+0x56>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e000      	b.n	8009cfc <xQueueGenericCreateStatic+0x58>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10a      	bne.n	8009d16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	623b      	str	r3, [r7, #32]
}
 8009d12:	bf00      	nop
 8009d14:	e7fe      	b.n	8009d14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d102      	bne.n	8009d22 <xQueueGenericCreateStatic+0x7e>
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d101      	bne.n	8009d26 <xQueueGenericCreateStatic+0x82>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <xQueueGenericCreateStatic+0x84>
 8009d26:	2300      	movs	r3, #0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10a      	bne.n	8009d42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	61fb      	str	r3, [r7, #28]
}
 8009d3e:	bf00      	nop
 8009d40:	e7fe      	b.n	8009d40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d42:	2350      	movs	r3, #80	; 0x50
 8009d44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	2b50      	cmp	r3, #80	; 0x50
 8009d4a:	d00a      	beq.n	8009d62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	61bb      	str	r3, [r7, #24]
}
 8009d5e:	bf00      	nop
 8009d60:	e7fe      	b.n	8009d60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00d      	beq.n	8009d8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d70:	2201      	movs	r2, #1
 8009d72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	9300      	str	r3, [sp, #0]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	68b9      	ldr	r1, [r7, #8]
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 f805 	bl	8009d94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3730      	adds	r7, #48	; 0x30
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
 8009da0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d103      	bne.n	8009db0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	69ba      	ldr	r2, [r7, #24]
 8009dac:	601a      	str	r2, [r3, #0]
 8009dae:	e002      	b.n	8009db6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	69b8      	ldr	r0, [r7, #24]
 8009dc6:	f7ff ff05 	bl	8009bd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	78fa      	ldrb	r2, [r7, #3]
 8009dce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009dd2:	bf00      	nop
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08e      	sub	sp, #56	; 0x38
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dea:	2300      	movs	r3, #0
 8009dec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <xQueueGenericSend+0x32>
	__asm volatile
 8009df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e0a:	bf00      	nop
 8009e0c:	e7fe      	b.n	8009e0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d103      	bne.n	8009e1c <xQueueGenericSend+0x40>
 8009e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d101      	bne.n	8009e20 <xQueueGenericSend+0x44>
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e000      	b.n	8009e22 <xQueueGenericSend+0x46>
 8009e20:	2300      	movs	r3, #0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10a      	bne.n	8009e3c <xQueueGenericSend+0x60>
	__asm volatile
 8009e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e38:	bf00      	nop
 8009e3a:	e7fe      	b.n	8009e3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d103      	bne.n	8009e4a <xQueueGenericSend+0x6e>
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <xQueueGenericSend+0x72>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e000      	b.n	8009e50 <xQueueGenericSend+0x74>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10a      	bne.n	8009e6a <xQueueGenericSend+0x8e>
	__asm volatile
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	623b      	str	r3, [r7, #32]
}
 8009e66:	bf00      	nop
 8009e68:	e7fe      	b.n	8009e68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e6a:	f001 fa05 	bl	800b278 <xTaskGetSchedulerState>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d102      	bne.n	8009e7a <xQueueGenericSend+0x9e>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <xQueueGenericSend+0xa2>
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e000      	b.n	8009e80 <xQueueGenericSend+0xa4>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <xQueueGenericSend+0xbe>
	__asm volatile
 8009e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	61fb      	str	r3, [r7, #28]
}
 8009e96:	bf00      	nop
 8009e98:	e7fe      	b.n	8009e98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e9a:	f001 ff4b 	bl	800bd34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d302      	bcc.n	8009eb0 <xQueueGenericSend+0xd4>
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d129      	bne.n	8009f04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009eb0:	683a      	ldr	r2, [r7, #0]
 8009eb2:	68b9      	ldr	r1, [r7, #8]
 8009eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eb6:	f000 fa0b 	bl	800a2d0 <prvCopyDataToQueue>
 8009eba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d010      	beq.n	8009ee6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	3324      	adds	r3, #36	; 0x24
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f001 f811 	bl	800aef0 <xTaskRemoveFromEventList>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d013      	beq.n	8009efc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ed4:	4b3f      	ldr	r3, [pc, #252]	; (8009fd4 <xQueueGenericSend+0x1f8>)
 8009ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	f3bf 8f6f 	isb	sy
 8009ee4:	e00a      	b.n	8009efc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d007      	beq.n	8009efc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009eec:	4b39      	ldr	r3, [pc, #228]	; (8009fd4 <xQueueGenericSend+0x1f8>)
 8009eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009efc:	f001 ff4a 	bl	800bd94 <vPortExitCritical>
				return pdPASS;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e063      	b.n	8009fcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d103      	bne.n	8009f12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f0a:	f001 ff43 	bl	800bd94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	e05c      	b.n	8009fcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d106      	bne.n	8009f26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f18:	f107 0314 	add.w	r3, r7, #20
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f001 f84b 	bl	800afb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f22:	2301      	movs	r3, #1
 8009f24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f26:	f001 ff35 	bl	800bd94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f2a:	f000 fd6d 	bl	800aa08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f2e:	f001 ff01 	bl	800bd34 <vPortEnterCritical>
 8009f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f38:	b25b      	sxtb	r3, r3
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3e:	d103      	bne.n	8009f48 <xQueueGenericSend+0x16c>
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f4e:	b25b      	sxtb	r3, r3
 8009f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f54:	d103      	bne.n	8009f5e <xQueueGenericSend+0x182>
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f5e:	f001 ff19 	bl	800bd94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f62:	1d3a      	adds	r2, r7, #4
 8009f64:	f107 0314 	add.w	r3, r7, #20
 8009f68:	4611      	mov	r1, r2
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f001 f83a 	bl	800afe4 <xTaskCheckForTimeOut>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d124      	bne.n	8009fc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f78:	f000 faa2 	bl	800a4c0 <prvIsQueueFull>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d018      	beq.n	8009fb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f84:	3310      	adds	r3, #16
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f000 ff60 	bl	800ae50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f92:	f000 fa2d 	bl	800a3f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f96:	f000 fd45 	bl	800aa24 <xTaskResumeAll>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	f47f af7c 	bne.w	8009e9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009fa2:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <xQueueGenericSend+0x1f8>)
 8009fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	f3bf 8f4f 	dsb	sy
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	e772      	b.n	8009e9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fb6:	f000 fa1b 	bl	800a3f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fba:	f000 fd33 	bl	800aa24 <xTaskResumeAll>
 8009fbe:	e76c      	b.n	8009e9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fc2:	f000 fa15 	bl	800a3f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fc6:	f000 fd2d 	bl	800aa24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3738      	adds	r7, #56	; 0x38
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	e000ed04 	.word	0xe000ed04

08009fd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b090      	sub	sp, #64	; 0x40
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
 8009fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10a      	bne.n	800a006 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a002:	bf00      	nop
 800a004:	e7fe      	b.n	800a004 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d103      	bne.n	800a014 <xQueueGenericSendFromISR+0x3c>
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <xQueueGenericSendFromISR+0x40>
 800a014:	2301      	movs	r3, #1
 800a016:	e000      	b.n	800a01a <xQueueGenericSendFromISR+0x42>
 800a018:	2300      	movs	r3, #0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10a      	bne.n	800a034 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d103      	bne.n	800a042 <xQueueGenericSendFromISR+0x6a>
 800a03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d101      	bne.n	800a046 <xQueueGenericSendFromISR+0x6e>
 800a042:	2301      	movs	r3, #1
 800a044:	e000      	b.n	800a048 <xQueueGenericSendFromISR+0x70>
 800a046:	2300      	movs	r3, #0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10a      	bne.n	800a062 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	623b      	str	r3, [r7, #32]
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a062:	f001 ff49 	bl	800bef8 <vPortValidateInterruptPriority>
	__asm volatile
 800a066:	f3ef 8211 	mrs	r2, BASEPRI
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	f383 8811 	msr	BASEPRI, r3
 800a072:	f3bf 8f6f 	isb	sy
 800a076:	f3bf 8f4f 	dsb	sy
 800a07a:	61fa      	str	r2, [r7, #28]
 800a07c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a07e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a080:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d302      	bcc.n	800a094 <xQueueGenericSendFromISR+0xbc>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d12f      	bne.n	800a0f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	68b9      	ldr	r1, [r7, #8]
 800a0a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a0aa:	f000 f911 	bl	800a2d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0b6:	d112      	bne.n	800a0de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d016      	beq.n	800a0ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0c2:	3324      	adds	r3, #36	; 0x24
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 ff13 	bl	800aef0 <xTaskRemoveFromEventList>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00e      	beq.n	800a0ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00b      	beq.n	800a0ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	601a      	str	r2, [r3, #0]
 800a0dc:	e007      	b.n	800a0ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	b25a      	sxtb	r2, r3
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a0f2:	e001      	b.n	800a0f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fa:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f383 8811 	msr	BASEPRI, r3
}
 800a102:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a106:	4618      	mov	r0, r3
 800a108:	3740      	adds	r7, #64	; 0x40
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b08c      	sub	sp, #48	; 0x30
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10a      	bne.n	800a140 <xQueueReceive+0x30>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	623b      	str	r3, [r7, #32]
}
 800a13c:	bf00      	nop
 800a13e:	e7fe      	b.n	800a13e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d103      	bne.n	800a14e <xQueueReceive+0x3e>
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <xQueueReceive+0x42>
 800a14e:	2301      	movs	r3, #1
 800a150:	e000      	b.n	800a154 <xQueueReceive+0x44>
 800a152:	2300      	movs	r3, #0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d10a      	bne.n	800a16e <xQueueReceive+0x5e>
	__asm volatile
 800a158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15c:	f383 8811 	msr	BASEPRI, r3
 800a160:	f3bf 8f6f 	isb	sy
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	61fb      	str	r3, [r7, #28]
}
 800a16a:	bf00      	nop
 800a16c:	e7fe      	b.n	800a16c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a16e:	f001 f883 	bl	800b278 <xTaskGetSchedulerState>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <xQueueReceive+0x6e>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <xQueueReceive+0x72>
 800a17e:	2301      	movs	r3, #1
 800a180:	e000      	b.n	800a184 <xQueueReceive+0x74>
 800a182:	2300      	movs	r3, #0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10a      	bne.n	800a19e <xQueueReceive+0x8e>
	__asm volatile
 800a188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	61bb      	str	r3, [r7, #24]
}
 800a19a:	bf00      	nop
 800a19c:	e7fe      	b.n	800a19c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a19e:	f001 fdc9 	bl	800bd34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d01f      	beq.n	800a1ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1ae:	68b9      	ldr	r1, [r7, #8]
 800a1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1b2:	f000 f8f7 	bl	800a3a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b8:	1e5a      	subs	r2, r3, #1
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00f      	beq.n	800a1e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c8:	3310      	adds	r3, #16
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 fe90 	bl	800aef0 <xTaskRemoveFromEventList>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d007      	beq.n	800a1e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1d6:	4b3d      	ldr	r3, [pc, #244]	; (800a2cc <xQueueReceive+0x1bc>)
 800a1d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1e6:	f001 fdd5 	bl	800bd94 <vPortExitCritical>
				return pdPASS;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e069      	b.n	800a2c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d103      	bne.n	800a1fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1f4:	f001 fdce 	bl	800bd94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	e062      	b.n	800a2c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d106      	bne.n	800a210 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a202:	f107 0310 	add.w	r3, r7, #16
 800a206:	4618      	mov	r0, r3
 800a208:	f000 fed6 	bl	800afb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a20c:	2301      	movs	r3, #1
 800a20e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a210:	f001 fdc0 	bl	800bd94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a214:	f000 fbf8 	bl	800aa08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a218:	f001 fd8c 	bl	800bd34 <vPortEnterCritical>
 800a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a222:	b25b      	sxtb	r3, r3
 800a224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a228:	d103      	bne.n	800a232 <xQueueReceive+0x122>
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a238:	b25b      	sxtb	r3, r3
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	d103      	bne.n	800a248 <xQueueReceive+0x138>
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a248:	f001 fda4 	bl	800bd94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a24c:	1d3a      	adds	r2, r7, #4
 800a24e:	f107 0310 	add.w	r3, r7, #16
 800a252:	4611      	mov	r1, r2
 800a254:	4618      	mov	r0, r3
 800a256:	f000 fec5 	bl	800afe4 <xTaskCheckForTimeOut>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d123      	bne.n	800a2a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a262:	f000 f917 	bl	800a494 <prvIsQueueEmpty>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d017      	beq.n	800a29c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a26e:	3324      	adds	r3, #36	; 0x24
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	4611      	mov	r1, r2
 800a274:	4618      	mov	r0, r3
 800a276:	f000 fdeb 	bl	800ae50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a27a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a27c:	f000 f8b8 	bl	800a3f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a280:	f000 fbd0 	bl	800aa24 <xTaskResumeAll>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d189      	bne.n	800a19e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a28a:	4b10      	ldr	r3, [pc, #64]	; (800a2cc <xQueueReceive+0x1bc>)
 800a28c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	e780      	b.n	800a19e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a29c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a29e:	f000 f8a7 	bl	800a3f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2a2:	f000 fbbf 	bl	800aa24 <xTaskResumeAll>
 800a2a6:	e77a      	b.n	800a19e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2aa:	f000 f8a1 	bl	800a3f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2ae:	f000 fbb9 	bl	800aa24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b4:	f000 f8ee 	bl	800a494 <prvIsQueueEmpty>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f43f af6f 	beq.w	800a19e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3730      	adds	r7, #48	; 0x30
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	e000ed04 	.word	0xe000ed04

0800a2d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d10d      	bne.n	800a30a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d14d      	bne.n	800a392 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 ffda 	bl	800b2b4 <xTaskPriorityDisinherit>
 800a300:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	609a      	str	r2, [r3, #8]
 800a308:	e043      	b.n	800a392 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d119      	bne.n	800a344 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6858      	ldr	r0, [r3, #4]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a318:	461a      	mov	r2, r3
 800a31a:	68b9      	ldr	r1, [r7, #8]
 800a31c:	f002 fd38 	bl	800cd90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	685a      	ldr	r2, [r3, #4]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	441a      	add	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	685a      	ldr	r2, [r3, #4]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	429a      	cmp	r2, r3
 800a338:	d32b      	bcc.n	800a392 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	605a      	str	r2, [r3, #4]
 800a342:	e026      	b.n	800a392 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	68d8      	ldr	r0, [r3, #12]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34c:	461a      	mov	r2, r3
 800a34e:	68b9      	ldr	r1, [r7, #8]
 800a350:	f002 fd1e 	bl	800cd90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	68da      	ldr	r2, [r3, #12]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35c:	425b      	negs	r3, r3
 800a35e:	441a      	add	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	68da      	ldr	r2, [r3, #12]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d207      	bcs.n	800a380 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	689a      	ldr	r2, [r3, #8]
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	425b      	negs	r3, r3
 800a37a:	441a      	add	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b02      	cmp	r3, #2
 800a384:	d105      	bne.n	800a392 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d002      	beq.n	800a392 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	3b01      	subs	r3, #1
 800a390:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	1c5a      	adds	r2, r3, #1
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a39a:	697b      	ldr	r3, [r7, #20]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d018      	beq.n	800a3e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	68da      	ldr	r2, [r3, #12]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3be:	441a      	add	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d303      	bcc.n	800a3d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	68d9      	ldr	r1, [r3, #12]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	6838      	ldr	r0, [r7, #0]
 800a3e4:	f002 fcd4 	bl	800cd90 <memcpy>
	}
}
 800a3e8:	bf00      	nop
 800a3ea:	3708      	adds	r7, #8
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3f8:	f001 fc9c 	bl	800bd34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a402:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a404:	e011      	b.n	800a42a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d012      	beq.n	800a434 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3324      	adds	r3, #36	; 0x24
 800a412:	4618      	mov	r0, r3
 800a414:	f000 fd6c 	bl	800aef0 <xTaskRemoveFromEventList>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d001      	beq.n	800a422 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a41e:	f000 fe43 	bl	800b0a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
 800a424:	3b01      	subs	r3, #1
 800a426:	b2db      	uxtb	r3, r3
 800a428:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	dce9      	bgt.n	800a406 <prvUnlockQueue+0x16>
 800a432:	e000      	b.n	800a436 <prvUnlockQueue+0x46>
					break;
 800a434:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	22ff      	movs	r2, #255	; 0xff
 800a43a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a43e:	f001 fca9 	bl	800bd94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a442:	f001 fc77 	bl	800bd34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a44c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a44e:	e011      	b.n	800a474 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d012      	beq.n	800a47e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	3310      	adds	r3, #16
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 fd47 	bl	800aef0 <xTaskRemoveFromEventList>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a468:	f000 fe1e 	bl	800b0a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
 800a46e:	3b01      	subs	r3, #1
 800a470:	b2db      	uxtb	r3, r3
 800a472:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a474:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	dce9      	bgt.n	800a450 <prvUnlockQueue+0x60>
 800a47c:	e000      	b.n	800a480 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a47e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	22ff      	movs	r2, #255	; 0xff
 800a484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a488:	f001 fc84 	bl	800bd94 <vPortExitCritical>
}
 800a48c:	bf00      	nop
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a49c:	f001 fc4a 	bl	800bd34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	60fb      	str	r3, [r7, #12]
 800a4ac:	e001      	b.n	800a4b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4b2:	f001 fc6f 	bl	800bd94 <vPortExitCritical>

	return xReturn;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4c8:	f001 fc34 	bl	800bd34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d102      	bne.n	800a4de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	e001      	b.n	800a4e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4e2:	f001 fc57 	bl	800bd94 <vPortExitCritical>

	return xReturn;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3710      	adds	r7, #16
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60fb      	str	r3, [r7, #12]
 800a4fe:	e014      	b.n	800a52a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a500:	4a0f      	ldr	r2, [pc, #60]	; (800a540 <vQueueAddToRegistry+0x50>)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10b      	bne.n	800a524 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a50c:	490c      	ldr	r1, [pc, #48]	; (800a540 <vQueueAddToRegistry+0x50>)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a516:	4a0a      	ldr	r2, [pc, #40]	; (800a540 <vQueueAddToRegistry+0x50>)
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	00db      	lsls	r3, r3, #3
 800a51c:	4413      	add	r3, r2
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a522:	e006      	b.n	800a532 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	3301      	adds	r3, #1
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2b07      	cmp	r3, #7
 800a52e:	d9e7      	bls.n	800a500 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a530:	bf00      	nop
 800a532:	bf00      	nop
 800a534:	3714      	adds	r7, #20
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	20000aec 	.word	0x20000aec

0800a544 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a544:	b580      	push	{r7, lr}
 800a546:	b086      	sub	sp, #24
 800a548:	af00      	add	r7, sp, #0
 800a54a:	60f8      	str	r0, [r7, #12]
 800a54c:	60b9      	str	r1, [r7, #8]
 800a54e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a554:	f001 fbee 	bl	800bd34 <vPortEnterCritical>
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a55e:	b25b      	sxtb	r3, r3
 800a560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a564:	d103      	bne.n	800a56e <vQueueWaitForMessageRestricted+0x2a>
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a574:	b25b      	sxtb	r3, r3
 800a576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57a:	d103      	bne.n	800a584 <vQueueWaitForMessageRestricted+0x40>
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	2200      	movs	r2, #0
 800a580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a584:	f001 fc06 	bl	800bd94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d106      	bne.n	800a59e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	3324      	adds	r3, #36	; 0x24
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	68b9      	ldr	r1, [r7, #8]
 800a598:	4618      	mov	r0, r3
 800a59a:	f000 fc7d 	bl	800ae98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a59e:	6978      	ldr	r0, [r7, #20]
 800a5a0:	f7ff ff26 	bl	800a3f0 <prvUnlockQueue>
	}
 800a5a4:	bf00      	nop
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08e      	sub	sp, #56	; 0x38
 800a5b0:	af04      	add	r7, sp, #16
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10a      	bne.n	800a5d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	f383 8811 	msr	BASEPRI, r3
 800a5c8:	f3bf 8f6f 	isb	sy
 800a5cc:	f3bf 8f4f 	dsb	sy
 800a5d0:	623b      	str	r3, [r7, #32]
}
 800a5d2:	bf00      	nop
 800a5d4:	e7fe      	b.n	800a5d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10a      	bne.n	800a5f2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	61fb      	str	r3, [r7, #28]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5f2:	23c0      	movs	r3, #192	; 0xc0
 800a5f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	2bc0      	cmp	r3, #192	; 0xc0
 800a5fa:	d00a      	beq.n	800a612 <xTaskCreateStatic+0x66>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	61bb      	str	r3, [r7, #24]
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a612:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	2b00      	cmp	r3, #0
 800a618:	d01e      	beq.n	800a658 <xTaskCreateStatic+0xac>
 800a61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d01b      	beq.n	800a658 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a628:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	2202      	movs	r2, #2
 800a62e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a632:	2300      	movs	r3, #0
 800a634:	9303      	str	r3, [sp, #12]
 800a636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a638:	9302      	str	r3, [sp, #8]
 800a63a:	f107 0314 	add.w	r3, r7, #20
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	68b9      	ldr	r1, [r7, #8]
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f000 f850 	bl	800a6f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a650:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a652:	f000 f8f7 	bl	800a844 <prvAddNewTaskToReadyList>
 800a656:	e001      	b.n	800a65c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a658:	2300      	movs	r3, #0
 800a65a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a65c:	697b      	ldr	r3, [r7, #20]
	}
 800a65e:	4618      	mov	r0, r3
 800a660:	3728      	adds	r7, #40	; 0x28
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a666:	b580      	push	{r7, lr}
 800a668:	b08c      	sub	sp, #48	; 0x30
 800a66a:	af04      	add	r7, sp, #16
 800a66c:	60f8      	str	r0, [r7, #12]
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	603b      	str	r3, [r7, #0]
 800a672:	4613      	mov	r3, r2
 800a674:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a676:	88fb      	ldrh	r3, [r7, #6]
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	4618      	mov	r0, r3
 800a67c:	f001 fc7c 	bl	800bf78 <pvPortMalloc>
 800a680:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00e      	beq.n	800a6a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a688:	20c0      	movs	r0, #192	; 0xc0
 800a68a:	f001 fc75 	bl	800bf78 <pvPortMalloc>
 800a68e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	631a      	str	r2, [r3, #48]	; 0x30
 800a69c:	e005      	b.n	800a6aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a69e:	6978      	ldr	r0, [r7, #20]
 800a6a0:	f001 fd3a 	bl	800c118 <vPortFree>
 800a6a4:	e001      	b.n	800a6aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d017      	beq.n	800a6e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6b0:	69fb      	ldr	r3, [r7, #28]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6b8:	88fa      	ldrh	r2, [r7, #6]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	9303      	str	r3, [sp, #12]
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	9302      	str	r3, [sp, #8]
 800a6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	68b9      	ldr	r1, [r7, #8]
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 f80e 	bl	800a6f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6d4:	69f8      	ldr	r0, [r7, #28]
 800a6d6:	f000 f8b5 	bl	800a844 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	61bb      	str	r3, [r7, #24]
 800a6de:	e002      	b.n	800a6e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6e6:	69bb      	ldr	r3, [r7, #24]
	}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3720      	adds	r7, #32
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
 800a6fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	461a      	mov	r2, r3
 800a708:	21a5      	movs	r1, #165	; 0xa5
 800a70a:	f002 fb4f 	bl	800cdac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a718:	3b01      	subs	r3, #1
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	4413      	add	r3, r2
 800a71e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	f023 0307 	bic.w	r3, r3, #7
 800a726:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	f003 0307 	and.w	r3, r3, #7
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d00a      	beq.n	800a748 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	617b      	str	r3, [r7, #20]
}
 800a744:	bf00      	nop
 800a746:	e7fe      	b.n	800a746 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d01f      	beq.n	800a78e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a74e:	2300      	movs	r3, #0
 800a750:	61fb      	str	r3, [r7, #28]
 800a752:	e012      	b.n	800a77a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	4413      	add	r3, r2
 800a75a:	7819      	ldrb	r1, [r3, #0]
 800a75c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	4413      	add	r3, r2
 800a762:	3334      	adds	r3, #52	; 0x34
 800a764:	460a      	mov	r2, r1
 800a766:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	4413      	add	r3, r2
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d006      	beq.n	800a782 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	3301      	adds	r3, #1
 800a778:	61fb      	str	r3, [r7, #28]
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	2b0f      	cmp	r3, #15
 800a77e:	d9e9      	bls.n	800a754 <prvInitialiseNewTask+0x64>
 800a780:	e000      	b.n	800a784 <prvInitialiseNewTask+0x94>
			{
				break;
 800a782:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	2200      	movs	r2, #0
 800a788:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a78c:	e003      	b.n	800a796 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a798:	2b37      	cmp	r3, #55	; 0x37
 800a79a:	d901      	bls.n	800a7a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a79c:	2337      	movs	r3, #55	; 0x37
 800a79e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	3304      	adds	r3, #4
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f7ff f978 	bl	8009aac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7be:	3318      	adds	r3, #24
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f7ff f973 	bl	8009aac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7de:	2200      	movs	r2, #0
 800a7e0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f4:	3358      	adds	r3, #88	; 0x58
 800a7f6:	2260      	movs	r2, #96	; 0x60
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f002 fad6 	bl	800cdac <memset>
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	4a0d      	ldr	r2, [pc, #52]	; (800a838 <prvInitialiseNewTask+0x148>)
 800a804:	65da      	str	r2, [r3, #92]	; 0x5c
 800a806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a808:	4a0c      	ldr	r2, [pc, #48]	; (800a83c <prvInitialiseNewTask+0x14c>)
 800a80a:	661a      	str	r2, [r3, #96]	; 0x60
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	4a0c      	ldr	r2, [pc, #48]	; (800a840 <prvInitialiseNewTask+0x150>)
 800a810:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a812:	683a      	ldr	r2, [r7, #0]
 800a814:	68f9      	ldr	r1, [r7, #12]
 800a816:	69b8      	ldr	r0, [r7, #24]
 800a818:	f001 f95e 	bl	800bad8 <pxPortInitialiseStack>
 800a81c:	4602      	mov	r2, r0
 800a81e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a820:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a82c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a82e:	bf00      	nop
 800a830:	3720      	adds	r7, #32
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	0800d344 	.word	0x0800d344
 800a83c:	0800d364 	.word	0x0800d364
 800a840:	0800d324 	.word	0x0800d324

0800a844 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a84c:	f001 fa72 	bl	800bd34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a850:	4b2d      	ldr	r3, [pc, #180]	; (800a908 <prvAddNewTaskToReadyList+0xc4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	3301      	adds	r3, #1
 800a856:	4a2c      	ldr	r2, [pc, #176]	; (800a908 <prvAddNewTaskToReadyList+0xc4>)
 800a858:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a85a:	4b2c      	ldr	r3, [pc, #176]	; (800a90c <prvAddNewTaskToReadyList+0xc8>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d109      	bne.n	800a876 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a862:	4a2a      	ldr	r2, [pc, #168]	; (800a90c <prvAddNewTaskToReadyList+0xc8>)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a868:	4b27      	ldr	r3, [pc, #156]	; (800a908 <prvAddNewTaskToReadyList+0xc4>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d110      	bne.n	800a892 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a870:	f000 fc40 	bl	800b0f4 <prvInitialiseTaskLists>
 800a874:	e00d      	b.n	800a892 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a876:	4b26      	ldr	r3, [pc, #152]	; (800a910 <prvAddNewTaskToReadyList+0xcc>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d109      	bne.n	800a892 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a87e:	4b23      	ldr	r3, [pc, #140]	; (800a90c <prvAddNewTaskToReadyList+0xc8>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a888:	429a      	cmp	r2, r3
 800a88a:	d802      	bhi.n	800a892 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a88c:	4a1f      	ldr	r2, [pc, #124]	; (800a90c <prvAddNewTaskToReadyList+0xc8>)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a892:	4b20      	ldr	r3, [pc, #128]	; (800a914 <prvAddNewTaskToReadyList+0xd0>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	3301      	adds	r3, #1
 800a898:	4a1e      	ldr	r2, [pc, #120]	; (800a914 <prvAddNewTaskToReadyList+0xd0>)
 800a89a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a89c:	4b1d      	ldr	r3, [pc, #116]	; (800a914 <prvAddNewTaskToReadyList+0xd0>)
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8a8:	4b1b      	ldr	r3, [pc, #108]	; (800a918 <prvAddNewTaskToReadyList+0xd4>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d903      	bls.n	800a8b8 <prvAddNewTaskToReadyList+0x74>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b4:	4a18      	ldr	r2, [pc, #96]	; (800a918 <prvAddNewTaskToReadyList+0xd4>)
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4a15      	ldr	r2, [pc, #84]	; (800a91c <prvAddNewTaskToReadyList+0xd8>)
 800a8c6:	441a      	add	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	4619      	mov	r1, r3
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	f7ff f8f9 	bl	8009ac6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8d4:	f001 fa5e 	bl	800bd94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8d8:	4b0d      	ldr	r3, [pc, #52]	; (800a910 <prvAddNewTaskToReadyList+0xcc>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00e      	beq.n	800a8fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <prvAddNewTaskToReadyList+0xc8>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d207      	bcs.n	800a8fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8ee:	4b0c      	ldr	r3, [pc, #48]	; (800a920 <prvAddNewTaskToReadyList+0xdc>)
 800a8f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8fe:	bf00      	nop
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20001000 	.word	0x20001000
 800a90c:	20000b2c 	.word	0x20000b2c
 800a910:	2000100c 	.word	0x2000100c
 800a914:	2000101c 	.word	0x2000101c
 800a918:	20001008 	.word	0x20001008
 800a91c:	20000b30 	.word	0x20000b30
 800a920:	e000ed04 	.word	0xe000ed04

0800a924 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b08a      	sub	sp, #40	; 0x28
 800a928:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a932:	463a      	mov	r2, r7
 800a934:	1d39      	adds	r1, r7, #4
 800a936:	f107 0308 	add.w	r3, r7, #8
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff f862 	bl	8009a04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a940:	6839      	ldr	r1, [r7, #0]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	68ba      	ldr	r2, [r7, #8]
 800a946:	9202      	str	r2, [sp, #8]
 800a948:	9301      	str	r3, [sp, #4]
 800a94a:	2300      	movs	r3, #0
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	2300      	movs	r3, #0
 800a950:	460a      	mov	r2, r1
 800a952:	4925      	ldr	r1, [pc, #148]	; (800a9e8 <vTaskStartScheduler+0xc4>)
 800a954:	4825      	ldr	r0, [pc, #148]	; (800a9ec <vTaskStartScheduler+0xc8>)
 800a956:	f7ff fe29 	bl	800a5ac <xTaskCreateStatic>
 800a95a:	4603      	mov	r3, r0
 800a95c:	4a24      	ldr	r2, [pc, #144]	; (800a9f0 <vTaskStartScheduler+0xcc>)
 800a95e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a960:	4b23      	ldr	r3, [pc, #140]	; (800a9f0 <vTaskStartScheduler+0xcc>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a968:	2301      	movs	r3, #1
 800a96a:	617b      	str	r3, [r7, #20]
 800a96c:	e001      	b.n	800a972 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a96e:	2300      	movs	r3, #0
 800a970:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d102      	bne.n	800a97e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a978:	f000 fd5e 	bl	800b438 <xTimerCreateTimerTask>
 800a97c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b01      	cmp	r3, #1
 800a982:	d11d      	bne.n	800a9c0 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	613b      	str	r3, [r7, #16]
}
 800a996:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a998:	4b16      	ldr	r3, [pc, #88]	; (800a9f4 <vTaskStartScheduler+0xd0>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	3358      	adds	r3, #88	; 0x58
 800a99e:	4a16      	ldr	r2, [pc, #88]	; (800a9f8 <vTaskStartScheduler+0xd4>)
 800a9a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a9a2:	4b16      	ldr	r3, [pc, #88]	; (800a9fc <vTaskStartScheduler+0xd8>)
 800a9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a9aa:	4b15      	ldr	r3, [pc, #84]	; (800aa00 <vTaskStartScheduler+0xdc>)
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a9b0:	4b14      	ldr	r3, [pc, #80]	; (800aa04 <vTaskStartScheduler+0xe0>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800a9b6:	f7f5 fc7d 	bl	80002b4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a9ba:	f001 f919 	bl	800bbf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a9be:	e00e      	b.n	800a9de <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c6:	d10a      	bne.n	800a9de <vTaskStartScheduler+0xba>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	60fb      	str	r3, [r7, #12]
}
 800a9da:	bf00      	nop
 800a9dc:	e7fe      	b.n	800a9dc <vTaskStartScheduler+0xb8>
}
 800a9de:	bf00      	nop
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	0800d250 	.word	0x0800d250
 800a9ec:	0800b0c1 	.word	0x0800b0c1
 800a9f0:	20001024 	.word	0x20001024
 800a9f4:	20000b2c 	.word	0x20000b2c
 800a9f8:	20000188 	.word	0x20000188
 800a9fc:	20001020 	.word	0x20001020
 800aa00:	2000100c 	.word	0x2000100c
 800aa04:	20001004 	.word	0x20001004

0800aa08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aa0c:	4b04      	ldr	r3, [pc, #16]	; (800aa20 <vTaskSuspendAll+0x18>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	3301      	adds	r3, #1
 800aa12:	4a03      	ldr	r2, [pc, #12]	; (800aa20 <vTaskSuspendAll+0x18>)
 800aa14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aa16:	bf00      	nop
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr
 800aa20:	20001028 	.word	0x20001028

0800aa24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aa32:	4b42      	ldr	r3, [pc, #264]	; (800ab3c <xTaskResumeAll+0x118>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d10a      	bne.n	800aa50 <xTaskResumeAll+0x2c>
	__asm volatile
 800aa3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa3e:	f383 8811 	msr	BASEPRI, r3
 800aa42:	f3bf 8f6f 	isb	sy
 800aa46:	f3bf 8f4f 	dsb	sy
 800aa4a:	603b      	str	r3, [r7, #0]
}
 800aa4c:	bf00      	nop
 800aa4e:	e7fe      	b.n	800aa4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa50:	f001 f970 	bl	800bd34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa54:	4b39      	ldr	r3, [pc, #228]	; (800ab3c <xTaskResumeAll+0x118>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	4a38      	ldr	r2, [pc, #224]	; (800ab3c <xTaskResumeAll+0x118>)
 800aa5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa5e:	4b37      	ldr	r3, [pc, #220]	; (800ab3c <xTaskResumeAll+0x118>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d162      	bne.n	800ab2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa66:	4b36      	ldr	r3, [pc, #216]	; (800ab40 <xTaskResumeAll+0x11c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d05e      	beq.n	800ab2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa6e:	e02f      	b.n	800aad0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa70:	4b34      	ldr	r3, [pc, #208]	; (800ab44 <xTaskResumeAll+0x120>)
 800aa72:	68db      	ldr	r3, [r3, #12]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	3318      	adds	r3, #24
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f7ff f87f 	bl	8009b80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	3304      	adds	r3, #4
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7ff f87a 	bl	8009b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa90:	4b2d      	ldr	r3, [pc, #180]	; (800ab48 <xTaskResumeAll+0x124>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d903      	bls.n	800aaa0 <xTaskResumeAll+0x7c>
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9c:	4a2a      	ldr	r2, [pc, #168]	; (800ab48 <xTaskResumeAll+0x124>)
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa4:	4613      	mov	r3, r2
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4a27      	ldr	r2, [pc, #156]	; (800ab4c <xTaskResumeAll+0x128>)
 800aaae:	441a      	add	r2, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	3304      	adds	r3, #4
 800aab4:	4619      	mov	r1, r3
 800aab6:	4610      	mov	r0, r2
 800aab8:	f7ff f805 	bl	8009ac6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac0:	4b23      	ldr	r3, [pc, #140]	; (800ab50 <xTaskResumeAll+0x12c>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d302      	bcc.n	800aad0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800aaca:	4b22      	ldr	r3, [pc, #136]	; (800ab54 <xTaskResumeAll+0x130>)
 800aacc:	2201      	movs	r2, #1
 800aace:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aad0:	4b1c      	ldr	r3, [pc, #112]	; (800ab44 <xTaskResumeAll+0x120>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d1cb      	bne.n	800aa70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d001      	beq.n	800aae2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aade:	f000 fbab 	bl	800b238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aae2:	4b1d      	ldr	r3, [pc, #116]	; (800ab58 <xTaskResumeAll+0x134>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d010      	beq.n	800ab10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aaee:	f000 f847 	bl	800ab80 <xTaskIncrementTick>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aaf8:	4b16      	ldr	r3, [pc, #88]	; (800ab54 <xTaskResumeAll+0x130>)
 800aafa:	2201      	movs	r2, #1
 800aafc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	3b01      	subs	r3, #1
 800ab02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1f1      	bne.n	800aaee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ab0a:	4b13      	ldr	r3, [pc, #76]	; (800ab58 <xTaskResumeAll+0x134>)
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ab10:	4b10      	ldr	r3, [pc, #64]	; (800ab54 <xTaskResumeAll+0x130>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d009      	beq.n	800ab2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ab1c:	4b0f      	ldr	r3, [pc, #60]	; (800ab5c <xTaskResumeAll+0x138>)
 800ab1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	f3bf 8f4f 	dsb	sy
 800ab28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab2c:	f001 f932 	bl	800bd94 <vPortExitCritical>

	return xAlreadyYielded;
 800ab30:	68bb      	ldr	r3, [r7, #8]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	20001028 	.word	0x20001028
 800ab40:	20001000 	.word	0x20001000
 800ab44:	20000fc0 	.word	0x20000fc0
 800ab48:	20001008 	.word	0x20001008
 800ab4c:	20000b30 	.word	0x20000b30
 800ab50:	20000b2c 	.word	0x20000b2c
 800ab54:	20001014 	.word	0x20001014
 800ab58:	20001010 	.word	0x20001010
 800ab5c:	e000ed04 	.word	0xe000ed04

0800ab60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ab66:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <xTaskGetTickCount+0x1c>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ab6c:	687b      	ldr	r3, [r7, #4]
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	20001004 	.word	0x20001004

0800ab80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab86:	2300      	movs	r3, #0
 800ab88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab8a:	4b53      	ldr	r3, [pc, #332]	; (800acd8 <xTaskIncrementTick+0x158>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f040 8095 	bne.w	800acbe <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ab94:	4b51      	ldr	r3, [pc, #324]	; (800acdc <xTaskIncrementTick+0x15c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab9c:	4a4f      	ldr	r2, [pc, #316]	; (800acdc <xTaskIncrementTick+0x15c>)
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d120      	bne.n	800abea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aba8:	4b4d      	ldr	r3, [pc, #308]	; (800ace0 <xTaskIncrementTick+0x160>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00a      	beq.n	800abc8 <xTaskIncrementTick+0x48>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb6:	f383 8811 	msr	BASEPRI, r3
 800abba:	f3bf 8f6f 	isb	sy
 800abbe:	f3bf 8f4f 	dsb	sy
 800abc2:	603b      	str	r3, [r7, #0]
}
 800abc4:	bf00      	nop
 800abc6:	e7fe      	b.n	800abc6 <xTaskIncrementTick+0x46>
 800abc8:	4b45      	ldr	r3, [pc, #276]	; (800ace0 <xTaskIncrementTick+0x160>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	60fb      	str	r3, [r7, #12]
 800abce:	4b45      	ldr	r3, [pc, #276]	; (800ace4 <xTaskIncrementTick+0x164>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a43      	ldr	r2, [pc, #268]	; (800ace0 <xTaskIncrementTick+0x160>)
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	4a43      	ldr	r2, [pc, #268]	; (800ace4 <xTaskIncrementTick+0x164>)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6013      	str	r3, [r2, #0]
 800abdc:	4b42      	ldr	r3, [pc, #264]	; (800ace8 <xTaskIncrementTick+0x168>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3301      	adds	r3, #1
 800abe2:	4a41      	ldr	r2, [pc, #260]	; (800ace8 <xTaskIncrementTick+0x168>)
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	f000 fb27 	bl	800b238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800abea:	4b40      	ldr	r3, [pc, #256]	; (800acec <xTaskIncrementTick+0x16c>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	693a      	ldr	r2, [r7, #16]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d349      	bcc.n	800ac88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abf4:	4b3a      	ldr	r3, [pc, #232]	; (800ace0 <xTaskIncrementTick+0x160>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d104      	bne.n	800ac08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abfe:	4b3b      	ldr	r3, [pc, #236]	; (800acec <xTaskIncrementTick+0x16c>)
 800ac00:	f04f 32ff 	mov.w	r2, #4294967295
 800ac04:	601a      	str	r2, [r3, #0]
					break;
 800ac06:	e03f      	b.n	800ac88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac08:	4b35      	ldr	r3, [pc, #212]	; (800ace0 <xTaskIncrementTick+0x160>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	68db      	ldr	r3, [r3, #12]
 800ac10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d203      	bcs.n	800ac28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac20:	4a32      	ldr	r2, [pc, #200]	; (800acec <xTaskIncrementTick+0x16c>)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac26:	e02f      	b.n	800ac88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7fe ffa7 	bl	8009b80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d004      	beq.n	800ac44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	3318      	adds	r3, #24
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7fe ff9e 	bl	8009b80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac48:	4b29      	ldr	r3, [pc, #164]	; (800acf0 <xTaskIncrementTick+0x170>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d903      	bls.n	800ac58 <xTaskIncrementTick+0xd8>
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac54:	4a26      	ldr	r2, [pc, #152]	; (800acf0 <xTaskIncrementTick+0x170>)
 800ac56:	6013      	str	r3, [r2, #0]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4a23      	ldr	r2, [pc, #140]	; (800acf4 <xTaskIncrementTick+0x174>)
 800ac66:	441a      	add	r2, r3
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	3304      	adds	r3, #4
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4610      	mov	r0, r2
 800ac70:	f7fe ff29 	bl	8009ac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac78:	4b1f      	ldr	r3, [pc, #124]	; (800acf8 <xTaskIncrementTick+0x178>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d3b8      	bcc.n	800abf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ac82:	2301      	movs	r3, #1
 800ac84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac86:	e7b5      	b.n	800abf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac88:	4b1b      	ldr	r3, [pc, #108]	; (800acf8 <xTaskIncrementTick+0x178>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac8e:	4919      	ldr	r1, [pc, #100]	; (800acf4 <xTaskIncrementTick+0x174>)
 800ac90:	4613      	mov	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	440b      	add	r3, r1
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d901      	bls.n	800aca4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aca0:	2301      	movs	r3, #1
 800aca2:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800aca4:	4b15      	ldr	r3, [pc, #84]	; (800acfc <xTaskIncrementTick+0x17c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800acac:	f7f5 fb18 	bl	80002e0 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800acb0:	4b13      	ldr	r3, [pc, #76]	; (800ad00 <xTaskIncrementTick+0x180>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d009      	beq.n	800accc <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 800acb8:	2301      	movs	r3, #1
 800acba:	617b      	str	r3, [r7, #20]
 800acbc:	e006      	b.n	800accc <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800acbe:	4b0f      	ldr	r3, [pc, #60]	; (800acfc <xTaskIncrementTick+0x17c>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	3301      	adds	r3, #1
 800acc4:	4a0d      	ldr	r2, [pc, #52]	; (800acfc <xTaskIncrementTick+0x17c>)
 800acc6:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 800acc8:	f7f5 fb0a 	bl	80002e0 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800accc:	697b      	ldr	r3, [r7, #20]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3718      	adds	r7, #24
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20001028 	.word	0x20001028
 800acdc:	20001004 	.word	0x20001004
 800ace0:	20000fb8 	.word	0x20000fb8
 800ace4:	20000fbc 	.word	0x20000fbc
 800ace8:	20001018 	.word	0x20001018
 800acec:	20001020 	.word	0x20001020
 800acf0:	20001008 	.word	0x20001008
 800acf4:	20000b30 	.word	0x20000b30
 800acf8:	20000b2c 	.word	0x20000b2c
 800acfc:	20001010 	.word	0x20001010
 800ad00:	20001014 	.word	0x20001014

0800ad04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad0a:	4b49      	ldr	r3, [pc, #292]	; (800ae30 <vTaskSwitchContext+0x12c>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad12:	4b48      	ldr	r3, [pc, #288]	; (800ae34 <vTaskSwitchContext+0x130>)
 800ad14:	2201      	movs	r2, #1
 800ad16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad18:	e086      	b.n	800ae28 <vTaskSwitchContext+0x124>
		xYieldPending = pdFALSE;
 800ad1a:	4b46      	ldr	r3, [pc, #280]	; (800ae34 <vTaskSwitchContext+0x130>)
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800ad20:	f7f5 facf 	bl	80002c2 <getRunTimeCounterValue>
 800ad24:	4603      	mov	r3, r0
 800ad26:	4a44      	ldr	r2, [pc, #272]	; (800ae38 <vTaskSwitchContext+0x134>)
 800ad28:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800ad2a:	4b43      	ldr	r3, [pc, #268]	; (800ae38 <vTaskSwitchContext+0x134>)
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	4b43      	ldr	r3, [pc, #268]	; (800ae3c <vTaskSwitchContext+0x138>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d909      	bls.n	800ad4a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800ad36:	4b42      	ldr	r3, [pc, #264]	; (800ae40 <vTaskSwitchContext+0x13c>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ad3c:	4a3e      	ldr	r2, [pc, #248]	; (800ae38 <vTaskSwitchContext+0x134>)
 800ad3e:	6810      	ldr	r0, [r2, #0]
 800ad40:	4a3e      	ldr	r2, [pc, #248]	; (800ae3c <vTaskSwitchContext+0x138>)
 800ad42:	6812      	ldr	r2, [r2, #0]
 800ad44:	1a82      	subs	r2, r0, r2
 800ad46:	440a      	add	r2, r1
 800ad48:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800ad4a:	4b3b      	ldr	r3, [pc, #236]	; (800ae38 <vTaskSwitchContext+0x134>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a3b      	ldr	r2, [pc, #236]	; (800ae3c <vTaskSwitchContext+0x138>)
 800ad50:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ad52:	4b3b      	ldr	r3, [pc, #236]	; (800ae40 <vTaskSwitchContext+0x13c>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad58:	613b      	str	r3, [r7, #16]
 800ad5a:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ad5e:	60fb      	str	r3, [r7, #12]
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	68fa      	ldr	r2, [r7, #12]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d111      	bne.n	800ad8e <vTaskSwitchContext+0x8a>
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	3304      	adds	r3, #4
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d10b      	bne.n	800ad8e <vTaskSwitchContext+0x8a>
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	3308      	adds	r3, #8
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d105      	bne.n	800ad8e <vTaskSwitchContext+0x8a>
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	330c      	adds	r3, #12
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d008      	beq.n	800ada0 <vTaskSwitchContext+0x9c>
 800ad8e:	4b2c      	ldr	r3, [pc, #176]	; (800ae40 <vTaskSwitchContext+0x13c>)
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	4b2b      	ldr	r3, [pc, #172]	; (800ae40 <vTaskSwitchContext+0x13c>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3334      	adds	r3, #52	; 0x34
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7f5 faa7 	bl	80002ee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ada0:	4b28      	ldr	r3, [pc, #160]	; (800ae44 <vTaskSwitchContext+0x140>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	617b      	str	r3, [r7, #20]
 800ada6:	e010      	b.n	800adca <vTaskSwitchContext+0xc6>
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10a      	bne.n	800adc4 <vTaskSwitchContext+0xc0>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	607b      	str	r3, [r7, #4]
}
 800adc0:	bf00      	nop
 800adc2:	e7fe      	b.n	800adc2 <vTaskSwitchContext+0xbe>
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	3b01      	subs	r3, #1
 800adc8:	617b      	str	r3, [r7, #20]
 800adca:	491f      	ldr	r1, [pc, #124]	; (800ae48 <vTaskSwitchContext+0x144>)
 800adcc:	697a      	ldr	r2, [r7, #20]
 800adce:	4613      	mov	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	440b      	add	r3, r1
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0e4      	beq.n	800ada8 <vTaskSwitchContext+0xa4>
 800adde:	697a      	ldr	r2, [r7, #20]
 800ade0:	4613      	mov	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4a17      	ldr	r2, [pc, #92]	; (800ae48 <vTaskSwitchContext+0x144>)
 800adea:	4413      	add	r3, r2
 800adec:	60bb      	str	r3, [r7, #8]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	685a      	ldr	r2, [r3, #4]
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	605a      	str	r2, [r3, #4]
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	3308      	adds	r3, #8
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d104      	bne.n	800ae0e <vTaskSwitchContext+0x10a>
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	685a      	ldr	r2, [r3, #4]
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	605a      	str	r2, [r3, #4]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	4a0a      	ldr	r2, [pc, #40]	; (800ae40 <vTaskSwitchContext+0x13c>)
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	4a0a      	ldr	r2, [pc, #40]	; (800ae44 <vTaskSwitchContext+0x140>)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae1e:	4b08      	ldr	r3, [pc, #32]	; (800ae40 <vTaskSwitchContext+0x13c>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3358      	adds	r3, #88	; 0x58
 800ae24:	4a09      	ldr	r2, [pc, #36]	; (800ae4c <vTaskSwitchContext+0x148>)
 800ae26:	6013      	str	r3, [r2, #0]
}
 800ae28:	bf00      	nop
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	20001028 	.word	0x20001028
 800ae34:	20001014 	.word	0x20001014
 800ae38:	20001030 	.word	0x20001030
 800ae3c:	2000102c 	.word	0x2000102c
 800ae40:	20000b2c 	.word	0x20000b2c
 800ae44:	20001008 	.word	0x20001008
 800ae48:	20000b30 	.word	0x20000b30
 800ae4c:	20000188 	.word	0x20000188

0800ae50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10a      	bne.n	800ae76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	60fb      	str	r3, [r7, #12]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae76:	4b07      	ldr	r3, [pc, #28]	; (800ae94 <vTaskPlaceOnEventList+0x44>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	3318      	adds	r3, #24
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7fe fe45 	bl	8009b0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae84:	2101      	movs	r1, #1
 800ae86:	6838      	ldr	r0, [r7, #0]
 800ae88:	f000 fa82 	bl	800b390 <prvAddCurrentTaskToDelayedList>
}
 800ae8c:	bf00      	nop
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	20000b2c 	.word	0x20000b2c

0800ae98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	60b9      	str	r1, [r7, #8]
 800aea2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10a      	bne.n	800aec0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	617b      	str	r3, [r7, #20]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aec0:	4b0a      	ldr	r3, [pc, #40]	; (800aeec <vTaskPlaceOnEventListRestricted+0x54>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	3318      	adds	r3, #24
 800aec6:	4619      	mov	r1, r3
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f7fe fdfc 	bl	8009ac6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d002      	beq.n	800aeda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aed4:	f04f 33ff 	mov.w	r3, #4294967295
 800aed8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	68b8      	ldr	r0, [r7, #8]
 800aede:	f000 fa57 	bl	800b390 <prvAddCurrentTaskToDelayedList>
	}
 800aee2:	bf00      	nop
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	20000b2c 	.word	0x20000b2c

0800aef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	68db      	ldr	r3, [r3, #12]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10a      	bne.n	800af1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	60fb      	str	r3, [r7, #12]
}
 800af18:	bf00      	nop
 800af1a:	e7fe      	b.n	800af1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	3318      	adds	r3, #24
 800af20:	4618      	mov	r0, r3
 800af22:	f7fe fe2d 	bl	8009b80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af26:	4b1e      	ldr	r3, [pc, #120]	; (800afa0 <xTaskRemoveFromEventList+0xb0>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d11d      	bne.n	800af6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	3304      	adds	r3, #4
 800af32:	4618      	mov	r0, r3
 800af34:	f7fe fe24 	bl	8009b80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af3c:	4b19      	ldr	r3, [pc, #100]	; (800afa4 <xTaskRemoveFromEventList+0xb4>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	429a      	cmp	r2, r3
 800af42:	d903      	bls.n	800af4c <xTaskRemoveFromEventList+0x5c>
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	4a16      	ldr	r2, [pc, #88]	; (800afa4 <xTaskRemoveFromEventList+0xb4>)
 800af4a:	6013      	str	r3, [r2, #0]
 800af4c:	693b      	ldr	r3, [r7, #16]
 800af4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af50:	4613      	mov	r3, r2
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	4a13      	ldr	r2, [pc, #76]	; (800afa8 <xTaskRemoveFromEventList+0xb8>)
 800af5a:	441a      	add	r2, r3
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	3304      	adds	r3, #4
 800af60:	4619      	mov	r1, r3
 800af62:	4610      	mov	r0, r2
 800af64:	f7fe fdaf 	bl	8009ac6 <vListInsertEnd>
 800af68:	e005      	b.n	800af76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	3318      	adds	r3, #24
 800af6e:	4619      	mov	r1, r3
 800af70:	480e      	ldr	r0, [pc, #56]	; (800afac <xTaskRemoveFromEventList+0xbc>)
 800af72:	f7fe fda8 	bl	8009ac6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af7a:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <xTaskRemoveFromEventList+0xc0>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	429a      	cmp	r2, r3
 800af82:	d905      	bls.n	800af90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af84:	2301      	movs	r3, #1
 800af86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af88:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <xTaskRemoveFromEventList+0xc4>)
 800af8a:	2201      	movs	r2, #1
 800af8c:	601a      	str	r2, [r3, #0]
 800af8e:	e001      	b.n	800af94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800af90:	2300      	movs	r3, #0
 800af92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800af94:	697b      	ldr	r3, [r7, #20]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3718      	adds	r7, #24
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	20001028 	.word	0x20001028
 800afa4:	20001008 	.word	0x20001008
 800afa8:	20000b30 	.word	0x20000b30
 800afac:	20000fc0 	.word	0x20000fc0
 800afb0:	20000b2c 	.word	0x20000b2c
 800afb4:	20001014 	.word	0x20001014

0800afb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800afb8:	b480      	push	{r7}
 800afba:	b083      	sub	sp, #12
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800afc0:	4b06      	ldr	r3, [pc, #24]	; (800afdc <vTaskInternalSetTimeOutState+0x24>)
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <vTaskInternalSetTimeOutState+0x28>)
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	605a      	str	r2, [r3, #4]
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	20001018 	.word	0x20001018
 800afe0:	20001004 	.word	0x20001004

0800afe4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10a      	bne.n	800b00a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	f383 8811 	msr	BASEPRI, r3
 800affc:	f3bf 8f6f 	isb	sy
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	613b      	str	r3, [r7, #16]
}
 800b006:	bf00      	nop
 800b008:	e7fe      	b.n	800b008 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d10a      	bne.n	800b026 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b014:	f383 8811 	msr	BASEPRI, r3
 800b018:	f3bf 8f6f 	isb	sy
 800b01c:	f3bf 8f4f 	dsb	sy
 800b020:	60fb      	str	r3, [r7, #12]
}
 800b022:	bf00      	nop
 800b024:	e7fe      	b.n	800b024 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b026:	f000 fe85 	bl	800bd34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b02a:	4b1d      	ldr	r3, [pc, #116]	; (800b0a0 <xTaskCheckForTimeOut+0xbc>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	69ba      	ldr	r2, [r7, #24]
 800b036:	1ad3      	subs	r3, r2, r3
 800b038:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b042:	d102      	bne.n	800b04a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b044:	2300      	movs	r3, #0
 800b046:	61fb      	str	r3, [r7, #28]
 800b048:	e023      	b.n	800b092 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	4b15      	ldr	r3, [pc, #84]	; (800b0a4 <xTaskCheckForTimeOut+0xc0>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	429a      	cmp	r2, r3
 800b054:	d007      	beq.n	800b066 <xTaskCheckForTimeOut+0x82>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d302      	bcc.n	800b066 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b060:	2301      	movs	r3, #1
 800b062:	61fb      	str	r3, [r7, #28]
 800b064:	e015      	b.n	800b092 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d20b      	bcs.n	800b088 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	1ad2      	subs	r2, r2, r3
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff ff9b 	bl	800afb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b082:	2300      	movs	r3, #0
 800b084:	61fb      	str	r3, [r7, #28]
 800b086:	e004      	b.n	800b092 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	2200      	movs	r2, #0
 800b08c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b08e:	2301      	movs	r3, #1
 800b090:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b092:	f000 fe7f 	bl	800bd94 <vPortExitCritical>

	return xReturn;
 800b096:	69fb      	ldr	r3, [r7, #28]
}
 800b098:	4618      	mov	r0, r3
 800b09a:	3720      	adds	r7, #32
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	20001004 	.word	0x20001004
 800b0a4:	20001018 	.word	0x20001018

0800b0a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0ac:	4b03      	ldr	r3, [pc, #12]	; (800b0bc <vTaskMissedYield+0x14>)
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	601a      	str	r2, [r3, #0]
}
 800b0b2:	bf00      	nop
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	20001014 	.word	0x20001014

0800b0c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b0c8:	f000 f854 	bl	800b174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b0cc:	4b07      	ldr	r3, [pc, #28]	; (800b0ec <prvIdleTask+0x2c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d907      	bls.n	800b0e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800b0d4:	4b06      	ldr	r3, [pc, #24]	; (800b0f0 <prvIdleTask+0x30>)
 800b0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b0e4:	f7f5 f8f5 	bl	80002d2 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b0e8:	e7ee      	b.n	800b0c8 <prvIdleTask+0x8>
 800b0ea:	bf00      	nop
 800b0ec:	20000b30 	.word	0x20000b30
 800b0f0:	e000ed04 	.word	0xe000ed04

0800b0f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	607b      	str	r3, [r7, #4]
 800b0fe:	e00c      	b.n	800b11a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4613      	mov	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4a12      	ldr	r2, [pc, #72]	; (800b154 <prvInitialiseTaskLists+0x60>)
 800b10c:	4413      	add	r3, r2
 800b10e:	4618      	mov	r0, r3
 800b110:	f7fe fcac 	bl	8009a6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3301      	adds	r3, #1
 800b118:	607b      	str	r3, [r7, #4]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2b37      	cmp	r3, #55	; 0x37
 800b11e:	d9ef      	bls.n	800b100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b120:	480d      	ldr	r0, [pc, #52]	; (800b158 <prvInitialiseTaskLists+0x64>)
 800b122:	f7fe fca3 	bl	8009a6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b126:	480d      	ldr	r0, [pc, #52]	; (800b15c <prvInitialiseTaskLists+0x68>)
 800b128:	f7fe fca0 	bl	8009a6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b12c:	480c      	ldr	r0, [pc, #48]	; (800b160 <prvInitialiseTaskLists+0x6c>)
 800b12e:	f7fe fc9d 	bl	8009a6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b132:	480c      	ldr	r0, [pc, #48]	; (800b164 <prvInitialiseTaskLists+0x70>)
 800b134:	f7fe fc9a 	bl	8009a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b138:	480b      	ldr	r0, [pc, #44]	; (800b168 <prvInitialiseTaskLists+0x74>)
 800b13a:	f7fe fc97 	bl	8009a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b13e:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <prvInitialiseTaskLists+0x78>)
 800b140:	4a05      	ldr	r2, [pc, #20]	; (800b158 <prvInitialiseTaskLists+0x64>)
 800b142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b144:	4b0a      	ldr	r3, [pc, #40]	; (800b170 <prvInitialiseTaskLists+0x7c>)
 800b146:	4a05      	ldr	r2, [pc, #20]	; (800b15c <prvInitialiseTaskLists+0x68>)
 800b148:	601a      	str	r2, [r3, #0]
}
 800b14a:	bf00      	nop
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	20000b30 	.word	0x20000b30
 800b158:	20000f90 	.word	0x20000f90
 800b15c:	20000fa4 	.word	0x20000fa4
 800b160:	20000fc0 	.word	0x20000fc0
 800b164:	20000fd4 	.word	0x20000fd4
 800b168:	20000fec 	.word	0x20000fec
 800b16c:	20000fb8 	.word	0x20000fb8
 800b170:	20000fbc 	.word	0x20000fbc

0800b174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b17a:	e019      	b.n	800b1b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b17c:	f000 fdda 	bl	800bd34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b180:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <prvCheckTasksWaitingTermination+0x50>)
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3304      	adds	r3, #4
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fe fcf7 	bl	8009b80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b192:	4b0d      	ldr	r3, [pc, #52]	; (800b1c8 <prvCheckTasksWaitingTermination+0x54>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	3b01      	subs	r3, #1
 800b198:	4a0b      	ldr	r2, [pc, #44]	; (800b1c8 <prvCheckTasksWaitingTermination+0x54>)
 800b19a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b19c:	4b0b      	ldr	r3, [pc, #44]	; (800b1cc <prvCheckTasksWaitingTermination+0x58>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <prvCheckTasksWaitingTermination+0x58>)
 800b1a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1a6:	f000 fdf5 	bl	800bd94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f810 	bl	800b1d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1b0:	4b06      	ldr	r3, [pc, #24]	; (800b1cc <prvCheckTasksWaitingTermination+0x58>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1e1      	bne.n	800b17c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b1b8:	bf00      	nop
 800b1ba:	bf00      	nop
 800b1bc:	3708      	adds	r7, #8
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}
 800b1c2:	bf00      	nop
 800b1c4:	20000fd4 	.word	0x20000fd4
 800b1c8:	20001000 	.word	0x20001000
 800b1cc:	20000fe8 	.word	0x20000fe8

0800b1d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	3358      	adds	r3, #88	; 0x58
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f001 fe47 	bl	800ce70 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d108      	bne.n	800b1fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 ff91 	bl	800c118 <vPortFree>
				vPortFree( pxTCB );
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 ff8e 	bl	800c118 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b1fc:	e018      	b.n	800b230 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b204:	2b01      	cmp	r3, #1
 800b206:	d103      	bne.n	800b210 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f000 ff85 	bl	800c118 <vPortFree>
	}
 800b20e:	e00f      	b.n	800b230 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800b216:	2b02      	cmp	r3, #2
 800b218:	d00a      	beq.n	800b230 <prvDeleteTCB+0x60>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	60fb      	str	r3, [r7, #12]
}
 800b22c:	bf00      	nop
 800b22e:	e7fe      	b.n	800b22e <prvDeleteTCB+0x5e>
	}
 800b230:	bf00      	nop
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b23e:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <prvResetNextTaskUnblockTime+0x38>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d104      	bne.n	800b252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b248:	4b0a      	ldr	r3, [pc, #40]	; (800b274 <prvResetNextTaskUnblockTime+0x3c>)
 800b24a:	f04f 32ff 	mov.w	r2, #4294967295
 800b24e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b250:	e008      	b.n	800b264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b252:	4b07      	ldr	r3, [pc, #28]	; (800b270 <prvResetNextTaskUnblockTime+0x38>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	68db      	ldr	r3, [r3, #12]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	4a04      	ldr	r2, [pc, #16]	; (800b274 <prvResetNextTaskUnblockTime+0x3c>)
 800b262:	6013      	str	r3, [r2, #0]
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	20000fb8 	.word	0x20000fb8
 800b274:	20001020 	.word	0x20001020

0800b278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b27e:	4b0b      	ldr	r3, [pc, #44]	; (800b2ac <xTaskGetSchedulerState+0x34>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d102      	bne.n	800b28c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b286:	2301      	movs	r3, #1
 800b288:	607b      	str	r3, [r7, #4]
 800b28a:	e008      	b.n	800b29e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b28c:	4b08      	ldr	r3, [pc, #32]	; (800b2b0 <xTaskGetSchedulerState+0x38>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d102      	bne.n	800b29a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b294:	2302      	movs	r3, #2
 800b296:	607b      	str	r3, [r7, #4]
 800b298:	e001      	b.n	800b29e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b29a:	2300      	movs	r3, #0
 800b29c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b29e:	687b      	ldr	r3, [r7, #4]
	}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	2000100c 	.word	0x2000100c
 800b2b0:	20001028 	.word	0x20001028

0800b2b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d056      	beq.n	800b378 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b2ca:	4b2e      	ldr	r3, [pc, #184]	; (800b384 <xTaskPriorityDisinherit+0xd0>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	693a      	ldr	r2, [r7, #16]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d00a      	beq.n	800b2ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d8:	f383 8811 	msr	BASEPRI, r3
 800b2dc:	f3bf 8f6f 	isb	sy
 800b2e0:	f3bf 8f4f 	dsb	sy
 800b2e4:	60fb      	str	r3, [r7, #12]
}
 800b2e6:	bf00      	nop
 800b2e8:	e7fe      	b.n	800b2e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d10a      	bne.n	800b308 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b2f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f6:	f383 8811 	msr	BASEPRI, r3
 800b2fa:	f3bf 8f6f 	isb	sy
 800b2fe:	f3bf 8f4f 	dsb	sy
 800b302:	60bb      	str	r3, [r7, #8]
}
 800b304:	bf00      	nop
 800b306:	e7fe      	b.n	800b306 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b30c:	1e5a      	subs	r2, r3, #1
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b31a:	429a      	cmp	r2, r3
 800b31c:	d02c      	beq.n	800b378 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b322:	2b00      	cmp	r3, #0
 800b324:	d128      	bne.n	800b378 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	3304      	adds	r3, #4
 800b32a:	4618      	mov	r0, r3
 800b32c:	f7fe fc28 	bl	8009b80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b348:	4b0f      	ldr	r3, [pc, #60]	; (800b388 <xTaskPriorityDisinherit+0xd4>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d903      	bls.n	800b358 <xTaskPriorityDisinherit+0xa4>
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b354:	4a0c      	ldr	r2, [pc, #48]	; (800b388 <xTaskPriorityDisinherit+0xd4>)
 800b356:	6013      	str	r3, [r2, #0]
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b35c:	4613      	mov	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4413      	add	r3, r2
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	4a09      	ldr	r2, [pc, #36]	; (800b38c <xTaskPriorityDisinherit+0xd8>)
 800b366:	441a      	add	r2, r3
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	3304      	adds	r3, #4
 800b36c:	4619      	mov	r1, r3
 800b36e:	4610      	mov	r0, r2
 800b370:	f7fe fba9 	bl	8009ac6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b374:	2301      	movs	r3, #1
 800b376:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b378:	697b      	ldr	r3, [r7, #20]
	}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3718      	adds	r7, #24
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	20000b2c 	.word	0x20000b2c
 800b388:	20001008 	.word	0x20001008
 800b38c:	20000b30 	.word	0x20000b30

0800b390 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b39a:	4b21      	ldr	r3, [pc, #132]	; (800b420 <prvAddCurrentTaskToDelayedList+0x90>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3a0:	4b20      	ldr	r3, [pc, #128]	; (800b424 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe fbea 	bl	8009b80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3b2:	d10a      	bne.n	800b3ca <prvAddCurrentTaskToDelayedList+0x3a>
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d007      	beq.n	800b3ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3ba:	4b1a      	ldr	r3, [pc, #104]	; (800b424 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3304      	adds	r3, #4
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	4819      	ldr	r0, [pc, #100]	; (800b428 <prvAddCurrentTaskToDelayedList+0x98>)
 800b3c4:	f7fe fb7f 	bl	8009ac6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3c8:	e026      	b.n	800b418 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3d2:	4b14      	ldr	r3, [pc, #80]	; (800b424 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d209      	bcs.n	800b3f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3e2:	4b12      	ldr	r3, [pc, #72]	; (800b42c <prvAddCurrentTaskToDelayedList+0x9c>)
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	4b0f      	ldr	r3, [pc, #60]	; (800b424 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	3304      	adds	r3, #4
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	f7fe fb8d 	bl	8009b0e <vListInsert>
}
 800b3f4:	e010      	b.n	800b418 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3f6:	4b0e      	ldr	r3, [pc, #56]	; (800b430 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	4b0a      	ldr	r3, [pc, #40]	; (800b424 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	3304      	adds	r3, #4
 800b400:	4619      	mov	r1, r3
 800b402:	4610      	mov	r0, r2
 800b404:	f7fe fb83 	bl	8009b0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b408:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d202      	bcs.n	800b418 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b412:	4a08      	ldr	r2, [pc, #32]	; (800b434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	6013      	str	r3, [r2, #0]
}
 800b418:	bf00      	nop
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	20001004 	.word	0x20001004
 800b424:	20000b2c 	.word	0x20000b2c
 800b428:	20000fec 	.word	0x20000fec
 800b42c:	20000fbc 	.word	0x20000fbc
 800b430:	20000fb8 	.word	0x20000fb8
 800b434:	20001020 	.word	0x20001020

0800b438 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b08a      	sub	sp, #40	; 0x28
 800b43c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b43e:	2300      	movs	r3, #0
 800b440:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b442:	f000 fb09 	bl	800ba58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b446:	4b1c      	ldr	r3, [pc, #112]	; (800b4b8 <xTimerCreateTimerTask+0x80>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d021      	beq.n	800b492 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b44e:	2300      	movs	r3, #0
 800b450:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b452:	2300      	movs	r3, #0
 800b454:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b456:	1d3a      	adds	r2, r7, #4
 800b458:	f107 0108 	add.w	r1, r7, #8
 800b45c:	f107 030c 	add.w	r3, r7, #12
 800b460:	4618      	mov	r0, r3
 800b462:	f7fe fae9 	bl	8009a38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	9202      	str	r2, [sp, #8]
 800b46e:	9301      	str	r3, [sp, #4]
 800b470:	2302      	movs	r3, #2
 800b472:	9300      	str	r3, [sp, #0]
 800b474:	2300      	movs	r3, #0
 800b476:	460a      	mov	r2, r1
 800b478:	4910      	ldr	r1, [pc, #64]	; (800b4bc <xTimerCreateTimerTask+0x84>)
 800b47a:	4811      	ldr	r0, [pc, #68]	; (800b4c0 <xTimerCreateTimerTask+0x88>)
 800b47c:	f7ff f896 	bl	800a5ac <xTaskCreateStatic>
 800b480:	4603      	mov	r3, r0
 800b482:	4a10      	ldr	r2, [pc, #64]	; (800b4c4 <xTimerCreateTimerTask+0x8c>)
 800b484:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b486:	4b0f      	ldr	r3, [pc, #60]	; (800b4c4 <xTimerCreateTimerTask+0x8c>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b48e:	2301      	movs	r3, #1
 800b490:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d10a      	bne.n	800b4ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49c:	f383 8811 	msr	BASEPRI, r3
 800b4a0:	f3bf 8f6f 	isb	sy
 800b4a4:	f3bf 8f4f 	dsb	sy
 800b4a8:	613b      	str	r3, [r7, #16]
}
 800b4aa:	bf00      	nop
 800b4ac:	e7fe      	b.n	800b4ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b4ae:	697b      	ldr	r3, [r7, #20]
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3718      	adds	r7, #24
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20001064 	.word	0x20001064
 800b4bc:	0800d280 	.word	0x0800d280
 800b4c0:	0800b5fd 	.word	0x0800b5fd
 800b4c4:	20001068 	.word	0x20001068

0800b4c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b08a      	sub	sp, #40	; 0x28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10a      	bne.n	800b4f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e4:	f383 8811 	msr	BASEPRI, r3
 800b4e8:	f3bf 8f6f 	isb	sy
 800b4ec:	f3bf 8f4f 	dsb	sy
 800b4f0:	623b      	str	r3, [r7, #32]
}
 800b4f2:	bf00      	nop
 800b4f4:	e7fe      	b.n	800b4f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b4f6:	4b1a      	ldr	r3, [pc, #104]	; (800b560 <xTimerGenericCommand+0x98>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d02a      	beq.n	800b554 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2b05      	cmp	r3, #5
 800b50e:	dc18      	bgt.n	800b542 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b510:	f7ff feb2 	bl	800b278 <xTaskGetSchedulerState>
 800b514:	4603      	mov	r3, r0
 800b516:	2b02      	cmp	r3, #2
 800b518:	d109      	bne.n	800b52e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b51a:	4b11      	ldr	r3, [pc, #68]	; (800b560 <xTimerGenericCommand+0x98>)
 800b51c:	6818      	ldr	r0, [r3, #0]
 800b51e:	f107 0110 	add.w	r1, r7, #16
 800b522:	2300      	movs	r3, #0
 800b524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b526:	f7fe fc59 	bl	8009ddc <xQueueGenericSend>
 800b52a:	6278      	str	r0, [r7, #36]	; 0x24
 800b52c:	e012      	b.n	800b554 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b52e:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <xTimerGenericCommand+0x98>)
 800b530:	6818      	ldr	r0, [r3, #0]
 800b532:	f107 0110 	add.w	r1, r7, #16
 800b536:	2300      	movs	r3, #0
 800b538:	2200      	movs	r2, #0
 800b53a:	f7fe fc4f 	bl	8009ddc <xQueueGenericSend>
 800b53e:	6278      	str	r0, [r7, #36]	; 0x24
 800b540:	e008      	b.n	800b554 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b542:	4b07      	ldr	r3, [pc, #28]	; (800b560 <xTimerGenericCommand+0x98>)
 800b544:	6818      	ldr	r0, [r3, #0]
 800b546:	f107 0110 	add.w	r1, r7, #16
 800b54a:	2300      	movs	r3, #0
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	f7fe fd43 	bl	8009fd8 <xQueueGenericSendFromISR>
 800b552:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b556:	4618      	mov	r0, r3
 800b558:	3728      	adds	r7, #40	; 0x28
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	20001064 	.word	0x20001064

0800b564 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af02      	add	r7, sp, #8
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b56e:	4b22      	ldr	r3, [pc, #136]	; (800b5f8 <prvProcessExpiredTimer+0x94>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	3304      	adds	r3, #4
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7fe faff 	bl	8009b80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b588:	f003 0304 	and.w	r3, r3, #4
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d022      	beq.n	800b5d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	699a      	ldr	r2, [r3, #24]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	18d1      	adds	r1, r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	6978      	ldr	r0, [r7, #20]
 800b59e:	f000 f8d3 	bl	800b748 <prvInsertTimerInActiveList>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d01f      	beq.n	800b5e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	6978      	ldr	r0, [r7, #20]
 800b5b4:	f7ff ff88 	bl	800b4c8 <xTimerGenericCommand>
 800b5b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d113      	bne.n	800b5e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	60fb      	str	r3, [r7, #12]
}
 800b5d2:	bf00      	nop
 800b5d4:	e7fe      	b.n	800b5d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5dc:	f023 0301 	bic.w	r3, r3, #1
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	6a1b      	ldr	r3, [r3, #32]
 800b5ec:	6978      	ldr	r0, [r7, #20]
 800b5ee:	4798      	blx	r3
}
 800b5f0:	bf00      	nop
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	2000105c 	.word	0x2000105c

0800b5fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
 800b604:	f7f4 fe85 	bl	8000312 <vApplicationDaemonTaskStartupHook>

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b608:	f107 0308 	add.w	r3, r7, #8
 800b60c:	4618      	mov	r0, r3
 800b60e:	f000 f857 	bl	800b6c0 <prvGetNextExpireTime>
 800b612:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	4619      	mov	r1, r3
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 f803 	bl	800b624 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b61e:	f000 f8d5 	bl	800b7cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b622:	e7f1      	b.n	800b608 <prvTimerTask+0xc>

0800b624 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b62e:	f7ff f9eb 	bl	800aa08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b632:	f107 0308 	add.w	r3, r7, #8
 800b636:	4618      	mov	r0, r3
 800b638:	f000 f866 	bl	800b708 <prvSampleTimeNow>
 800b63c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d130      	bne.n	800b6a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10a      	bne.n	800b660 <prvProcessTimerOrBlockTask+0x3c>
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d806      	bhi.n	800b660 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b652:	f7ff f9e7 	bl	800aa24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b656:	68f9      	ldr	r1, [r7, #12]
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f7ff ff83 	bl	800b564 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b65e:	e024      	b.n	800b6aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d008      	beq.n	800b678 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b666:	4b13      	ldr	r3, [pc, #76]	; (800b6b4 <prvProcessTimerOrBlockTask+0x90>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d101      	bne.n	800b674 <prvProcessTimerOrBlockTask+0x50>
 800b670:	2301      	movs	r3, #1
 800b672:	e000      	b.n	800b676 <prvProcessTimerOrBlockTask+0x52>
 800b674:	2300      	movs	r3, #0
 800b676:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b678:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <prvProcessTimerOrBlockTask+0x94>)
 800b67a:	6818      	ldr	r0, [r3, #0]
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	4619      	mov	r1, r3
 800b686:	f7fe ff5d 	bl	800a544 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b68a:	f7ff f9cb 	bl	800aa24 <xTaskResumeAll>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d10a      	bne.n	800b6aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b694:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <prvProcessTimerOrBlockTask+0x98>)
 800b696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b69a:	601a      	str	r2, [r3, #0]
 800b69c:	f3bf 8f4f 	dsb	sy
 800b6a0:	f3bf 8f6f 	isb	sy
}
 800b6a4:	e001      	b.n	800b6aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6a6:	f7ff f9bd 	bl	800aa24 <xTaskResumeAll>
}
 800b6aa:	bf00      	nop
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20001060 	.word	0x20001060
 800b6b8:	20001064 	.word	0x20001064
 800b6bc:	e000ed04 	.word	0xe000ed04

0800b6c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b6c8:	4b0e      	ldr	r3, [pc, #56]	; (800b704 <prvGetNextExpireTime+0x44>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d101      	bne.n	800b6d6 <prvGetNextExpireTime+0x16>
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	e000      	b.n	800b6d8 <prvGetNextExpireTime+0x18>
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d105      	bne.n	800b6f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6e4:	4b07      	ldr	r3, [pc, #28]	; (800b704 <prvGetNextExpireTime+0x44>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	60fb      	str	r3, [r7, #12]
 800b6ee:	e001      	b.n	800b6f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	2000105c 	.word	0x2000105c

0800b708 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b084      	sub	sp, #16
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b710:	f7ff fa26 	bl	800ab60 <xTaskGetTickCount>
 800b714:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <prvSampleTimeNow+0x3c>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d205      	bcs.n	800b72c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b720:	f000 f936 	bl	800b990 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	601a      	str	r2, [r3, #0]
 800b72a:	e002      	b.n	800b732 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b732:	4a04      	ldr	r2, [pc, #16]	; (800b744 <prvSampleTimeNow+0x3c>)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b738:	68fb      	ldr	r3, [r7, #12]
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3710      	adds	r7, #16
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	2000106c 	.word	0x2000106c

0800b748 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
 800b754:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b756:	2300      	movs	r3, #0
 800b758:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	68ba      	ldr	r2, [r7, #8]
 800b75e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d812      	bhi.n	800b794 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	1ad2      	subs	r2, r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	699b      	ldr	r3, [r3, #24]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d302      	bcc.n	800b782 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b77c:	2301      	movs	r3, #1
 800b77e:	617b      	str	r3, [r7, #20]
 800b780:	e01b      	b.n	800b7ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b782:	4b10      	ldr	r3, [pc, #64]	; (800b7c4 <prvInsertTimerInActiveList+0x7c>)
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	3304      	adds	r3, #4
 800b78a:	4619      	mov	r1, r3
 800b78c:	4610      	mov	r0, r2
 800b78e:	f7fe f9be 	bl	8009b0e <vListInsert>
 800b792:	e012      	b.n	800b7ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b794:	687a      	ldr	r2, [r7, #4]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d206      	bcs.n	800b7aa <prvInsertTimerInActiveList+0x62>
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d302      	bcc.n	800b7aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	617b      	str	r3, [r7, #20]
 800b7a8:	e007      	b.n	800b7ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7aa:	4b07      	ldr	r3, [pc, #28]	; (800b7c8 <prvInsertTimerInActiveList+0x80>)
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	4610      	mov	r0, r2
 800b7b6:	f7fe f9aa 	bl	8009b0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b7ba:	697b      	ldr	r3, [r7, #20]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	20001060 	.word	0x20001060
 800b7c8:	2000105c 	.word	0x2000105c

0800b7cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b08e      	sub	sp, #56	; 0x38
 800b7d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7d2:	e0ca      	b.n	800b96a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	da18      	bge.n	800b80c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b7da:	1d3b      	adds	r3, r7, #4
 800b7dc:	3304      	adds	r3, #4
 800b7de:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10a      	bne.n	800b7fc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	61fb      	str	r3, [r7, #28]
}
 800b7f8:	bf00      	nop
 800b7fa:	e7fe      	b.n	800b7fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b802:	6850      	ldr	r0, [r2, #4]
 800b804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b806:	6892      	ldr	r2, [r2, #8]
 800b808:	4611      	mov	r1, r2
 800b80a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f2c0 80aa 	blt.w	800b968 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b81a:	695b      	ldr	r3, [r3, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d004      	beq.n	800b82a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b822:	3304      	adds	r3, #4
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe f9ab 	bl	8009b80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b82a:	463b      	mov	r3, r7
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7ff ff6b 	bl	800b708 <prvSampleTimeNow>
 800b832:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b09      	cmp	r3, #9
 800b838:	f200 8097 	bhi.w	800b96a <prvProcessReceivedCommands+0x19e>
 800b83c:	a201      	add	r2, pc, #4	; (adr r2, 800b844 <prvProcessReceivedCommands+0x78>)
 800b83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b842:	bf00      	nop
 800b844:	0800b86d 	.word	0x0800b86d
 800b848:	0800b86d 	.word	0x0800b86d
 800b84c:	0800b86d 	.word	0x0800b86d
 800b850:	0800b8e1 	.word	0x0800b8e1
 800b854:	0800b8f5 	.word	0x0800b8f5
 800b858:	0800b93f 	.word	0x0800b93f
 800b85c:	0800b86d 	.word	0x0800b86d
 800b860:	0800b86d 	.word	0x0800b86d
 800b864:	0800b8e1 	.word	0x0800b8e1
 800b868:	0800b8f5 	.word	0x0800b8f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b872:	f043 0301 	orr.w	r3, r3, #1
 800b876:	b2da      	uxtb	r2, r3
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b87e:	68ba      	ldr	r2, [r7, #8]
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	18d1      	adds	r1, r2, r3
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b88a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b88c:	f7ff ff5c 	bl	800b748 <prvInsertTimerInActiveList>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d069      	beq.n	800b96a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	6a1b      	ldr	r3, [r3, #32]
 800b89a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b89c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8a4:	f003 0304 	and.w	r3, r3, #4
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d05e      	beq.n	800b96a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	441a      	add	r2, r3
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8be:	f7ff fe03 	bl	800b4c8 <xTimerGenericCommand>
 800b8c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d14f      	bne.n	800b96a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	61bb      	str	r3, [r7, #24]
}
 800b8dc:	bf00      	nop
 800b8de:	e7fe      	b.n	800b8de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8e6:	f023 0301 	bic.w	r3, r3, #1
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b8f2:	e03a      	b.n	800b96a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8fa:	f043 0301 	orr.w	r3, r3, #1
 800b8fe:	b2da      	uxtb	r2, r3
 800b900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90e:	699b      	ldr	r3, [r3, #24]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10a      	bne.n	800b92a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	f383 8811 	msr	BASEPRI, r3
 800b91c:	f3bf 8f6f 	isb	sy
 800b920:	f3bf 8f4f 	dsb	sy
 800b924:	617b      	str	r3, [r7, #20]
}
 800b926:	bf00      	nop
 800b928:	e7fe      	b.n	800b928 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92c:	699a      	ldr	r2, [r3, #24]
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	18d1      	adds	r1, r2, r3
 800b932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b936:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b938:	f7ff ff06 	bl	800b748 <prvInsertTimerInActiveList>
					break;
 800b93c:	e015      	b.n	800b96a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b944:	f003 0302 	and.w	r3, r3, #2
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d103      	bne.n	800b954 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b94c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b94e:	f000 fbe3 	bl	800c118 <vPortFree>
 800b952:	e00a      	b.n	800b96a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b95a:	f023 0301 	bic.w	r3, r3, #1
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b962:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b966:	e000      	b.n	800b96a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b968:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b96a:	4b08      	ldr	r3, [pc, #32]	; (800b98c <prvProcessReceivedCommands+0x1c0>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	1d39      	adds	r1, r7, #4
 800b970:	2200      	movs	r2, #0
 800b972:	4618      	mov	r0, r3
 800b974:	f7fe fbcc 	bl	800a110 <xQueueReceive>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f47f af2a 	bne.w	800b7d4 <prvProcessReceivedCommands+0x8>
	}
}
 800b980:	bf00      	nop
 800b982:	bf00      	nop
 800b984:	3730      	adds	r7, #48	; 0x30
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	20001064 	.word	0x20001064

0800b990 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b088      	sub	sp, #32
 800b994:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b996:	e048      	b.n	800ba2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b998:	4b2d      	ldr	r3, [pc, #180]	; (800ba50 <prvSwitchTimerLists+0xc0>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9a2:	4b2b      	ldr	r3, [pc, #172]	; (800ba50 <prvSwitchTimerLists+0xc0>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fe f8e5 	bl	8009b80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	68f8      	ldr	r0, [r7, #12]
 800b9bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d02e      	beq.n	800ba2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b9d6:	68ba      	ldr	r2, [r7, #8]
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d90e      	bls.n	800b9fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9ea:	4b19      	ldr	r3, [pc, #100]	; (800ba50 <prvSwitchTimerLists+0xc0>)
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	3304      	adds	r3, #4
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	f7fe f88a 	bl	8009b0e <vListInsert>
 800b9fa:	e016      	b.n	800ba2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	2300      	movs	r3, #0
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	2100      	movs	r1, #0
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f7ff fd5e 	bl	800b4c8 <xTimerGenericCommand>
 800ba0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d10a      	bne.n	800ba2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ba14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba18:	f383 8811 	msr	BASEPRI, r3
 800ba1c:	f3bf 8f6f 	isb	sy
 800ba20:	f3bf 8f4f 	dsb	sy
 800ba24:	603b      	str	r3, [r7, #0]
}
 800ba26:	bf00      	nop
 800ba28:	e7fe      	b.n	800ba28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba2a:	4b09      	ldr	r3, [pc, #36]	; (800ba50 <prvSwitchTimerLists+0xc0>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d1b1      	bne.n	800b998 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba34:	4b06      	ldr	r3, [pc, #24]	; (800ba50 <prvSwitchTimerLists+0xc0>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba3a:	4b06      	ldr	r3, [pc, #24]	; (800ba54 <prvSwitchTimerLists+0xc4>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a04      	ldr	r2, [pc, #16]	; (800ba50 <prvSwitchTimerLists+0xc0>)
 800ba40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba42:	4a04      	ldr	r2, [pc, #16]	; (800ba54 <prvSwitchTimerLists+0xc4>)
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	6013      	str	r3, [r2, #0]
}
 800ba48:	bf00      	nop
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	2000105c 	.word	0x2000105c
 800ba54:	20001060 	.word	0x20001060

0800ba58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba5e:	f000 f969 	bl	800bd34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba62:	4b15      	ldr	r3, [pc, #84]	; (800bab8 <prvCheckForValidListAndQueue+0x60>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d120      	bne.n	800baac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba6a:	4814      	ldr	r0, [pc, #80]	; (800babc <prvCheckForValidListAndQueue+0x64>)
 800ba6c:	f7fd fffe 	bl	8009a6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba70:	4813      	ldr	r0, [pc, #76]	; (800bac0 <prvCheckForValidListAndQueue+0x68>)
 800ba72:	f7fd fffb 	bl	8009a6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba76:	4b13      	ldr	r3, [pc, #76]	; (800bac4 <prvCheckForValidListAndQueue+0x6c>)
 800ba78:	4a10      	ldr	r2, [pc, #64]	; (800babc <prvCheckForValidListAndQueue+0x64>)
 800ba7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba7c:	4b12      	ldr	r3, [pc, #72]	; (800bac8 <prvCheckForValidListAndQueue+0x70>)
 800ba7e:	4a10      	ldr	r2, [pc, #64]	; (800bac0 <prvCheckForValidListAndQueue+0x68>)
 800ba80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba82:	2300      	movs	r3, #0
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	4b11      	ldr	r3, [pc, #68]	; (800bacc <prvCheckForValidListAndQueue+0x74>)
 800ba88:	4a11      	ldr	r2, [pc, #68]	; (800bad0 <prvCheckForValidListAndQueue+0x78>)
 800ba8a:	2110      	movs	r1, #16
 800ba8c:	200a      	movs	r0, #10
 800ba8e:	f7fe f909 	bl	8009ca4 <xQueueGenericCreateStatic>
 800ba92:	4603      	mov	r3, r0
 800ba94:	4a08      	ldr	r2, [pc, #32]	; (800bab8 <prvCheckForValidListAndQueue+0x60>)
 800ba96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba98:	4b07      	ldr	r3, [pc, #28]	; (800bab8 <prvCheckForValidListAndQueue+0x60>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d005      	beq.n	800baac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800baa0:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <prvCheckForValidListAndQueue+0x60>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	490b      	ldr	r1, [pc, #44]	; (800bad4 <prvCheckForValidListAndQueue+0x7c>)
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fe fd22 	bl	800a4f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800baac:	f000 f972 	bl	800bd94 <vPortExitCritical>
}
 800bab0:	bf00      	nop
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	20001064 	.word	0x20001064
 800babc:	20001034 	.word	0x20001034
 800bac0:	20001048 	.word	0x20001048
 800bac4:	2000105c 	.word	0x2000105c
 800bac8:	20001060 	.word	0x20001060
 800bacc:	20001110 	.word	0x20001110
 800bad0:	20001070 	.word	0x20001070
 800bad4:	0800d288 	.word	0x0800d288

0800bad8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3b04      	subs	r3, #4
 800bae8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800baf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	3b04      	subs	r3, #4
 800baf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	f023 0201 	bic.w	r2, r3, #1
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3b04      	subs	r3, #4
 800bb06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb08:	4a0c      	ldr	r2, [pc, #48]	; (800bb3c <pxPortInitialiseStack+0x64>)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3b14      	subs	r3, #20
 800bb12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	3b04      	subs	r3, #4
 800bb1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f06f 0202 	mvn.w	r2, #2
 800bb26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	3b20      	subs	r3, #32
 800bb2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3714      	adds	r7, #20
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr
 800bb3c:	0800bb41 	.word	0x0800bb41

0800bb40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb4a:	4b12      	ldr	r3, [pc, #72]	; (800bb94 <prvTaskExitError+0x54>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb52:	d00a      	beq.n	800bb6a <prvTaskExitError+0x2a>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	60fb      	str	r3, [r7, #12]
}
 800bb66:	bf00      	nop
 800bb68:	e7fe      	b.n	800bb68 <prvTaskExitError+0x28>
	__asm volatile
 800bb6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb6e:	f383 8811 	msr	BASEPRI, r3
 800bb72:	f3bf 8f6f 	isb	sy
 800bb76:	f3bf 8f4f 	dsb	sy
 800bb7a:	60bb      	str	r3, [r7, #8]
}
 800bb7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb7e:	bf00      	nop
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d0fc      	beq.n	800bb80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb86:	bf00      	nop
 800bb88:	bf00      	nop
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	2000011c 	.word	0x2000011c
	...

0800bba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bba0:	4b07      	ldr	r3, [pc, #28]	; (800bbc0 <pxCurrentTCBConst2>)
 800bba2:	6819      	ldr	r1, [r3, #0]
 800bba4:	6808      	ldr	r0, [r1, #0]
 800bba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbaa:	f380 8809 	msr	PSP, r0
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f04f 0000 	mov.w	r0, #0
 800bbb6:	f380 8811 	msr	BASEPRI, r0
 800bbba:	4770      	bx	lr
 800bbbc:	f3af 8000 	nop.w

0800bbc0 <pxCurrentTCBConst2>:
 800bbc0:	20000b2c 	.word	0x20000b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bbc4:	bf00      	nop
 800bbc6:	bf00      	nop

0800bbc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bbc8:	4808      	ldr	r0, [pc, #32]	; (800bbec <prvPortStartFirstTask+0x24>)
 800bbca:	6800      	ldr	r0, [r0, #0]
 800bbcc:	6800      	ldr	r0, [r0, #0]
 800bbce:	f380 8808 	msr	MSP, r0
 800bbd2:	f04f 0000 	mov.w	r0, #0
 800bbd6:	f380 8814 	msr	CONTROL, r0
 800bbda:	b662      	cpsie	i
 800bbdc:	b661      	cpsie	f
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	df00      	svc	0
 800bbe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbea:	bf00      	nop
 800bbec:	e000ed08 	.word	0xe000ed08

0800bbf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bbf6:	4b46      	ldr	r3, [pc, #280]	; (800bd10 <xPortStartScheduler+0x120>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a46      	ldr	r2, [pc, #280]	; (800bd14 <xPortStartScheduler+0x124>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d10a      	bne.n	800bc16 <xPortStartScheduler+0x26>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	613b      	str	r3, [r7, #16]
}
 800bc12:	bf00      	nop
 800bc14:	e7fe      	b.n	800bc14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc16:	4b3e      	ldr	r3, [pc, #248]	; (800bd10 <xPortStartScheduler+0x120>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	4a3f      	ldr	r2, [pc, #252]	; (800bd18 <xPortStartScheduler+0x128>)
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	d10a      	bne.n	800bc36 <xPortStartScheduler+0x46>
	__asm volatile
 800bc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc24:	f383 8811 	msr	BASEPRI, r3
 800bc28:	f3bf 8f6f 	isb	sy
 800bc2c:	f3bf 8f4f 	dsb	sy
 800bc30:	60fb      	str	r3, [r7, #12]
}
 800bc32:	bf00      	nop
 800bc34:	e7fe      	b.n	800bc34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc36:	4b39      	ldr	r3, [pc, #228]	; (800bd1c <xPortStartScheduler+0x12c>)
 800bc38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	22ff      	movs	r2, #255	; 0xff
 800bc46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc50:	78fb      	ldrb	r3, [r7, #3]
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc58:	b2da      	uxtb	r2, r3
 800bc5a:	4b31      	ldr	r3, [pc, #196]	; (800bd20 <xPortStartScheduler+0x130>)
 800bc5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc5e:	4b31      	ldr	r3, [pc, #196]	; (800bd24 <xPortStartScheduler+0x134>)
 800bc60:	2207      	movs	r2, #7
 800bc62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc64:	e009      	b.n	800bc7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc66:	4b2f      	ldr	r3, [pc, #188]	; (800bd24 <xPortStartScheduler+0x134>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	4a2d      	ldr	r2, [pc, #180]	; (800bd24 <xPortStartScheduler+0x134>)
 800bc6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc70:	78fb      	ldrb	r3, [r7, #3]
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc7a:	78fb      	ldrb	r3, [r7, #3]
 800bc7c:	b2db      	uxtb	r3, r3
 800bc7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc82:	2b80      	cmp	r3, #128	; 0x80
 800bc84:	d0ef      	beq.n	800bc66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc86:	4b27      	ldr	r3, [pc, #156]	; (800bd24 <xPortStartScheduler+0x134>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f1c3 0307 	rsb	r3, r3, #7
 800bc8e:	2b04      	cmp	r3, #4
 800bc90:	d00a      	beq.n	800bca8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc96:	f383 8811 	msr	BASEPRI, r3
 800bc9a:	f3bf 8f6f 	isb	sy
 800bc9e:	f3bf 8f4f 	dsb	sy
 800bca2:	60bb      	str	r3, [r7, #8]
}
 800bca4:	bf00      	nop
 800bca6:	e7fe      	b.n	800bca6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bca8:	4b1e      	ldr	r3, [pc, #120]	; (800bd24 <xPortStartScheduler+0x134>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	021b      	lsls	r3, r3, #8
 800bcae:	4a1d      	ldr	r2, [pc, #116]	; (800bd24 <xPortStartScheduler+0x134>)
 800bcb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcb2:	4b1c      	ldr	r3, [pc, #112]	; (800bd24 <xPortStartScheduler+0x134>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcba:	4a1a      	ldr	r2, [pc, #104]	; (800bd24 <xPortStartScheduler+0x134>)
 800bcbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bcc6:	4b18      	ldr	r3, [pc, #96]	; (800bd28 <xPortStartScheduler+0x138>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a17      	ldr	r2, [pc, #92]	; (800bd28 <xPortStartScheduler+0x138>)
 800bccc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bcd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bcd2:	4b15      	ldr	r3, [pc, #84]	; (800bd28 <xPortStartScheduler+0x138>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a14      	ldr	r2, [pc, #80]	; (800bd28 <xPortStartScheduler+0x138>)
 800bcd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bcdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bcde:	f000 f8dd 	bl	800be9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bce2:	4b12      	ldr	r3, [pc, #72]	; (800bd2c <xPortStartScheduler+0x13c>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bce8:	f000 f8fc 	bl	800bee4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bcec:	4b10      	ldr	r3, [pc, #64]	; (800bd30 <xPortStartScheduler+0x140>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a0f      	ldr	r2, [pc, #60]	; (800bd30 <xPortStartScheduler+0x140>)
 800bcf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bcf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bcf8:	f7ff ff66 	bl	800bbc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bcfc:	f7ff f802 	bl	800ad04 <vTaskSwitchContext>
	prvTaskExitError();
 800bd00:	f7ff ff1e 	bl	800bb40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd04:	2300      	movs	r3, #0
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3718      	adds	r7, #24
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	e000ed00 	.word	0xe000ed00
 800bd14:	410fc271 	.word	0x410fc271
 800bd18:	410fc270 	.word	0x410fc270
 800bd1c:	e000e400 	.word	0xe000e400
 800bd20:	20001160 	.word	0x20001160
 800bd24:	20001164 	.word	0x20001164
 800bd28:	e000ed20 	.word	0xe000ed20
 800bd2c:	2000011c 	.word	0x2000011c
 800bd30:	e000ef34 	.word	0xe000ef34

0800bd34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	607b      	str	r3, [r7, #4]
}
 800bd4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd4e:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <vPortEnterCritical+0x58>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	3301      	adds	r3, #1
 800bd54:	4a0d      	ldr	r2, [pc, #52]	; (800bd8c <vPortEnterCritical+0x58>)
 800bd56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd58:	4b0c      	ldr	r3, [pc, #48]	; (800bd8c <vPortEnterCritical+0x58>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d10f      	bne.n	800bd80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd60:	4b0b      	ldr	r3, [pc, #44]	; (800bd90 <vPortEnterCritical+0x5c>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00a      	beq.n	800bd80 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	603b      	str	r3, [r7, #0]
}
 800bd7c:	bf00      	nop
 800bd7e:	e7fe      	b.n	800bd7e <vPortEnterCritical+0x4a>
	}
}
 800bd80:	bf00      	nop
 800bd82:	370c      	adds	r7, #12
 800bd84:	46bd      	mov	sp, r7
 800bd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8a:	4770      	bx	lr
 800bd8c:	2000011c 	.word	0x2000011c
 800bd90:	e000ed04 	.word	0xe000ed04

0800bd94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd9a:	4b12      	ldr	r3, [pc, #72]	; (800bde4 <vPortExitCritical+0x50>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10a      	bne.n	800bdb8 <vPortExitCritical+0x24>
	__asm volatile
 800bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	607b      	str	r3, [r7, #4]
}
 800bdb4:	bf00      	nop
 800bdb6:	e7fe      	b.n	800bdb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bdb8:	4b0a      	ldr	r3, [pc, #40]	; (800bde4 <vPortExitCritical+0x50>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	4a09      	ldr	r2, [pc, #36]	; (800bde4 <vPortExitCritical+0x50>)
 800bdc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bdc2:	4b08      	ldr	r3, [pc, #32]	; (800bde4 <vPortExitCritical+0x50>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d105      	bne.n	800bdd6 <vPortExitCritical+0x42>
 800bdca:	2300      	movs	r3, #0
 800bdcc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	f383 8811 	msr	BASEPRI, r3
}
 800bdd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bdd6:	bf00      	nop
 800bdd8:	370c      	adds	r7, #12
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	2000011c 	.word	0x2000011c
	...

0800bdf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bdf0:	f3ef 8009 	mrs	r0, PSP
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	4b15      	ldr	r3, [pc, #84]	; (800be50 <pxCurrentTCBConst>)
 800bdfa:	681a      	ldr	r2, [r3, #0]
 800bdfc:	f01e 0f10 	tst.w	lr, #16
 800be00:	bf08      	it	eq
 800be02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0a:	6010      	str	r0, [r2, #0]
 800be0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be14:	f380 8811 	msr	BASEPRI, r0
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f7fe ff70 	bl	800ad04 <vTaskSwitchContext>
 800be24:	f04f 0000 	mov.w	r0, #0
 800be28:	f380 8811 	msr	BASEPRI, r0
 800be2c:	bc09      	pop	{r0, r3}
 800be2e:	6819      	ldr	r1, [r3, #0]
 800be30:	6808      	ldr	r0, [r1, #0]
 800be32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be36:	f01e 0f10 	tst.w	lr, #16
 800be3a:	bf08      	it	eq
 800be3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be40:	f380 8809 	msr	PSP, r0
 800be44:	f3bf 8f6f 	isb	sy
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	f3af 8000 	nop.w

0800be50 <pxCurrentTCBConst>:
 800be50:	20000b2c 	.word	0x20000b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be54:	bf00      	nop
 800be56:	bf00      	nop

0800be58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	607b      	str	r3, [r7, #4]
}
 800be70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be72:	f7fe fe85 	bl	800ab80 <xTaskIncrementTick>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d003      	beq.n	800be84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be7c:	4b06      	ldr	r3, [pc, #24]	; (800be98 <xPortSysTickHandler+0x40>)
 800be7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be82:	601a      	str	r2, [r3, #0]
 800be84:	2300      	movs	r3, #0
 800be86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	f383 8811 	msr	BASEPRI, r3
}
 800be8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	e000ed04 	.word	0xe000ed04

0800be9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be9c:	b480      	push	{r7}
 800be9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bea0:	4b0b      	ldr	r3, [pc, #44]	; (800bed0 <vPortSetupTimerInterrupt+0x34>)
 800bea2:	2200      	movs	r2, #0
 800bea4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bea6:	4b0b      	ldr	r3, [pc, #44]	; (800bed4 <vPortSetupTimerInterrupt+0x38>)
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800beac:	4b0a      	ldr	r3, [pc, #40]	; (800bed8 <vPortSetupTimerInterrupt+0x3c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a0a      	ldr	r2, [pc, #40]	; (800bedc <vPortSetupTimerInterrupt+0x40>)
 800beb2:	fba2 2303 	umull	r2, r3, r2, r3
 800beb6:	099b      	lsrs	r3, r3, #6
 800beb8:	4a09      	ldr	r2, [pc, #36]	; (800bee0 <vPortSetupTimerInterrupt+0x44>)
 800beba:	3b01      	subs	r3, #1
 800bebc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bebe:	4b04      	ldr	r3, [pc, #16]	; (800bed0 <vPortSetupTimerInterrupt+0x34>)
 800bec0:	2207      	movs	r2, #7
 800bec2:	601a      	str	r2, [r3, #0]
}
 800bec4:	bf00      	nop
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	e000e010 	.word	0xe000e010
 800bed4:	e000e018 	.word	0xe000e018
 800bed8:	20000000 	.word	0x20000000
 800bedc:	10624dd3 	.word	0x10624dd3
 800bee0:	e000e014 	.word	0xe000e014

0800bee4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bee4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bef4 <vPortEnableVFP+0x10>
 800bee8:	6801      	ldr	r1, [r0, #0]
 800beea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800beee:	6001      	str	r1, [r0, #0]
 800bef0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bef2:	bf00      	nop
 800bef4:	e000ed88 	.word	0xe000ed88

0800bef8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bef8:	b480      	push	{r7}
 800befa:	b085      	sub	sp, #20
 800befc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800befe:	f3ef 8305 	mrs	r3, IPSR
 800bf02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b0f      	cmp	r3, #15
 800bf08:	d914      	bls.n	800bf34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf0a:	4a17      	ldr	r2, [pc, #92]	; (800bf68 <vPortValidateInterruptPriority+0x70>)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4413      	add	r3, r2
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf14:	4b15      	ldr	r3, [pc, #84]	; (800bf6c <vPortValidateInterruptPriority+0x74>)
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	7afa      	ldrb	r2, [r7, #11]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d20a      	bcs.n	800bf34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf22:	f383 8811 	msr	BASEPRI, r3
 800bf26:	f3bf 8f6f 	isb	sy
 800bf2a:	f3bf 8f4f 	dsb	sy
 800bf2e:	607b      	str	r3, [r7, #4]
}
 800bf30:	bf00      	nop
 800bf32:	e7fe      	b.n	800bf32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf34:	4b0e      	ldr	r3, [pc, #56]	; (800bf70 <vPortValidateInterruptPriority+0x78>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf3c:	4b0d      	ldr	r3, [pc, #52]	; (800bf74 <vPortValidateInterruptPriority+0x7c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d90a      	bls.n	800bf5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	603b      	str	r3, [r7, #0]
}
 800bf56:	bf00      	nop
 800bf58:	e7fe      	b.n	800bf58 <vPortValidateInterruptPriority+0x60>
	}
 800bf5a:	bf00      	nop
 800bf5c:	3714      	adds	r7, #20
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop
 800bf68:	e000e3f0 	.word	0xe000e3f0
 800bf6c:	20001160 	.word	0x20001160
 800bf70:	e000ed0c 	.word	0xe000ed0c
 800bf74:	20001164 	.word	0x20001164

0800bf78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	; 0x28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf84:	f7fe fd40 	bl	800aa08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf88:	4b5d      	ldr	r3, [pc, #372]	; (800c100 <pvPortMalloc+0x188>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf90:	f000 f924 	bl	800c1dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf94:	4b5b      	ldr	r3, [pc, #364]	; (800c104 <pvPortMalloc+0x18c>)
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f040 8093 	bne.w	800c0c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d01d      	beq.n	800bfe4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bfa8:	2208      	movs	r2, #8
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4413      	add	r3, r2
 800bfae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f003 0307 	and.w	r3, r3, #7
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d014      	beq.n	800bfe4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f023 0307 	bic.w	r3, r3, #7
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f003 0307 	and.w	r3, r3, #7
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00a      	beq.n	800bfe4 <pvPortMalloc+0x6c>
	__asm volatile
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	f383 8811 	msr	BASEPRI, r3
 800bfd6:	f3bf 8f6f 	isb	sy
 800bfda:	f3bf 8f4f 	dsb	sy
 800bfde:	617b      	str	r3, [r7, #20]
}
 800bfe0:	bf00      	nop
 800bfe2:	e7fe      	b.n	800bfe2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d06e      	beq.n	800c0c8 <pvPortMalloc+0x150>
 800bfea:	4b47      	ldr	r3, [pc, #284]	; (800c108 <pvPortMalloc+0x190>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	687a      	ldr	r2, [r7, #4]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d869      	bhi.n	800c0c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bff4:	4b45      	ldr	r3, [pc, #276]	; (800c10c <pvPortMalloc+0x194>)
 800bff6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bff8:	4b44      	ldr	r3, [pc, #272]	; (800c10c <pvPortMalloc+0x194>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bffe:	e004      	b.n	800c00a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c002:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	429a      	cmp	r2, r3
 800c012:	d903      	bls.n	800c01c <pvPortMalloc+0xa4>
 800c014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1f1      	bne.n	800c000 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c01c:	4b38      	ldr	r3, [pc, #224]	; (800c100 <pvPortMalloc+0x188>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c022:	429a      	cmp	r2, r3
 800c024:	d050      	beq.n	800c0c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	2208      	movs	r2, #8
 800c02c:	4413      	add	r3, r2
 800c02e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	6a3b      	ldr	r3, [r7, #32]
 800c036:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	1ad2      	subs	r2, r2, r3
 800c040:	2308      	movs	r3, #8
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	429a      	cmp	r2, r3
 800c046:	d91f      	bls.n	800c088 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4413      	add	r3, r2
 800c04e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c050:	69bb      	ldr	r3, [r7, #24]
 800c052:	f003 0307 	and.w	r3, r3, #7
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00a      	beq.n	800c070 <pvPortMalloc+0xf8>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	613b      	str	r3, [r7, #16]
}
 800c06c:	bf00      	nop
 800c06e:	e7fe      	b.n	800c06e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	1ad2      	subs	r2, r2, r3
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c082:	69b8      	ldr	r0, [r7, #24]
 800c084:	f000 f90c 	bl	800c2a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c088:	4b1f      	ldr	r3, [pc, #124]	; (800c108 <pvPortMalloc+0x190>)
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	4a1d      	ldr	r2, [pc, #116]	; (800c108 <pvPortMalloc+0x190>)
 800c094:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c096:	4b1c      	ldr	r3, [pc, #112]	; (800c108 <pvPortMalloc+0x190>)
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	4b1d      	ldr	r3, [pc, #116]	; (800c110 <pvPortMalloc+0x198>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d203      	bcs.n	800c0aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0a2:	4b19      	ldr	r3, [pc, #100]	; (800c108 <pvPortMalloc+0x190>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a1a      	ldr	r2, [pc, #104]	; (800c110 <pvPortMalloc+0x198>)
 800c0a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	685a      	ldr	r2, [r3, #4]
 800c0ae:	4b15      	ldr	r3, [pc, #84]	; (800c104 <pvPortMalloc+0x18c>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	431a      	orrs	r2, r3
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c0be:	4b15      	ldr	r3, [pc, #84]	; (800c114 <pvPortMalloc+0x19c>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	4a13      	ldr	r2, [pc, #76]	; (800c114 <pvPortMalloc+0x19c>)
 800c0c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0c8:	f7fe fcac 	bl	800aa24 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d101      	bne.n	800c0d6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c0d2:	f7f4 f917 	bl	8000304 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	f003 0307 	and.w	r3, r3, #7
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d00a      	beq.n	800c0f6 <pvPortMalloc+0x17e>
	__asm volatile
 800c0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e4:	f383 8811 	msr	BASEPRI, r3
 800c0e8:	f3bf 8f6f 	isb	sy
 800c0ec:	f3bf 8f4f 	dsb	sy
 800c0f0:	60fb      	str	r3, [r7, #12]
}
 800c0f2:	bf00      	nop
 800c0f4:	e7fe      	b.n	800c0f4 <pvPortMalloc+0x17c>
	return pvReturn;
 800c0f6:	69fb      	ldr	r3, [r7, #28]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3728      	adds	r7, #40	; 0x28
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	20001d70 	.word	0x20001d70
 800c104:	20001d84 	.word	0x20001d84
 800c108:	20001d74 	.word	0x20001d74
 800c10c:	20001d68 	.word	0x20001d68
 800c110:	20001d78 	.word	0x20001d78
 800c114:	20001d7c 	.word	0x20001d7c

0800c118 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d04d      	beq.n	800c1c6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c12a:	2308      	movs	r3, #8
 800c12c:	425b      	negs	r3, r3
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	4413      	add	r3, r2
 800c132:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	4b24      	ldr	r3, [pc, #144]	; (800c1d0 <vPortFree+0xb8>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4013      	ands	r3, r2
 800c142:	2b00      	cmp	r3, #0
 800c144:	d10a      	bne.n	800c15c <vPortFree+0x44>
	__asm volatile
 800c146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14a:	f383 8811 	msr	BASEPRI, r3
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	60fb      	str	r3, [r7, #12]
}
 800c158:	bf00      	nop
 800c15a:	e7fe      	b.n	800c15a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00a      	beq.n	800c17a <vPortFree+0x62>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	60bb      	str	r3, [r7, #8]
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	685a      	ldr	r2, [r3, #4]
 800c17e:	4b14      	ldr	r3, [pc, #80]	; (800c1d0 <vPortFree+0xb8>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4013      	ands	r3, r2
 800c184:	2b00      	cmp	r3, #0
 800c186:	d01e      	beq.n	800c1c6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d11a      	bne.n	800c1c6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	685a      	ldr	r2, [r3, #4]
 800c194:	4b0e      	ldr	r3, [pc, #56]	; (800c1d0 <vPortFree+0xb8>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	43db      	mvns	r3, r3
 800c19a:	401a      	ands	r2, r3
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c1a0:	f7fe fc32 	bl	800aa08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	685a      	ldr	r2, [r3, #4]
 800c1a8:	4b0a      	ldr	r3, [pc, #40]	; (800c1d4 <vPortFree+0xbc>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4413      	add	r3, r2
 800c1ae:	4a09      	ldr	r2, [pc, #36]	; (800c1d4 <vPortFree+0xbc>)
 800c1b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c1b2:	6938      	ldr	r0, [r7, #16]
 800c1b4:	f000 f874 	bl	800c2a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c1b8:	4b07      	ldr	r3, [pc, #28]	; (800c1d8 <vPortFree+0xc0>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	4a06      	ldr	r2, [pc, #24]	; (800c1d8 <vPortFree+0xc0>)
 800c1c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c1c2:	f7fe fc2f 	bl	800aa24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1c6:	bf00      	nop
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20001d84 	.word	0x20001d84
 800c1d4:	20001d74 	.word	0x20001d74
 800c1d8:	20001d80 	.word	0x20001d80

0800c1dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c1e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c1e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1e8:	4b27      	ldr	r3, [pc, #156]	; (800c288 <prvHeapInit+0xac>)
 800c1ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f003 0307 	and.w	r3, r3, #7
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00c      	beq.n	800c210 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	3307      	adds	r3, #7
 800c1fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f023 0307 	bic.w	r3, r3, #7
 800c202:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c204:	68ba      	ldr	r2, [r7, #8]
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	1ad3      	subs	r3, r2, r3
 800c20a:	4a1f      	ldr	r2, [pc, #124]	; (800c288 <prvHeapInit+0xac>)
 800c20c:	4413      	add	r3, r2
 800c20e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c214:	4a1d      	ldr	r2, [pc, #116]	; (800c28c <prvHeapInit+0xb0>)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c21a:	4b1c      	ldr	r3, [pc, #112]	; (800c28c <prvHeapInit+0xb0>)
 800c21c:	2200      	movs	r2, #0
 800c21e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	4413      	add	r3, r2
 800c226:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c228:	2208      	movs	r2, #8
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	1a9b      	subs	r3, r3, r2
 800c22e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f023 0307 	bic.w	r3, r3, #7
 800c236:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	4a15      	ldr	r2, [pc, #84]	; (800c290 <prvHeapInit+0xb4>)
 800c23c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c23e:	4b14      	ldr	r3, [pc, #80]	; (800c290 <prvHeapInit+0xb4>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	2200      	movs	r2, #0
 800c244:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c246:	4b12      	ldr	r3, [pc, #72]	; (800c290 <prvHeapInit+0xb4>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	2200      	movs	r2, #0
 800c24c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	1ad2      	subs	r2, r2, r3
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c25c:	4b0c      	ldr	r3, [pc, #48]	; (800c290 <prvHeapInit+0xb4>)
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	4a0a      	ldr	r2, [pc, #40]	; (800c294 <prvHeapInit+0xb8>)
 800c26a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	4a09      	ldr	r2, [pc, #36]	; (800c298 <prvHeapInit+0xbc>)
 800c272:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c274:	4b09      	ldr	r3, [pc, #36]	; (800c29c <prvHeapInit+0xc0>)
 800c276:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c27a:	601a      	str	r2, [r3, #0]
}
 800c27c:	bf00      	nop
 800c27e:	3714      	adds	r7, #20
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr
 800c288:	20001168 	.word	0x20001168
 800c28c:	20001d68 	.word	0x20001d68
 800c290:	20001d70 	.word	0x20001d70
 800c294:	20001d78 	.word	0x20001d78
 800c298:	20001d74 	.word	0x20001d74
 800c29c:	20001d84 	.word	0x20001d84

0800c2a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c2a8:	4b28      	ldr	r3, [pc, #160]	; (800c34c <prvInsertBlockIntoFreeList+0xac>)
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	e002      	b.n	800c2b4 <prvInsertBlockIntoFreeList+0x14>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	60fb      	str	r3, [r7, #12]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d8f7      	bhi.n	800c2ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	68ba      	ldr	r2, [r7, #8]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d108      	bne.n	800c2e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	685a      	ldr	r2, [r3, #4]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	441a      	add	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	441a      	add	r2, r3
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	429a      	cmp	r2, r3
 800c2f4:	d118      	bne.n	800c328 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	4b15      	ldr	r3, [pc, #84]	; (800c350 <prvInsertBlockIntoFreeList+0xb0>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d00d      	beq.n	800c31e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	685a      	ldr	r2, [r3, #4]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	441a      	add	r2, r3
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	601a      	str	r2, [r3, #0]
 800c31c:	e008      	b.n	800c330 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c31e:	4b0c      	ldr	r3, [pc, #48]	; (800c350 <prvInsertBlockIntoFreeList+0xb0>)
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	601a      	str	r2, [r3, #0]
 800c326:	e003      	b.n	800c330 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	429a      	cmp	r2, r3
 800c336:	d002      	beq.n	800c33e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c33e:	bf00      	nop
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr
 800c34a:	bf00      	nop
 800c34c:	20001d68 	.word	0x20001d68
 800c350:	20001d70 	.word	0x20001d70

0800c354 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c358:	2200      	movs	r2, #0
 800c35a:	4912      	ldr	r1, [pc, #72]	; (800c3a4 <MX_USB_Device_Init+0x50>)
 800c35c:	4812      	ldr	r0, [pc, #72]	; (800c3a8 <MX_USB_Device_Init+0x54>)
 800c35e:	f7fc f911 	bl	8008584 <USBD_Init>
 800c362:	4603      	mov	r3, r0
 800c364:	2b00      	cmp	r3, #0
 800c366:	d001      	beq.n	800c36c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c368:	f7f4 f946 	bl	80005f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c36c:	490f      	ldr	r1, [pc, #60]	; (800c3ac <MX_USB_Device_Init+0x58>)
 800c36e:	480e      	ldr	r0, [pc, #56]	; (800c3a8 <MX_USB_Device_Init+0x54>)
 800c370:	f7fc f938 	bl	80085e4 <USBD_RegisterClass>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d001      	beq.n	800c37e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c37a:	f7f4 f93d 	bl	80005f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c37e:	490c      	ldr	r1, [pc, #48]	; (800c3b0 <MX_USB_Device_Init+0x5c>)
 800c380:	4809      	ldr	r0, [pc, #36]	; (800c3a8 <MX_USB_Device_Init+0x54>)
 800c382:	f7fc f889 	bl	8008498 <USBD_CDC_RegisterInterface>
 800c386:	4603      	mov	r3, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d001      	beq.n	800c390 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c38c:	f7f4 f934 	bl	80005f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c390:	4805      	ldr	r0, [pc, #20]	; (800c3a8 <MX_USB_Device_Init+0x54>)
 800c392:	f7fc f94e 	bl	8008632 <USBD_Start>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d001      	beq.n	800c3a0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c39c:	f7f4 f92c 	bl	80005f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c3a0:	bf00      	nop
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	20000134 	.word	0x20000134
 800c3a8:	20001d88 	.word	0x20001d88
 800c3ac:	20000018 	.word	0x20000018
 800c3b0:	20000120 	.word	0x20000120

0800c3b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	4905      	ldr	r1, [pc, #20]	; (800c3d0 <CDC_Init_FS+0x1c>)
 800c3bc:	4805      	ldr	r0, [pc, #20]	; (800c3d4 <CDC_Init_FS+0x20>)
 800c3be:	f7fc f880 	bl	80084c2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c3c2:	4905      	ldr	r1, [pc, #20]	; (800c3d8 <CDC_Init_FS+0x24>)
 800c3c4:	4803      	ldr	r0, [pc, #12]	; (800c3d4 <CDC_Init_FS+0x20>)
 800c3c6:	f7fc f89a 	bl	80084fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c3ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	20002858 	.word	0x20002858
 800c3d4:	20001d88 	.word	0x20001d88
 800c3d8:	20002058 	.word	0x20002058

0800c3dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c3e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	6039      	str	r1, [r7, #0]
 800c3f6:	71fb      	strb	r3, [r7, #7]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c3fc:	79fb      	ldrb	r3, [r7, #7]
 800c3fe:	2b23      	cmp	r3, #35	; 0x23
 800c400:	d84a      	bhi.n	800c498 <CDC_Control_FS+0xac>
 800c402:	a201      	add	r2, pc, #4	; (adr r2, 800c408 <CDC_Control_FS+0x1c>)
 800c404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c408:	0800c499 	.word	0x0800c499
 800c40c:	0800c499 	.word	0x0800c499
 800c410:	0800c499 	.word	0x0800c499
 800c414:	0800c499 	.word	0x0800c499
 800c418:	0800c499 	.word	0x0800c499
 800c41c:	0800c499 	.word	0x0800c499
 800c420:	0800c499 	.word	0x0800c499
 800c424:	0800c499 	.word	0x0800c499
 800c428:	0800c499 	.word	0x0800c499
 800c42c:	0800c499 	.word	0x0800c499
 800c430:	0800c499 	.word	0x0800c499
 800c434:	0800c499 	.word	0x0800c499
 800c438:	0800c499 	.word	0x0800c499
 800c43c:	0800c499 	.word	0x0800c499
 800c440:	0800c499 	.word	0x0800c499
 800c444:	0800c499 	.word	0x0800c499
 800c448:	0800c499 	.word	0x0800c499
 800c44c:	0800c499 	.word	0x0800c499
 800c450:	0800c499 	.word	0x0800c499
 800c454:	0800c499 	.word	0x0800c499
 800c458:	0800c499 	.word	0x0800c499
 800c45c:	0800c499 	.word	0x0800c499
 800c460:	0800c499 	.word	0x0800c499
 800c464:	0800c499 	.word	0x0800c499
 800c468:	0800c499 	.word	0x0800c499
 800c46c:	0800c499 	.word	0x0800c499
 800c470:	0800c499 	.word	0x0800c499
 800c474:	0800c499 	.word	0x0800c499
 800c478:	0800c499 	.word	0x0800c499
 800c47c:	0800c499 	.word	0x0800c499
 800c480:	0800c499 	.word	0x0800c499
 800c484:	0800c499 	.word	0x0800c499
 800c488:	0800c499 	.word	0x0800c499
 800c48c:	0800c499 	.word	0x0800c499
 800c490:	0800c499 	.word	0x0800c499
 800c494:	0800c499 	.word	0x0800c499
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c498:	bf00      	nop
  }

  return (USBD_OK);
 800c49a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c4b2:	6879      	ldr	r1, [r7, #4]
 800c4b4:	4805      	ldr	r0, [pc, #20]	; (800c4cc <CDC_Receive_FS+0x24>)
 800c4b6:	f7fc f822 	bl	80084fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c4ba:	4804      	ldr	r0, [pc, #16]	; (800c4cc <CDC_Receive_FS+0x24>)
 800c4bc:	f7fc f838 	bl	8008530 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c4c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	3708      	adds	r7, #8
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20001d88 	.word	0x20001d88

0800c4d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b087      	sub	sp, #28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c4e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	371c      	adds	r7, #28
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
	...

0800c4f4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	6039      	str	r1, [r7, #0]
 800c4fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2212      	movs	r2, #18
 800c504:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c506:	4b03      	ldr	r3, [pc, #12]	; (800c514 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c508:	4618      	mov	r0, r3
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	20000154 	.word	0x20000154

0800c518 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	6039      	str	r1, [r7, #0]
 800c522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	2204      	movs	r2, #4
 800c528:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c52a:	4b03      	ldr	r3, [pc, #12]	; (800c538 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	20000168 	.word	0x20000168

0800c53c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	4603      	mov	r3, r0
 800c544:	6039      	str	r1, [r7, #0]
 800c546:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c548:	79fb      	ldrb	r3, [r7, #7]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d105      	bne.n	800c55a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c54e:	683a      	ldr	r2, [r7, #0]
 800c550:	4907      	ldr	r1, [pc, #28]	; (800c570 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c552:	4808      	ldr	r0, [pc, #32]	; (800c574 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c554:	f7fd f855 	bl	8009602 <USBD_GetString>
 800c558:	e004      	b.n	800c564 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	4904      	ldr	r1, [pc, #16]	; (800c570 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c55e:	4805      	ldr	r0, [pc, #20]	; (800c574 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c560:	f7fd f84f 	bl	8009602 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c564:	4b02      	ldr	r3, [pc, #8]	; (800c570 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c566:	4618      	mov	r0, r3
 800c568:	3708      	adds	r7, #8
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	20003058 	.word	0x20003058
 800c574:	0800d290 	.word	0x0800d290

0800c578 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	4603      	mov	r3, r0
 800c580:	6039      	str	r1, [r7, #0]
 800c582:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c584:	683a      	ldr	r2, [r7, #0]
 800c586:	4904      	ldr	r1, [pc, #16]	; (800c598 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c588:	4804      	ldr	r0, [pc, #16]	; (800c59c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c58a:	f7fd f83a 	bl	8009602 <USBD_GetString>
  return USBD_StrDesc;
 800c58e:	4b02      	ldr	r3, [pc, #8]	; (800c598 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c590:	4618      	mov	r0, r3
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	20003058 	.word	0x20003058
 800c59c:	0800d2a8 	.word	0x0800d2a8

0800c5a0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	6039      	str	r1, [r7, #0]
 800c5aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	221a      	movs	r2, #26
 800c5b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c5b2:	f000 f843 	bl	800c63c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c5b6:	4b02      	ldr	r3, [pc, #8]	; (800c5c0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3708      	adds	r7, #8
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	2000016c 	.word	0x2000016c

0800c5c4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	6039      	str	r1, [r7, #0]
 800c5ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c5d0:	79fb      	ldrb	r3, [r7, #7]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d105      	bne.n	800c5e2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	4907      	ldr	r1, [pc, #28]	; (800c5f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c5da:	4808      	ldr	r0, [pc, #32]	; (800c5fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c5dc:	f7fd f811 	bl	8009602 <USBD_GetString>
 800c5e0:	e004      	b.n	800c5ec <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	4904      	ldr	r1, [pc, #16]	; (800c5f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c5e6:	4805      	ldr	r0, [pc, #20]	; (800c5fc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c5e8:	f7fd f80b 	bl	8009602 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c5ec:	4b02      	ldr	r3, [pc, #8]	; (800c5f8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3708      	adds	r7, #8
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	20003058 	.word	0x20003058
 800c5fc:	0800d2bc 	.word	0x0800d2bc

0800c600 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
 800c606:	4603      	mov	r3, r0
 800c608:	6039      	str	r1, [r7, #0]
 800c60a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c60c:	79fb      	ldrb	r3, [r7, #7]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d105      	bne.n	800c61e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	4907      	ldr	r1, [pc, #28]	; (800c634 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c616:	4808      	ldr	r0, [pc, #32]	; (800c638 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c618:	f7fc fff3 	bl	8009602 <USBD_GetString>
 800c61c:	e004      	b.n	800c628 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c61e:	683a      	ldr	r2, [r7, #0]
 800c620:	4904      	ldr	r1, [pc, #16]	; (800c634 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c622:	4805      	ldr	r0, [pc, #20]	; (800c638 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c624:	f7fc ffed 	bl	8009602 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c628:	4b02      	ldr	r3, [pc, #8]	; (800c634 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3708      	adds	r7, #8
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}
 800c632:	bf00      	nop
 800c634:	20003058 	.word	0x20003058
 800c638:	0800d2c8 	.word	0x0800d2c8

0800c63c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c642:	4b0f      	ldr	r3, [pc, #60]	; (800c680 <Get_SerialNum+0x44>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c648:	4b0e      	ldr	r3, [pc, #56]	; (800c684 <Get_SerialNum+0x48>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c64e:	4b0e      	ldr	r3, [pc, #56]	; (800c688 <Get_SerialNum+0x4c>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	4413      	add	r3, r2
 800c65a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d009      	beq.n	800c676 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c662:	2208      	movs	r2, #8
 800c664:	4909      	ldr	r1, [pc, #36]	; (800c68c <Get_SerialNum+0x50>)
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	f000 f814 	bl	800c694 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c66c:	2204      	movs	r2, #4
 800c66e:	4908      	ldr	r1, [pc, #32]	; (800c690 <Get_SerialNum+0x54>)
 800c670:	68b8      	ldr	r0, [r7, #8]
 800c672:	f000 f80f 	bl	800c694 <IntToUnicode>
  }
}
 800c676:	bf00      	nop
 800c678:	3710      	adds	r7, #16
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	1fff7590 	.word	0x1fff7590
 800c684:	1fff7594 	.word	0x1fff7594
 800c688:	1fff7598 	.word	0x1fff7598
 800c68c:	2000016e 	.word	0x2000016e
 800c690:	2000017e 	.word	0x2000017e

0800c694 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c694:	b480      	push	{r7}
 800c696:	b087      	sub	sp, #28
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	75fb      	strb	r3, [r7, #23]
 800c6aa:	e027      	b.n	800c6fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	0f1b      	lsrs	r3, r3, #28
 800c6b0:	2b09      	cmp	r3, #9
 800c6b2:	d80b      	bhi.n	800c6cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	0f1b      	lsrs	r3, r3, #28
 800c6b8:	b2da      	uxtb	r2, r3
 800c6ba:	7dfb      	ldrb	r3, [r7, #23]
 800c6bc:	005b      	lsls	r3, r3, #1
 800c6be:	4619      	mov	r1, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	440b      	add	r3, r1
 800c6c4:	3230      	adds	r2, #48	; 0x30
 800c6c6:	b2d2      	uxtb	r2, r2
 800c6c8:	701a      	strb	r2, [r3, #0]
 800c6ca:	e00a      	b.n	800c6e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	0f1b      	lsrs	r3, r3, #28
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
 800c6d4:	005b      	lsls	r3, r3, #1
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	440b      	add	r3, r1
 800c6dc:	3237      	adds	r2, #55	; 0x37
 800c6de:	b2d2      	uxtb	r2, r2
 800c6e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	011b      	lsls	r3, r3, #4
 800c6e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c6e8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ea:	005b      	lsls	r3, r3, #1
 800c6ec:	3301      	adds	r3, #1
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c6f6:	7dfb      	ldrb	r3, [r7, #23]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	75fb      	strb	r3, [r7, #23]
 800c6fc:	7dfa      	ldrb	r2, [r7, #23]
 800c6fe:	79fb      	ldrb	r3, [r7, #7]
 800c700:	429a      	cmp	r2, r3
 800c702:	d3d3      	bcc.n	800c6ac <IntToUnicode+0x18>
  }
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop
 800c708:	371c      	adds	r7, #28
 800c70a:	46bd      	mov	sp, r7
 800c70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c710:	4770      	bx	lr
	...

0800c714 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b098      	sub	sp, #96	; 0x60
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c71c:	f107 030c 	add.w	r3, r7, #12
 800c720:	2254      	movs	r2, #84	; 0x54
 800c722:	2100      	movs	r1, #0
 800c724:	4618      	mov	r0, r3
 800c726:	f000 fb41 	bl	800cdac <memset>
  if(pcdHandle->Instance==USB)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a1e      	ldr	r2, [pc, #120]	; (800c7a8 <HAL_PCD_MspInit+0x94>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d135      	bne.n	800c7a0 <HAL_PCD_MspInit+0x8c>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c738:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c73a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c73e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c740:	f107 030c 	add.w	r3, r7, #12
 800c744:	4618      	mov	r0, r3
 800c746:	f7f7 fcdd 	bl	8004104 <HAL_RCCEx_PeriphCLKConfig>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d001      	beq.n	800c754 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800c750:	f7f3 ff52 	bl	80005f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c754:	4b15      	ldr	r3, [pc, #84]	; (800c7ac <HAL_PCD_MspInit+0x98>)
 800c756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c758:	4a14      	ldr	r2, [pc, #80]	; (800c7ac <HAL_PCD_MspInit+0x98>)
 800c75a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c75e:	6593      	str	r3, [r2, #88]	; 0x58
 800c760:	4b12      	ldr	r3, [pc, #72]	; (800c7ac <HAL_PCD_MspInit+0x98>)
 800c762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c768:	60bb      	str	r3, [r7, #8]
 800c76a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800c76c:	2200      	movs	r2, #0
 800c76e:	2105      	movs	r1, #5
 800c770:	2014      	movs	r0, #20
 800c772:	f7f4 facd 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c776:	2014      	movs	r0, #20
 800c778:	f7f4 faf4 	bl	8000d64 <HAL_NVIC_EnableIRQ>
    if(pcdHandle->Init.low_power_enable == 1)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d10d      	bne.n	800c7a0 <HAL_PCD_MspInit+0x8c>
    {
      /* Enable EXTI Line 18 for USB wakeup */
      __HAL_USB_WAKEUP_EXTI_ENABLE_IT();
 800c784:	4b0a      	ldr	r3, [pc, #40]	; (800c7b0 <HAL_PCD_MspInit+0x9c>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4a09      	ldr	r2, [pc, #36]	; (800c7b0 <HAL_PCD_MspInit+0x9c>)
 800c78a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c78e:	6013      	str	r3, [r2, #0]
      HAL_NVIC_SetPriority(USBWakeUp_IRQn, 5, 0);
 800c790:	2200      	movs	r2, #0
 800c792:	2105      	movs	r1, #5
 800c794:	202a      	movs	r0, #42	; 0x2a
 800c796:	f7f4 fabb 	bl	8000d10 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(USBWakeUp_IRQn);
 800c79a:	202a      	movs	r0, #42	; 0x2a
 800c79c:	f7f4 fae2 	bl	8000d64 <HAL_NVIC_EnableIRQ>
    }
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c7a0:	bf00      	nop
 800c7a2:	3760      	adds	r7, #96	; 0x60
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	40005c00 	.word	0x40005c00
 800c7ac:	40021000 	.word	0x40021000
 800c7b0:	40010400 	.word	0x40010400

0800c7b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	4610      	mov	r0, r2
 800c7cc:	f7fb ff7c 	bl	80086c8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c7ea:	78fa      	ldrb	r2, [r7, #3]
 800c7ec:	6879      	ldr	r1, [r7, #4]
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	4413      	add	r3, r2
 800c7f4:	00db      	lsls	r3, r3, #3
 800c7f6:	440b      	add	r3, r1
 800c7f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	78fb      	ldrb	r3, [r7, #3]
 800c800:	4619      	mov	r1, r3
 800c802:	f7fb ffb6 	bl	8008772 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c806:	bf00      	nop
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b082      	sub	sp, #8
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
 800c816:	460b      	mov	r3, r1
 800c818:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c820:	78fa      	ldrb	r2, [r7, #3]
 800c822:	6879      	ldr	r1, [r7, #4]
 800c824:	4613      	mov	r3, r2
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	00db      	lsls	r3, r3, #3
 800c82c:	440b      	add	r3, r1
 800c82e:	333c      	adds	r3, #60	; 0x3c
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	78fb      	ldrb	r3, [r7, #3]
 800c834:	4619      	mov	r1, r3
 800c836:	f7fb ffff 	bl	8008838 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c83a:	bf00      	nop
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b082      	sub	sp, #8
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c850:	4618      	mov	r0, r3
 800c852:	f7fc f913 	bl	8008a7c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c856:	bf00      	nop
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}

0800c85e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c85e:	b580      	push	{r7, lr}
 800c860:	b084      	sub	sp, #16
 800c862:	af00      	add	r7, sp, #0
 800c864:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c866:	2301      	movs	r3, #1
 800c868:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d001      	beq.n	800c876 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c872:	f7f3 fec1 	bl	80005f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c87c:	7bfa      	ldrb	r2, [r7, #15]
 800c87e:	4611      	mov	r1, r2
 800c880:	4618      	mov	r0, r3
 800c882:	f7fc f8bd 	bl	8008a00 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fc f869 	bl	8008964 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c892:	bf00      	nop
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
	...

0800c89c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fc f8b8 	bl	8008a20 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	699b      	ldr	r3, [r3, #24]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d005      	beq.n	800c8c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8b8:	4b04      	ldr	r3, [pc, #16]	; (800c8cc <HAL_PCD_SuspendCallback+0x30>)
 800c8ba:	691b      	ldr	r3, [r3, #16]
 800c8bc:	4a03      	ldr	r2, [pc, #12]	; (800c8cc <HAL_PCD_SuspendCallback+0x30>)
 800c8be:	f043 0306 	orr.w	r3, r3, #6
 800c8c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	e000ed00 	.word	0xe000ed00

0800c8d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	699b      	ldr	r3, [r3, #24]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d007      	beq.n	800c8f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c8e0:	4b08      	ldr	r3, [pc, #32]	; (800c904 <HAL_PCD_ResumeCallback+0x34>)
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	4a07      	ldr	r2, [pc, #28]	; (800c904 <HAL_PCD_ResumeCallback+0x34>)
 800c8e6:	f023 0306 	bic.w	r3, r3, #6
 800c8ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c8ec:	f000 f9fa 	bl	800cce4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7fc f8a8 	bl	8008a4c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c8fc:	bf00      	nop
 800c8fe:	3708      	adds	r7, #8
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	e000ed00 	.word	0xe000ed00

0800c908 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c910:	4a2b      	ldr	r2, [pc, #172]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4a29      	ldr	r2, [pc, #164]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c91c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c920:	4b27      	ldr	r3, [pc, #156]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c922:	4a28      	ldr	r2, [pc, #160]	; (800c9c4 <USBD_LL_Init+0xbc>)
 800c924:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c926:	4b26      	ldr	r3, [pc, #152]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c928:	2208      	movs	r2, #8
 800c92a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c92c:	4b24      	ldr	r3, [pc, #144]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c92e:	2202      	movs	r2, #2
 800c930:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c932:	4b23      	ldr	r3, [pc, #140]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c934:	2202      	movs	r2, #2
 800c936:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c938:	4b21      	ldr	r3, [pc, #132]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = ENABLE;
 800c93e:	4b20      	ldr	r3, [pc, #128]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c940:	2201      	movs	r2, #1
 800c942:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c944:	4b1e      	ldr	r3, [pc, #120]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c946:	2200      	movs	r2, #0
 800c948:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c94a:	4b1d      	ldr	r3, [pc, #116]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c94c:	2200      	movs	r2, #0
 800c94e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c950:	481b      	ldr	r0, [pc, #108]	; (800c9c0 <USBD_LL_Init+0xb8>)
 800c952:	f7f4 feb5 	bl	80016c0 <HAL_PCD_Init>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d001      	beq.n	800c960 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c95c:	f7f3 fe4c 	bl	80005f8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c966:	2318      	movs	r3, #24
 800c968:	2200      	movs	r2, #0
 800c96a:	2100      	movs	r1, #0
 800c96c:	f7f6 fb7b 	bl	8003066 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c976:	2358      	movs	r3, #88	; 0x58
 800c978:	2200      	movs	r2, #0
 800c97a:	2180      	movs	r1, #128	; 0x80
 800c97c:	f7f6 fb73 	bl	8003066 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c986:	23c0      	movs	r3, #192	; 0xc0
 800c988:	2200      	movs	r2, #0
 800c98a:	2181      	movs	r1, #129	; 0x81
 800c98c:	f7f6 fb6b 	bl	8003066 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c996:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c99a:	2200      	movs	r2, #0
 800c99c:	2101      	movs	r1, #1
 800c99e:	f7f6 fb62 	bl	8003066 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c9a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	2182      	movs	r1, #130	; 0x82
 800c9b0:	f7f6 fb59 	bl	8003066 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c9b4:	2300      	movs	r3, #0
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	20003258 	.word	0x20003258
 800c9c4:	40005c00 	.word	0x40005c00

0800c9c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f7f4 ff60 	bl	80018a4 <HAL_PCD_Start>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 f980 	bl	800ccf0 <USBD_Get_USB_Status>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	4608      	mov	r0, r1
 800ca08:	4611      	mov	r1, r2
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	70fb      	strb	r3, [r7, #3]
 800ca10:	460b      	mov	r3, r1
 800ca12:	70bb      	strb	r3, [r7, #2]
 800ca14:	4613      	mov	r3, r2
 800ca16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ca26:	78bb      	ldrb	r3, [r7, #2]
 800ca28:	883a      	ldrh	r2, [r7, #0]
 800ca2a:	78f9      	ldrb	r1, [r7, #3]
 800ca2c:	f7f5 f8a8 	bl	8001b80 <HAL_PCD_EP_Open>
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 f95a 	bl	800ccf0 <USBD_Get_USB_Status>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3710      	adds	r7, #16
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}

0800ca4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca4a:	b580      	push	{r7, lr}
 800ca4c:	b084      	sub	sp, #16
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
 800ca52:	460b      	mov	r3, r1
 800ca54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca56:	2300      	movs	r3, #0
 800ca58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ca64:	78fa      	ldrb	r2, [r7, #3]
 800ca66:	4611      	mov	r1, r2
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7f5 f8ef 	bl	8001c4c <HAL_PCD_EP_Close>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca72:	7bfb      	ldrb	r3, [r7, #15]
 800ca74:	4618      	mov	r0, r3
 800ca76:	f000 f93b 	bl	800ccf0 <USBD_Get_USB_Status>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	460b      	mov	r3, r1
 800ca92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca94:	2300      	movs	r3, #0
 800ca96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800caa2:	78fa      	ldrb	r2, [r7, #3]
 800caa4:	4611      	mov	r1, r2
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7f5 f9b0 	bl	8001e0c <HAL_PCD_EP_SetStall>
 800caac:	4603      	mov	r3, r0
 800caae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cab0:	7bfb      	ldrb	r3, [r7, #15]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f000 f91c 	bl	800ccf0 <USBD_Get_USB_Status>
 800cab8:	4603      	mov	r3, r0
 800caba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b084      	sub	sp, #16
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
 800cace:	460b      	mov	r3, r1
 800cad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cad2:	2300      	movs	r3, #0
 800cad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cae0:	78fa      	ldrb	r2, [r7, #3]
 800cae2:	4611      	mov	r1, r2
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7f5 f9e3 	bl	8001eb0 <HAL_PCD_EP_ClrStall>
 800caea:	4603      	mov	r3, r0
 800caec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caee:	7bfb      	ldrb	r3, [r7, #15]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f000 f8fd 	bl	800ccf0 <USBD_Get_USB_Status>
 800caf6:	4603      	mov	r3, r0
 800caf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cafa:	7bbb      	ldrb	r3, [r7, #14]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b085      	sub	sp, #20
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	da0c      	bge.n	800cb3a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb20:	78fb      	ldrb	r3, [r7, #3]
 800cb22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb26:	68f9      	ldr	r1, [r7, #12]
 800cb28:	1c5a      	adds	r2, r3, #1
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4413      	add	r3, r2
 800cb30:	00db      	lsls	r3, r3, #3
 800cb32:	440b      	add	r3, r1
 800cb34:	3302      	adds	r3, #2
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	e00b      	b.n	800cb52 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb3a:	78fb      	ldrb	r3, [r7, #3]
 800cb3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb40:	68f9      	ldr	r1, [r7, #12]
 800cb42:	4613      	mov	r3, r2
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	4413      	add	r3, r2
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	440b      	add	r3, r1
 800cb4c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cb50:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3714      	adds	r7, #20
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b084      	sub	sp, #16
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	460b      	mov	r3, r1
 800cb68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cb78:	78fa      	ldrb	r2, [r7, #3]
 800cb7a:	4611      	mov	r1, r2
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f7f4 ffda 	bl	8001b36 <HAL_PCD_SetAddress>
 800cb82:	4603      	mov	r3, r0
 800cb84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 f8b1 	bl	800ccf0 <USBD_Get_USB_Status>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb92:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3710      	adds	r7, #16
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	607a      	str	r2, [r7, #4]
 800cba6:	603b      	str	r3, [r7, #0]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbba:	7af9      	ldrb	r1, [r7, #11]
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	f7f5 f8e1 	bl	8001d86 <HAL_PCD_EP_Transmit>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 f890 	bl	800ccf0 <USBD_Get_USB_Status>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cbd4:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b086      	sub	sp, #24
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	60f8      	str	r0, [r7, #12]
 800cbe6:	607a      	str	r2, [r7, #4]
 800cbe8:	603b      	str	r3, [r7, #0]
 800cbea:	460b      	mov	r3, r1
 800cbec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbfc:	7af9      	ldrb	r1, [r7, #11]
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	f7f5 f86b 	bl	8001cdc <HAL_PCD_EP_Receive>
 800cc06:	4603      	mov	r3, r0
 800cc08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc0a:	7dfb      	ldrb	r3, [r7, #23]
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f000 f86f 	bl	800ccf0 <USBD_Get_USB_Status>
 800cc12:	4603      	mov	r3, r0
 800cc14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc16:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3718      	adds	r7, #24
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	460b      	mov	r3, r1
 800cc2a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc32:	78fa      	ldrb	r2, [r7, #3]
 800cc34:	4611      	mov	r1, r2
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7f5 f88d 	bl	8001d56 <HAL_PCD_EP_GetRxCount>
 800cc3c:	4603      	mov	r3, r0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
	...

0800cc48 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800cc54:	78fb      	ldrb	r3, [r7, #3]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d002      	beq.n	800cc60 <HAL_PCDEx_LPM_Callback+0x18>
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d013      	beq.n	800cc86 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 800cc5e:	e023      	b.n	800cca8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d007      	beq.n	800cc78 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cc68:	f000 f83c 	bl	800cce4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc6c:	4b10      	ldr	r3, [pc, #64]	; (800ccb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800cc6e:	691b      	ldr	r3, [r3, #16]
 800cc70:	4a0f      	ldr	r2, [pc, #60]	; (800ccb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800cc72:	f023 0306 	bic.w	r3, r3, #6
 800cc76:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7fb fee4 	bl	8008a4c <USBD_LL_Resume>
    break;
 800cc84:	e010      	b.n	800cca8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fb fec7 	bl	8008a20 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	699b      	ldr	r3, [r3, #24]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d005      	beq.n	800cca6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc9a:	4b05      	ldr	r3, [pc, #20]	; (800ccb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800cc9c:	691b      	ldr	r3, [r3, #16]
 800cc9e:	4a04      	ldr	r2, [pc, #16]	; (800ccb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800cca0:	f043 0306 	orr.w	r3, r3, #6
 800cca4:	6113      	str	r3, [r2, #16]
    break;   
 800cca6:	bf00      	nop
}
 800cca8:	bf00      	nop
 800ccaa:	3708      	adds	r7, #8
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	e000ed00 	.word	0xe000ed00

0800ccb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ccbc:	4b03      	ldr	r3, [pc, #12]	; (800cccc <USBD_static_malloc+0x18>)
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	370c      	adds	r7, #12
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	2000354c 	.word	0x2000354c

0800ccd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]

}
 800ccd8:	bf00      	nop
 800ccda:	370c      	adds	r7, #12
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce2:	4770      	bx	lr

0800cce4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cce8:	f7f3 fc27 	bl	800053a <SystemClock_Config>
}
 800ccec:	bf00      	nop
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	2b03      	cmp	r3, #3
 800cd02:	d817      	bhi.n	800cd34 <USBD_Get_USB_Status+0x44>
 800cd04:	a201      	add	r2, pc, #4	; (adr r2, 800cd0c <USBD_Get_USB_Status+0x1c>)
 800cd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd0a:	bf00      	nop
 800cd0c:	0800cd1d 	.word	0x0800cd1d
 800cd10:	0800cd23 	.word	0x0800cd23
 800cd14:	0800cd29 	.word	0x0800cd29
 800cd18:	0800cd2f 	.word	0x0800cd2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	73fb      	strb	r3, [r7, #15]
    break;
 800cd20:	e00b      	b.n	800cd3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cd22:	2303      	movs	r3, #3
 800cd24:	73fb      	strb	r3, [r7, #15]
    break;
 800cd26:	e008      	b.n	800cd3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	73fb      	strb	r3, [r7, #15]
    break;
 800cd2c:	e005      	b.n	800cd3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	73fb      	strb	r3, [r7, #15]
    break;
 800cd32:	e002      	b.n	800cd3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cd34:	2303      	movs	r3, #3
 800cd36:	73fb      	strb	r3, [r7, #15]
    break;
 800cd38:	bf00      	nop
  }
  return usb_status;
 800cd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3714      	adds	r7, #20
 800cd40:	46bd      	mov	sp, r7
 800cd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd46:	4770      	bx	lr

0800cd48 <__libc_init_array>:
 800cd48:	b570      	push	{r4, r5, r6, lr}
 800cd4a:	4d0d      	ldr	r5, [pc, #52]	; (800cd80 <__libc_init_array+0x38>)
 800cd4c:	4c0d      	ldr	r4, [pc, #52]	; (800cd84 <__libc_init_array+0x3c>)
 800cd4e:	1b64      	subs	r4, r4, r5
 800cd50:	10a4      	asrs	r4, r4, #2
 800cd52:	2600      	movs	r6, #0
 800cd54:	42a6      	cmp	r6, r4
 800cd56:	d109      	bne.n	800cd6c <__libc_init_array+0x24>
 800cd58:	4d0b      	ldr	r5, [pc, #44]	; (800cd88 <__libc_init_array+0x40>)
 800cd5a:	4c0c      	ldr	r4, [pc, #48]	; (800cd8c <__libc_init_array+0x44>)
 800cd5c:	f000 f8f0 	bl	800cf40 <_init>
 800cd60:	1b64      	subs	r4, r4, r5
 800cd62:	10a4      	asrs	r4, r4, #2
 800cd64:	2600      	movs	r6, #0
 800cd66:	42a6      	cmp	r6, r4
 800cd68:	d105      	bne.n	800cd76 <__libc_init_array+0x2e>
 800cd6a:	bd70      	pop	{r4, r5, r6, pc}
 800cd6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd70:	4798      	blx	r3
 800cd72:	3601      	adds	r6, #1
 800cd74:	e7ee      	b.n	800cd54 <__libc_init_array+0xc>
 800cd76:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd7a:	4798      	blx	r3
 800cd7c:	3601      	adds	r6, #1
 800cd7e:	e7f2      	b.n	800cd66 <__libc_init_array+0x1e>
 800cd80:	0800d384 	.word	0x0800d384
 800cd84:	0800d384 	.word	0x0800d384
 800cd88:	0800d384 	.word	0x0800d384
 800cd8c:	0800d388 	.word	0x0800d388

0800cd90 <memcpy>:
 800cd90:	440a      	add	r2, r1
 800cd92:	4291      	cmp	r1, r2
 800cd94:	f100 33ff 	add.w	r3, r0, #4294967295
 800cd98:	d100      	bne.n	800cd9c <memcpy+0xc>
 800cd9a:	4770      	bx	lr
 800cd9c:	b510      	push	{r4, lr}
 800cd9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cda2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cda6:	4291      	cmp	r1, r2
 800cda8:	d1f9      	bne.n	800cd9e <memcpy+0xe>
 800cdaa:	bd10      	pop	{r4, pc}

0800cdac <memset>:
 800cdac:	4402      	add	r2, r0
 800cdae:	4603      	mov	r3, r0
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d100      	bne.n	800cdb6 <memset+0xa>
 800cdb4:	4770      	bx	lr
 800cdb6:	f803 1b01 	strb.w	r1, [r3], #1
 800cdba:	e7f9      	b.n	800cdb0 <memset+0x4>

0800cdbc <_free_r>:
 800cdbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cdbe:	2900      	cmp	r1, #0
 800cdc0:	d044      	beq.n	800ce4c <_free_r+0x90>
 800cdc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdc6:	9001      	str	r0, [sp, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f1a1 0404 	sub.w	r4, r1, #4
 800cdce:	bfb8      	it	lt
 800cdd0:	18e4      	addlt	r4, r4, r3
 800cdd2:	f000 f8a9 	bl	800cf28 <__malloc_lock>
 800cdd6:	4a1e      	ldr	r2, [pc, #120]	; (800ce50 <_free_r+0x94>)
 800cdd8:	9801      	ldr	r0, [sp, #4]
 800cdda:	6813      	ldr	r3, [r2, #0]
 800cddc:	b933      	cbnz	r3, 800cdec <_free_r+0x30>
 800cdde:	6063      	str	r3, [r4, #4]
 800cde0:	6014      	str	r4, [r2, #0]
 800cde2:	b003      	add	sp, #12
 800cde4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cde8:	f000 b8a4 	b.w	800cf34 <__malloc_unlock>
 800cdec:	42a3      	cmp	r3, r4
 800cdee:	d908      	bls.n	800ce02 <_free_r+0x46>
 800cdf0:	6825      	ldr	r5, [r4, #0]
 800cdf2:	1961      	adds	r1, r4, r5
 800cdf4:	428b      	cmp	r3, r1
 800cdf6:	bf01      	itttt	eq
 800cdf8:	6819      	ldreq	r1, [r3, #0]
 800cdfa:	685b      	ldreq	r3, [r3, #4]
 800cdfc:	1949      	addeq	r1, r1, r5
 800cdfe:	6021      	streq	r1, [r4, #0]
 800ce00:	e7ed      	b.n	800cdde <_free_r+0x22>
 800ce02:	461a      	mov	r2, r3
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	b10b      	cbz	r3, 800ce0c <_free_r+0x50>
 800ce08:	42a3      	cmp	r3, r4
 800ce0a:	d9fa      	bls.n	800ce02 <_free_r+0x46>
 800ce0c:	6811      	ldr	r1, [r2, #0]
 800ce0e:	1855      	adds	r5, r2, r1
 800ce10:	42a5      	cmp	r5, r4
 800ce12:	d10b      	bne.n	800ce2c <_free_r+0x70>
 800ce14:	6824      	ldr	r4, [r4, #0]
 800ce16:	4421      	add	r1, r4
 800ce18:	1854      	adds	r4, r2, r1
 800ce1a:	42a3      	cmp	r3, r4
 800ce1c:	6011      	str	r1, [r2, #0]
 800ce1e:	d1e0      	bne.n	800cde2 <_free_r+0x26>
 800ce20:	681c      	ldr	r4, [r3, #0]
 800ce22:	685b      	ldr	r3, [r3, #4]
 800ce24:	6053      	str	r3, [r2, #4]
 800ce26:	4421      	add	r1, r4
 800ce28:	6011      	str	r1, [r2, #0]
 800ce2a:	e7da      	b.n	800cde2 <_free_r+0x26>
 800ce2c:	d902      	bls.n	800ce34 <_free_r+0x78>
 800ce2e:	230c      	movs	r3, #12
 800ce30:	6003      	str	r3, [r0, #0]
 800ce32:	e7d6      	b.n	800cde2 <_free_r+0x26>
 800ce34:	6825      	ldr	r5, [r4, #0]
 800ce36:	1961      	adds	r1, r4, r5
 800ce38:	428b      	cmp	r3, r1
 800ce3a:	bf04      	itt	eq
 800ce3c:	6819      	ldreq	r1, [r3, #0]
 800ce3e:	685b      	ldreq	r3, [r3, #4]
 800ce40:	6063      	str	r3, [r4, #4]
 800ce42:	bf04      	itt	eq
 800ce44:	1949      	addeq	r1, r1, r5
 800ce46:	6021      	streq	r1, [r4, #0]
 800ce48:	6054      	str	r4, [r2, #4]
 800ce4a:	e7ca      	b.n	800cde2 <_free_r+0x26>
 800ce4c:	b003      	add	sp, #12
 800ce4e:	bd30      	pop	{r4, r5, pc}
 800ce50:	2000376c 	.word	0x2000376c

0800ce54 <cleanup_glue>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	460c      	mov	r4, r1
 800ce58:	6809      	ldr	r1, [r1, #0]
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	b109      	cbz	r1, 800ce62 <cleanup_glue+0xe>
 800ce5e:	f7ff fff9 	bl	800ce54 <cleanup_glue>
 800ce62:	4621      	mov	r1, r4
 800ce64:	4628      	mov	r0, r5
 800ce66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce6a:	f7ff bfa7 	b.w	800cdbc <_free_r>
	...

0800ce70 <_reclaim_reent>:
 800ce70:	4b2c      	ldr	r3, [pc, #176]	; (800cf24 <_reclaim_reent+0xb4>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4283      	cmp	r3, r0
 800ce76:	b570      	push	{r4, r5, r6, lr}
 800ce78:	4604      	mov	r4, r0
 800ce7a:	d051      	beq.n	800cf20 <_reclaim_reent+0xb0>
 800ce7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ce7e:	b143      	cbz	r3, 800ce92 <_reclaim_reent+0x22>
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d14a      	bne.n	800cf1c <_reclaim_reent+0xac>
 800ce86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce88:	6819      	ldr	r1, [r3, #0]
 800ce8a:	b111      	cbz	r1, 800ce92 <_reclaim_reent+0x22>
 800ce8c:	4620      	mov	r0, r4
 800ce8e:	f7ff ff95 	bl	800cdbc <_free_r>
 800ce92:	6961      	ldr	r1, [r4, #20]
 800ce94:	b111      	cbz	r1, 800ce9c <_reclaim_reent+0x2c>
 800ce96:	4620      	mov	r0, r4
 800ce98:	f7ff ff90 	bl	800cdbc <_free_r>
 800ce9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ce9e:	b111      	cbz	r1, 800cea6 <_reclaim_reent+0x36>
 800cea0:	4620      	mov	r0, r4
 800cea2:	f7ff ff8b 	bl	800cdbc <_free_r>
 800cea6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cea8:	b111      	cbz	r1, 800ceb0 <_reclaim_reent+0x40>
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f7ff ff86 	bl	800cdbc <_free_r>
 800ceb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ceb2:	b111      	cbz	r1, 800ceba <_reclaim_reent+0x4a>
 800ceb4:	4620      	mov	r0, r4
 800ceb6:	f7ff ff81 	bl	800cdbc <_free_r>
 800ceba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cebc:	b111      	cbz	r1, 800cec4 <_reclaim_reent+0x54>
 800cebe:	4620      	mov	r0, r4
 800cec0:	f7ff ff7c 	bl	800cdbc <_free_r>
 800cec4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cec6:	b111      	cbz	r1, 800cece <_reclaim_reent+0x5e>
 800cec8:	4620      	mov	r0, r4
 800ceca:	f7ff ff77 	bl	800cdbc <_free_r>
 800cece:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ced0:	b111      	cbz	r1, 800ced8 <_reclaim_reent+0x68>
 800ced2:	4620      	mov	r0, r4
 800ced4:	f7ff ff72 	bl	800cdbc <_free_r>
 800ced8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ceda:	b111      	cbz	r1, 800cee2 <_reclaim_reent+0x72>
 800cedc:	4620      	mov	r0, r4
 800cede:	f7ff ff6d 	bl	800cdbc <_free_r>
 800cee2:	69a3      	ldr	r3, [r4, #24]
 800cee4:	b1e3      	cbz	r3, 800cf20 <_reclaim_reent+0xb0>
 800cee6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cee8:	4620      	mov	r0, r4
 800ceea:	4798      	blx	r3
 800ceec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ceee:	b1b9      	cbz	r1, 800cf20 <_reclaim_reent+0xb0>
 800cef0:	4620      	mov	r0, r4
 800cef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cef6:	f7ff bfad 	b.w	800ce54 <cleanup_glue>
 800cefa:	5949      	ldr	r1, [r1, r5]
 800cefc:	b941      	cbnz	r1, 800cf10 <_reclaim_reent+0xa0>
 800cefe:	3504      	adds	r5, #4
 800cf00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf02:	2d80      	cmp	r5, #128	; 0x80
 800cf04:	68d9      	ldr	r1, [r3, #12]
 800cf06:	d1f8      	bne.n	800cefa <_reclaim_reent+0x8a>
 800cf08:	4620      	mov	r0, r4
 800cf0a:	f7ff ff57 	bl	800cdbc <_free_r>
 800cf0e:	e7ba      	b.n	800ce86 <_reclaim_reent+0x16>
 800cf10:	680e      	ldr	r6, [r1, #0]
 800cf12:	4620      	mov	r0, r4
 800cf14:	f7ff ff52 	bl	800cdbc <_free_r>
 800cf18:	4631      	mov	r1, r6
 800cf1a:	e7ef      	b.n	800cefc <_reclaim_reent+0x8c>
 800cf1c:	2500      	movs	r5, #0
 800cf1e:	e7ef      	b.n	800cf00 <_reclaim_reent+0x90>
 800cf20:	bd70      	pop	{r4, r5, r6, pc}
 800cf22:	bf00      	nop
 800cf24:	20000188 	.word	0x20000188

0800cf28 <__malloc_lock>:
 800cf28:	4801      	ldr	r0, [pc, #4]	; (800cf30 <__malloc_lock+0x8>)
 800cf2a:	f7f3 bdc4 	b.w	8000ab6 <__retarget_lock_acquire_recursive>
 800cf2e:	bf00      	nop
 800cf30:	20000354 	.word	0x20000354

0800cf34 <__malloc_unlock>:
 800cf34:	4801      	ldr	r0, [pc, #4]	; (800cf3c <__malloc_unlock+0x8>)
 800cf36:	f7f3 bdd2 	b.w	8000ade <__retarget_lock_release_recursive>
 800cf3a:	bf00      	nop
 800cf3c:	20000354 	.word	0x20000354

0800cf40 <_init>:
 800cf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf42:	bf00      	nop
 800cf44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf46:	bc08      	pop	{r3}
 800cf48:	469e      	mov	lr, r3
 800cf4a:	4770      	bx	lr

0800cf4c <_fini>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	bf00      	nop
 800cf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf52:	bc08      	pop	{r3}
 800cf54:	469e      	mov	lr, r3
 800cf56:	4770      	bx	lr
